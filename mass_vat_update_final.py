#!/usr/bin/env python3
"""
–ú–ê–°–°–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï VAT –ü–†–ï–§–ò–ö–°–û–í
–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ PARKENTERTAINMENT
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥: custom_fields API
"""

import asyncio
import json
import sys
from pathlib import Path
from datetime import datetime

sys.path.append(str(Path('.').parent))
from src.infrastructure.zoho_api import ZohoAPIClient
from src.infrastructure.config import get_config

async def mass_update_vat_prefixes():
    print("üöÄ –ú–ê–°–°–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï VAT –ü–†–ï–§–ò–ö–°–û–í")
    print("="*70)
    print(f"‚è∞ –ù–∞—á–∞–ª–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("üîß –ú–µ—Ç–æ–¥: custom_fields API (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π)")
    print("üéØ –¶–µ–ª—å: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å—Å–∫–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã PL –∫–æ –≤—Å–µ–º VAT –Ω–æ–º–µ—Ä–∞–º")
    print()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–∏—Ç VAT –Ω–æ–º–µ—Ä–∞ –≤ Zoho Books!")
    print("üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print()
    
    confirm = input("ü§î –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ? (y/N): ").lower()
    if confirm != 'y':
        print("‚ùå –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    print("\nüé¨ –ù–ê–ß–ò–ù–ê–ï–ú –ú–ê–°–°–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï...")
    print("="*70)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª–∏–µ–Ω—Ç–∞
    config = get_config()
    api_client = ZohoAPIClient(
        client_id=config.zoho.client_id,
        client_secret=config.zoho.client_secret,
        refresh_token=config.zoho.refresh_token or ''
    )
    
    org_id = "20082562863"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    print("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
    with open('data/full_contacts/PARKENTERTAINMENT_20082562863_full.json', 'r', encoding='utf-8') as f:
        all_contacts = json.load(f)
    
    # –¶–µ–ª–µ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫)
    target_contact_ids = [
        '281497000005903525',  # AEvent (—É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω)
        '281497000006344068',  # AFanna fleur (—É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω)
        '281497000006068005',  # Awokado Project (—É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω)
        '281497000005903457',  # Be Unique
        '281497000005903389',  # Bimboo
        '281497000005007050',  # Carrefour Polska
        '281497000005007187',  # CCM Construction
        '281497000004571563',  # CHRONOS APARTAMENTY
        '281497000001825719',  # ETERIA CONSULTING
        '281497000005395276',  # EUROSTAR-TRANSPORT.EU
        '281497000004567718',  # F.P.H.U. PROBOX
        '281497000005999849',  # Faf Global
        '281497000005940057',  # Flower Island
        '281497000006365071',  # FN EUROPE
        '281497000006113586',  # Globe Trade Centre
        '281497000005126385',  # Google ADS
        '281497000005237353',  # Grid Dynamics Poland
        '281497000005962003',  # HOLO SP.
        '281497000005446183',  # Indigo Mental Club
        '281497000006113397'   # ISKRY
    ]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
    contacts_to_process = []
    
    for contact in all_contacts:
        if contact.get('contact_id') in target_contact_ids:
            company_name = contact.get('company_name', 'Unknown')
            contact_id = contact.get('contact_id')
            customer_sub_type = contact.get('customer_sub_type', 'Unknown')
            vat = contact.get('cf_tax_id', '')
            country = contact.get('billing_address', {}).get('country', '')
            
            contacts_to_process.append({
                'contact_id': contact_id,
                'company_name': company_name,
                'customer_sub_type': customer_sub_type,
                'current_vat': vat,
                'country': country
            })
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(contacts_to_process)}")
    print()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
    results = {
        'total': len(contacts_to_process),
        'updated': 0,
        'already_updated': 0,
        'skipped': 0,
        'errors': 0,
        'details': []
    }
    
    for i, contact_info in enumerate(contacts_to_process, 1):
        contact_id = contact_info['contact_id']
        company_name = contact_info['company_name']
        
        print(f"üîÑ –ö–û–ù–¢–ê–ö–¢ {i}/{len(contacts_to_process)}: {company_name[:50]}...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Zoho
            current_data = await api_client.get_contact_details(org_id, contact_id)
            
            if not current_data:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                results['errors'] += 1
                results['details'].append({
                    'contact': contact_info,
                    'status': 'ERROR',
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Zoho'
                })
                continue
            
            current_vat = current_data.get('cf_tax_id', '')
            customer_type = current_data.get('customer_sub_type', '')
            
            print(f"   üìä VAT: '{current_vat}' | –¢–∏–ø: {customer_type}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if current_vat.startswith('PL'):
                print(f"   ‚úÖ –£–∂–µ –∏–º–µ–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                results['already_updated'] += 1
                results['details'].append({
                    'contact': contact_info,
                    'status': 'ALREADY_UPDATED',
                    'vat': current_vat
                })
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –±–µ–∑ VAT
            if not current_vat or current_vat.strip() == '':
                print(f"   ‚è≠Ô∏è –ù–µ—Ç VAT –Ω–æ–º–µ—Ä–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                results['skipped'] += 1
                results['details'].append({
                    'contact': contact_info,
                    'status': 'SKIPPED',
                    'message': '–ù–µ—Ç VAT –Ω–æ–º–µ—Ä–∞'
                })
                continue
            
            # –û–±–Ω–æ–≤–ª—è–µ–º VAT
            new_vat = f"PL{current_vat}"
            print(f"   üîß –û–±–Ω–æ–≤–ª—è–µ–º: '{current_vat}' ‚Üí '{new_vat}'")
            
            # –†–ê–ë–û–ß–ò–ô –ú–ï–¢–û–î: custom_fields
            update_data = {
                'custom_fields': [
                    {
                        'api_name': 'cf_tax_id',
                        'value': new_vat
                    }
                ]
            }
            
            response = await api_client.update_contact(
                organization_id=org_id,
                contact_id=contact_id,
                contact_data=update_data
            )
            
            if not response:
                print(f"   ‚ùå API –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å")
                results['errors'] += 1
                results['details'].append({
                    'contact': contact_info,
                    'status': 'ERROR',
                    'message': 'API –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å'
                })
                continue
            
                                      # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
             await asyncio.sleep(0.3)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            
            updated_data = await api_client.get_contact_details(org_id, contact_id)
            
            if updated_data:
                final_vat = updated_data.get('cf_tax_id', '')
                
                if final_vat == new_vat:
                    print(f"   üéâ –£–°–ü–ï–•! VAT –æ–±–Ω–æ–≤–ª–µ–Ω")
                    results['updated'] += 1
                    results['details'].append({
                        'contact': contact_info,
                        'status': 'UPDATED',
                        'old_vat': current_vat,
                        'new_vat': final_vat
                    })
                else:
                    print(f"   ‚ùå VAT –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: '{final_vat}'")
                    results['errors'] += 1
                    results['details'].append({
                        'contact': contact_info,
                        'status': 'ERROR',
                        'message': f'VAT –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è: {final_vat}'
                    })
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                results['errors'] += 1
                results['details'].append({
                    'contact': contact_info,
                    'status': 'ERROR',
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
                })
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            results['errors'] += 1
            results['details'].append({
                'contact': contact_info,
                'status': 'ERROR',
                'message': str(e)
            })
        
                 # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
         if i < len(contacts_to_process):
             await asyncio.sleep(0.1)  # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        
        print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ú–ê–°–°–û–í–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø")
    print("="*70)
    print(f"‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üéØ –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {results['total']}")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {results['updated']}")
    print(f"   ‚úÖ –£–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {results['already_updated']}")
    print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {results['skipped']}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {results['errors']}")
    print()
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    if results['updated'] > 0:
        print("üéâ –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ö–û–ù–¢–ê–ö–¢–´:")
        for detail in results['details']:
            if detail['status'] == 'UPDATED':
                contact = detail['contact']
                print(f"   ‚úÖ {contact['company_name'][:50]}...")
                print(f"      {detail['old_vat']} ‚Üí {detail['new_vat']}")
        print()
    
    if results['already_updated'] > 0:
        print("‚úÖ –£–ñ–ï –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ö–û–ù–¢–ê–ö–¢–´:")
        for detail in results['details']:
            if detail['status'] == 'ALREADY_UPDATED':
                contact = detail['contact']
                print(f"   ‚úÖ {contact['company_name'][:50]}... (VAT: {detail['vat']})")
        print()
    
    if results['errors'] > 0:
        print("‚ùå –û–®–ò–ë–ö–ò:")
        for detail in results['details']:
            if detail['status'] == 'ERROR':
                contact = detail['contact']
                print(f"   ‚ùå {contact['company_name'][:50]}...")
                print(f"      –ü—Ä–∏—á–∏–Ω–∞: {detail['message']}")
        print()
    
    success_rate = ((results['updated'] + results['already_updated']) / results['total']) * 100
    print(f"üìà –ü–†–û–¶–ï–ù–¢ –£–°–ü–ï–•–ê: {success_rate:.1f}%")
    
    if success_rate >= 90:
        print("üèÜ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
    elif success_rate >= 70:
        print("üëç –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ù—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏!")
    
    await api_client.client.aclose()
    return results

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –ú–ê–°–°–û–í–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø VAT –ü–†–ï–§–ò–ö–°–û–í")
    print("="*70)
    print("üéØ –¶–µ–ª—å: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å PL –∫–æ –≤—Å–µ–º VAT –Ω–æ–º–µ—Ä–∞–º –ø–æ–ª—å—Å–∫–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
    print("üîß –ú–µ—Ç–æ–¥: –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π custom_fields API")
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ Zoho Books!")
    print()
    
    final_results = asyncio.run(mass_update_vat_prefixes())
    
    if final_results:
        print("\nüé¨ –ú–ê–°–°–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        success_rate = ((final_results['updated'] + final_results['already_updated']) / final_results['total']) * 100
        if success_rate >= 90:
            print("üéâ –ú–ò–°–°–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê! VAT –ø—Ä–µ—Ñ–∏–∫—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        else:
            print("‚ö†Ô∏è –ú–ò–°–°–ò–Ø –ß–ê–°–¢–ò–ß–ù–û –í–´–ü–û–õ–ù–ï–ù–ê! –ï—Å—Ç—å —á—Ç–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å!")
    else:
        print("\n‚ùå –ú–ê–°–°–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–ï–†–í–ê–ù–û!") 