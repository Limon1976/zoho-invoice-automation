#!/usr/bin/env python3
"""
–ú–ê–°–°–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï VAT –ü–†–ï–§–ò–ö–°–û–í
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ 100% —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ test_both_contact_types.py
"""

import asyncio
import json
import sys
from pathlib import Path

sys.path.append(str(Path('.').parent))
from src.infrastructure.zoho_api import ZohoAPIClient
from src.infrastructure.config import get_config

async def mass_update_vat():
    print("üöÄ –ú–ê–°–°–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï VAT –ü–†–ï–§–ò–ö–°–û–í")
    print("="*60)
    print("üìã –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ 100% —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ")
    print("‚úÖ –£–∂–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: 6 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
    print()
    
    confirm = input("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ? (y/N): ").lower()
    if confirm != 'y':
        print("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    print("\nüé¨ –ù–ê–ß–ò–ù–ê–ï–ú –ú–ê–°–°–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï...")
    print("="*60)
    
    # –¢–û–ß–ù–û –¢–û–¢ –ñ–ï API –ö–õ–ò–ï–ù–¢
    config = get_config()
    api_client = ZohoAPIClient(
        client_id=config.zoho.client_id,
        client_secret=config.zoho.client_secret,
        refresh_token=config.zoho.refresh_token or ''
    )
    
    org_id = "20082562863"
    
    # –í–°–ï –ö–û–ù–¢–ê–ö–¢–´ –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø
    all_contacts = [
        {'name': 'Carrefour Polska', 'contact_id': '281497000005007050'},
        {'name': 'CCM Construction', 'contact_id': '281497000005007187'},
        {'name': 'CHRONOS APARTAMENTY', 'contact_id': '281497000004571563'},
        {'name': 'ETERIA CONSULTING', 'contact_id': '281497000001825719'},
        {'name': 'EUROSTAR-TRANSPORT.EU', 'contact_id': '281497000005395276'},
        {'name': 'F.P.H.U. PROBOX', 'contact_id': '281497000004567718'},
        {'name': 'Faf Global', 'contact_id': '281497000005999849'},
        {'name': 'Flower Island', 'contact_id': '281497000005940057'},
        {'name': 'FN EUROPE', 'contact_id': '281497000006365071'},
        {'name': 'Globe Trade Centre', 'contact_id': '281497000006113586'},
        {'name': 'Google ADS', 'contact_id': '281497000005126385'},
        {'name': 'Grid Dynamics Poland', 'contact_id': '281497000005237353'},
        {'name': 'HOLO SP.', 'contact_id': '281497000005962003'},
        {'name': 'Indigo Mental Club', 'contact_id': '281497000005446183'},
        {'name': 'ISKRY', 'contact_id': '281497000006113397'}
    ]
    
    print(f"üìä –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é: {len(all_contacts)}")
    print()
    
    results = []
    
    for i, test_contact in enumerate(all_contacts, 1):
        print(f"üî¨ –ö–û–ù–¢–ê–ö–¢ {i}/{len(all_contacts)}: {test_contact['name']}")
        print("-" * 50)
        
        contact_id = test_contact['contact_id']
        
        try:
            # 1. –¢–û–ß–ù–û –¢–û–¢ –ñ–ï –ö–û–î - –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            print("üì• 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Zoho...")
            current_data = await api_client.get_contact_details(org_id, contact_id)
            
            if not current_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
                results.append({'contact': test_contact, 'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'})
                continue
            
            company_name = current_data.get('company_name', '')
            customer_type = current_data.get('customer_sub_type', '')
            current_vat = current_data.get('cf_tax_id', '')
            
            print(f"   üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company_name}")
            print(f"   üë§ –¢–∏–ø: {customer_type}")
            print(f"   üè∑Ô∏è –¢–µ–∫—É—â–∏–π VAT: '{current_vat}'")
            
            # 2. –¢–û–ß–ù–û –¢–û–¢ –ñ–ï –ö–û–î - –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            print("\nüîß 2. –ê–Ω–∞–ª–∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            
            if current_vat.startswith('PL'):
                print(f"   ‚úÖ VAT —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å: '{current_vat}'")
                print("   ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                results.append({
                    'contact': test_contact,
                    'success': True,
                    'action': 'ALREADY_UPDATED',
                    'vat': current_vat
                })
                print()
                continue
            
            if not current_vat:
                print("   ‚è≠Ô∏è –ù–µ—Ç VAT –Ω–æ–º–µ—Ä–∞")
                results.append({
                    'contact': test_contact,
                    'success': True,
                    'action': 'NO_VAT'
                })
                print()
                continue
            
            # 3. –¢–û–ß–ù–û –¢–û–¢ –ñ–ï –ö–û–î - –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥
            print("üì§ 3. –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ custom_fields...")
            new_vat = f"PL{current_vat}"
            
            # –¢–û–ß–ù–û –¢–û–¢ –ñ–ï –†–ê–ë–û–ß–ò–ô –ú–ï–¢–û–î
            update_data = {
                'custom_fields': [
                    {
                        'api_name': 'cf_tax_id',
                        'value': new_vat
                    }
                ]
            }
            
            print(f"   –ù–æ–≤—ã–π VAT: '{new_vat}'")
            print(f"   –ú–µ—Ç–æ–¥: custom_fields API")
            
            response = await api_client.update_contact(
                organization_id=org_id,
                contact_id=contact_id,
                contact_data=update_data
            )
            
            if not response:
                print("   ‚ùå API –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å")
                results.append({
                    'contact': test_contact,
                    'success': False,
                    'error': 'API –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å'
                })
                continue
            
            print("   ‚úÖ API –ø—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å")
            
            # 4. –¢–û–ß–ù–û –¢–û–¢ –ñ–ï –ö–û–î - –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print("üîç 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
            await asyncio.sleep(2)  # –¢–û–ß–ù–û –¢–ê –ñ–ï –ü–ê–£–ó–ê
            
            updated_data = await api_client.get_contact_details(org_id, contact_id)
            
            if not updated_data:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                results.append({
                    'contact': test_contact,
                    'success': False,
                    'error': '–ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
                })
                continue
            
            final_vat = updated_data.get('cf_tax_id', '')
            print(f"   üìä –§–∏–Ω–∞–ª—å–Ω—ã–π VAT: '{final_vat}'")
            
            # –¢–û–ß–ù–û –¢–û–¢ –ñ–ï –ö–û–î - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if final_vat == new_vat:
                print("   üéâ –£–°–ü–ï–•! VAT –æ–±–Ω–æ–≤–ª–µ–Ω —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º!")
                print(f"   ‚úÖ {current_vat} ‚Üí {final_vat}")
                
                results.append({
                    'contact': test_contact,
                    'success': True,
                    'action': 'UPDATED',
                    'old_vat': current_vat,
                    'new_vat': final_vat
                })
                
            elif final_vat == current_vat:
                print("   ‚ùå VAT –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                print(f"   üîí –ü–æ–ª–µ –∑–∞—â–∏—â–µ–Ω–æ –æ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                
                results.append({
                    'contact': test_contact,
                    'success': False,
                    'error': '–ü–æ–ª–µ –∑–∞—â–∏—â–µ–Ω–æ –æ—Ç API –∏–∑–º–µ–Ω–µ–Ω–∏–π',
                    'customer_type': customer_type
                })
                
            else:
                print(f"   ü§∑ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{final_vat}'")
                results.append({
                    'contact': test_contact,
                    'success': False,
                    'error': f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {final_vat}'
                })
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            results.append({
                'contact': test_contact,
                'success': False,
                'error': str(e)
            })
        
        print()
        if i < len(all_contacts):
            print("‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞...")
            await asyncio.sleep(1)
            print()
    
    # –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ú–ê–°–°–û–í–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
    print("="*60)
    
    updated_count = 0
    already_updated_count = 0
    error_count = 0
    
    print("‚úÖ –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–ù–´–ï:")
    for result in results:
        if result['success'] and result.get('action') == 'UPDATED':
            print(f"   üéâ {result['contact']['name']}: {result['old_vat']} ‚Üí {result['new_vat']}")
            updated_count += 1
    
    print("\n‚úÖ –£–ñ–ï –ë–´–õ–ò –û–ë–ù–û–í–õ–ï–ù–´:")
    for result in results:
        if result['success'] and result.get('action') == 'ALREADY_UPDATED':
            print(f"   ‚úÖ {result['contact']['name']}: {result['vat']}")
            already_updated_count += 1
    
    print("\n‚ùå –û–®–ò–ë–ö–ò:")
    for result in results:
        if not result['success']:
            print(f"   ‚ùå {result['contact']['name']}: {result['error']}")
            error_count += 1
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üéâ –ù–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {updated_count}")
    print(f"   ‚úÖ –£–∂–µ –≥–æ—Ç–æ–≤—ã—Ö: {already_updated_count}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print(f"   üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results)}")
    
    success_rate = ((updated_count + already_updated_count) / len(results)) * 100
    print(f"   üí™ –£—Å–ø–µ—Ö: {success_rate:.1f}%")
    
    if success_rate >= 90:
        print("\nüèÜ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢!")
    elif success_rate >= 70:
        print("\nüëç –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢!")
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
    
    await api_client.client.aclose()
    return results

if __name__ == "__main__":
    print("üöÄ –ú–ê–°–°–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï VAT –ü–†–ï–§–ò–ö–°–û–í")
    print("="*60)
    print("üìã –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ 100% —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ")
    print("‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ 6 –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö - –≤—Å–µ —É—Å–ø–µ—à–Ω–æ!")
    print()
    
    final_results = asyncio.run(mass_update_vat())
    
    if final_results:
        print("\nüé¨ –ú–ê–°–°–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("üéØ –ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    else:
        print("\n‚ùå –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–ï–†–í–ê–ù–û!") 