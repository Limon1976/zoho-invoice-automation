#!/usr/bin/env python3
"""
Telegram Bot Main
=================

–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
"""

import logging
import fcntl
import os
import sys
from pathlib import Path
from logging.handlers import RotatingFileHandler
from dotenv import load_dotenv

"""Main entrypoint with strict singleton, stable logging and webhook off."""

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from telegram.ext import Application

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ –∏–º–ø–æ—Ä—Ç–∞ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å basicConfig –∏–∑ –ø–æ–¥–º–æ–¥—É–ª–µ–π)
logs_dir = project_root / "logs"
logs_dir.mkdir(parents=True, exist_ok=True)

root_logger = logging.getLogger()
root_logger.setLevel(logging.INFO)
# –ß–∏—Å—Ç–∏–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ö–µ–Ω–¥–ª–µ—Ä—ã –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–∞—Ö –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
if root_logger.handlers:
    for h in list(root_logger.handlers):
        root_logger.removeHandler(h)

fmt = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fileh = RotatingFileHandler(str(logs_dir / 'telegram_bot.out'), maxBytes=2_000_000, backupCount=3, encoding='utf-8')
fileh.setFormatter(fmt)
root_logger.addHandler(fileh)

logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º print (stdout/stderr) –≤ –ª–æ–≥–≥–µ—Ä, —á—Ç–æ–±—ã –≤—Å—ë –ø–æ–ø–∞–¥–∞–ª–æ –≤ —Ñ–∞–π–ª
class _LoggerWriter:
    def __init__(self, logger: logging.Logger, level):
        self._logger = logger
        self._level = level
    def write(self, message: str):
        if not message:
            return
        for line in str(message).rstrip().splitlines():
            if line:
                self._level(line)
    def flush(self):
        pass

stdout_logger = logging.getLogger("stdout")
stderr_logger = logging.getLogger("stderr")
# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ root -> file)
stdout_logger.handlers = []
stderr_logger.handlers = []
stdout_logger.propagate = True
stderr_logger.propagate = True
sys.stdout = _LoggerWriter(stdout_logger, stdout_logger.info)
sys.stderr = _LoggerWriter(stderr_logger, stderr_logger.error)

# –°–∫—Ä—ã–≤–∞–µ–º HTTP –ª–æ–≥–∏ –æ—Ç httpx (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.ext.Application").setLevel(logging.WARNING)


def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ), —á—Ç–æ–±—ã PTB —Å–∞–º —É–ø—Ä–∞–≤–ª—è–ª event loop."""
    # –ì–∞—Ä–∞–Ω—Ç–∏—è –æ–¥–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: —Ñ–∞–π–ª–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    lock_path = project_root / "logs" / "bot_main.lock"
    pid_path = project_root / "logs" / "telegram_bot.pid"
    lock_file = open(lock_path, "w")
    try:
        fcntl.flock(lock_file.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
    except BlockingIOError:
        logger.error("‚ùå –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω (lock). –í—ã—Ö–æ–¥–∏–º.")
        print("‚ùå –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        return
    # –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ PID
    try:
        if pid_path.exists():
            existing = pid_path.read_text().strip()
            if existing.isdigit() and Path(f"/proc/{existing}").exists():
                logger.error("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω (pidfile)")
                return
    except Exception:
        pass

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
    application = (
        Application.builder()
        .token(bot_token)
        .get_updates_read_timeout(15)
        .get_updates_write_timeout(15)
        .get_updates_connect_timeout(15)
        .get_updates_pool_timeout(15)
        .build()
    )

    # –û—Ç–∫–ª—é—á–∞–µ–º webhook, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª —Å polling
    try:
        import requests
        requests.get(f"https://api.telegram.org/bot{bot_token}/setWebhook", params={"url": ""}, timeout=10)
    except Exception:
        pass

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
    from telegram_bot.handlers import setup_handlers
    setup_handlers(application)

    logger.info("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    try:
        pid_path.write_text(str(os.getpid()))
    except Exception:
        pass

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–±–ª–æ–∫–∏—Ä—É—é—â–µ)
    application.run_polling(
        drop_pending_updates=True,
        poll_interval=2.0,
        timeout=10,
    )

    # –ü—Ä–∏ —à—Ç–∞—Ç–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    try:
        fcntl.flock(lock_file.fileno(), fcntl.LOCK_UN)
        lock_file.close()
    except Exception:
        pass


if __name__ == "__main__":
    try:
        start_bot()
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
