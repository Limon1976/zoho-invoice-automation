"""
Branch Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Bills –∏ Expenses –≤ Zoho Books

–°–æ–∑–¥–∞–Ω–æ: 2025-09-07
–¶–µ–ª—å: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ñ–∏–ª–∏–∞–ª Iris flowers atelier (browary) –∏ Wile≈Ñska –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

from typing import Dict, List, Optional
import logging

logger = logging.getLogger(__name__)

class BranchManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞–º–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–ª–∏–∞–ª–æ–≤
    BRANCHES = {
        'HEAD_OFFICE': {
            'org_id': '20082562863',
            'name': 'PARKENTERTAINMENT Sp. z o. o.',
            'vat': 'PL5272956146',
            'branch_id': '281497000000355003',  # –†–µ–∞–ª—å–Ω—ã–π branch_id –∏–∑ Zoho
            'default_branch': True,
            'description': 'Head Office - –≥–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å'
        },
        'IRIS_FLOWERS': {
            'org_id': '20082562863',  # –¢–æ—Ç –∂–µ —á—Ç–æ –∏ Head Office
            'name': 'Iris flowers atelier',
            'parent_org': 'HEAD_OFFICE',
            'branch_id': '281497000000355063',  # –†–µ–∞–ª—å–Ω—ã–π branch_id –∏–∑ Zoho
            'keywords': ['flowers', '—Ü–≤–µ—Ç—ã', '–∫–æ—Ä–æ–±–∫–∏', '–ª–µ–Ω—Ç–æ—á–∫–∏', 'hibispol', 'browary', 'iris'],
            'description': '–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω'
        },
        'WILENSKA': {
            'org_id': '20082562863',  # –¢–æ—Ç –∂–µ —á—Ç–æ –∏ Head Office
            'name': 'Wile≈Ñska',
            'parent_org': 'HEAD_OFFICE',
            'branch_id': '281497000002901751',  # –†–µ–∞–ª—å–Ω—ã–π branch_id –∏–∑ Zoho
            'keywords': ['wile≈Ñska', 'wilenska', 'praga', '–≤—Ç–æ—Ä–æ–π –º–∞–≥–∞–∑–∏–Ω'],
            'description': '–í—Ç–æ—Ä–æ–π —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω (Praga)'
        },
        'TAVIE_EUROPE': {
            'org_id': '20092948714',
            'name': 'TaVie Europe O√ú',
            'vat': 'EE102288270',
            'description': '–≠—Å—Ç–æ–Ω—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'
        }
    }
    
    @classmethod
    def determine_branch(cls, analysis: Dict) -> Dict:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–∏–ª–∏–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Args:
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç LLM –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª–∏–∞–ª–µ
        """
        logger.info("üè¢ –ù–∞—á–∞–ª–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞")
        
        # 1. –ü–†–ò–û–†–ò–¢–ï–¢: –ü–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π ‚Üí Head Office
        if cls._is_car_purchase(analysis):
            branch = cls.BRANCHES['HEAD_OFFICE']
            logger.info(f"üöó –ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ‚Üí Head Office: {branch['name']}")
            return branch
        
        # 2. –¶–≤–µ—Ç–æ—á–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã ‚Üí –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ü–≤–µ—Ç–æ—á–Ω—ã–π —Ñ–∏–ª–∏–∞–ª
        if cls._is_flowers_document(analysis):
            flower_branch_key = cls._determine_flower_branch(analysis)
            branch = cls.BRANCHES[flower_branch_key]
            logger.info(f"üå∏ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ü–≤–µ—Ç–æ—á–Ω—ã–π —Ñ–∏–ª–∏–∞–ª: {branch['name']}")
            return branch
        
        # 2. –ü–æ VAT –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (buyer_vat)
        buyer_vat = analysis.get('buyer_vat', '').replace(' ', '').upper()
        if buyer_vat:
            for branch_key, branch in cls.BRANCHES.items():
                branch_vat = branch.get('vat', '').replace(' ', '').upper()
                if branch_vat and branch_vat in buyer_vat:
                    logger.info(f"üè¢ –§–∏–ª–∏–∞–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ VAT {buyer_vat}: {branch['name']}")
                    return branch
        
        # 3. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Head Office
        branch = cls.BRANCHES['HEAD_OFFICE']
        logger.info(f"üè¢ –§–∏–ª–∏–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {branch['name']}")
        return branch
    
    @classmethod
    def _determine_flower_branch(cls, analysis: Dict) -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ü–≤–µ—Ç–æ—á–Ω—ã–π —Ñ–∏–ª–∏–∞–ª
        
        Args:
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç LLM –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –ö–ª—é—á —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ –∏–ª–∏ None
        """
        text = (analysis.get('extracted_text') or '').lower()
        supplier_name = (analysis.get('supplier_name') or '').lower()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º HIBISPOL, –ø–æ—Ç–æ–º –æ–±—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
        hibispol_supplier = 'hibispol' in supplier_name
        
        if hibispol_supplier:
            # –î–ª—è HIBISPOL: —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —è–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã Wile≈Ñska
            wilenska_keywords = [
                'wile≈Ñska', 'wilenska', 'wile≈Ñ≈õka', 'wilenska', 
                'praga', 'warszawa praga', 'praga warszawa',
                'wile≈Ñska 21', 'wile≈Ñska 22', 'wile≈Ñska 23', 'wile≈Ñska 24', 'wile≈Ñska 25',
                'wile≈Ñ≈õka 21', 'wile≈Ñ≈õka 22', 'wile≈Ñ≈õka 23', 'wile≈Ñ≈õka 24', 'wile≈Ñ≈õka 25'
            ]
            
            found_wilenska = [kw for kw in wilenska_keywords if kw in text]
            if found_wilenska:
                logger.info(f"üå∏ HIBISPOL —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ Wile≈Ñska ‚Üí Wile≈Ñska (–Ω–∞–π–¥–µ–Ω—ã: {found_wilenska})")
                return 'WILENSKA'
            
            # HIBISPOL –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤ Wile≈Ñska ‚Üí Iris flowers atelier –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            logger.info(f"üå∏ HIBISPOL –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤ Wile≈Ñska ‚Üí Iris flowers atelier (–æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
            return 'IRIS_FLOWERS'
        
        # –î–ª—è –ù–ï-HIBISPOL –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: –æ–±—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã —Ñ–∏–ª–∏–∞–ª–æ–≤
        wilenska_keywords = ['wile≈Ñska', 'wilenska', 'wile≈Ñ≈õka', 'praga']
        found_wilenska = [kw for kw in wilenska_keywords if kw in text]
        if found_wilenska:
            logger.info(f"üå∏ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—Ç–æ—Ä–æ–π —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω: Wile≈Ñska (–Ω–∞–π–¥–µ–Ω—ã: {found_wilenska})")
            return 'WILENSKA'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ Iris flowers atelier
        iris_keywords = ['iris', 'browary', '–æ—Å–Ω–æ–≤–Ω–æ–π –º–∞–≥–∞–∑–∏–Ω']
        found_iris_keywords = [kw for kw in iris_keywords if kw in text]
        if found_iris_keywords:
            logger.info(f"üå∏ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω: Iris flowers atelier (–Ω–∞–π–¥–µ–Ω—ã: {found_iris_keywords})")
            return 'IRIS_FLOWERS'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞–≥–∞–∑–∏–Ω
        logger.info(f"üå∏ –¶–≤–µ—Ç–æ—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí Iris flowers atelier (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        return 'IRIS_FLOWERS'
    
    @classmethod
    def _is_flowers_document(cls, analysis: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ü–≤–µ—Ç–æ—á–Ω—ã–º –∏–ª–∏ –æ—Ç–Ω–æ—Å—è—â–∏–º—Å—è –∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
        
        Args:
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç LLM –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ü–≤–µ—Ç–æ—á–Ω–æ–º—É –±–∏–∑–Ω–µ—Å—É
        """
        text = (analysis.get('extracted_text') or '').lower()
        supplier_name = (analysis.get('supplier_name') or '').lower()
        
        # 1. LLM –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é FLOWERS
        llm_category = (analysis.get('product_category') or '').upper()
        detected_flowers = analysis.get('detected_flower_names', [])
        
        if llm_category == 'FLOWERS' and detected_flowers:
            logger.info(f"üå∏ LLM –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Ü–≤–µ—Ç—ã: category={llm_category}, flowers={len(detected_flowers)}")
            return True
        
        # 2. –ü–æ—Å—Ç–∞–≤—â–∏–∫ —Ü–≤–µ—Ç–æ–≤ (HIBISPOL)
        if 'hibispol' in supplier_name:
            logger.info(f"üå∏ –¶–≤–µ—Ç–æ—á–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_name}")
            return True
        
        # 3. DOTYPOSPL - –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
        if 'dotypospl' in supplier_name:
            logger.info(f"üå∏ DOTYPOSPL –ª–∏—Ü–µ–Ω–∑–∏–∏ ‚Üí Iris flowers atelier (–æ–±—â–∏–µ –¥–ª—è 2 —Ñ–∏–ª–∏–∞–ª–æ–≤)")
            return True
        
        # 4. –ú–∞—Ä–∫–µ—Ä—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
        service_markers = [
            'iris flowers - gw005',  # –í–æ–¥–∞ –¥–ª—è Iris flowers
            'iris flowers',          # –û–±—â–∏–π –º–∞—Ä–∫–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞
            'browary',              # –ê–¥—Ä–µ—Å Iris flowers atelier
            'wile≈Ñska',             # –ê–¥—Ä–µ—Å Wile≈Ñska
            'wilenska',
            'praga'                 # –†–∞–π–æ–Ω Wile≈Ñska
        ]
        
        found_service_markers = [marker for marker in service_markers if marker in text]
        if found_service_markers:
            logger.info(f"üå∏ –ù–∞–π–¥–µ–Ω—ã –º–∞—Ä–∫–µ—Ä—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: {found_service_markers}")
            return True
        
        # 5. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
        flower_keywords = ['–∫–æ—Ä–æ–±–∫–∏', '–ª–µ–Ω—Ç–æ—á–∫–∏', 'flowers', '—Ü–≤–µ—Ç—ã', '–±—É–∫–µ—Ç', '–∫–æ–º–ø–æ–∑–∏—Ü–∏—è', '–∞—Ä–µ–Ω–¥–∞ –º–∞–≥–∞–∑–∏–Ω']
        
        found_keywords = [kw for kw in flower_keywords if kw in text]
        if found_keywords:
            logger.info(f"üå∏ –ù–∞–π–¥–µ–Ω—ã —Ü–≤–µ—Ç–æ—á–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
            return True
        
        # 6. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –≤ line_items
        line_items = analysis.get('line_items', [])
        for item in line_items:
            item_desc = (item.get('description', '') + item.get('name', '')).lower()
            if any(kw in item_desc for kw in flower_keywords + service_markers):
                logger.info(f"üå∏ –¶–≤–µ—Ç–æ—á–Ω—ã–µ/—Å–µ—Ä–≤–∏—Å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –≤ –ø–æ–∑–∏—Ü–∏—è—Ö: {item_desc[:50]}...")
                return True
        
        # 7. –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ —É—Å–ª—É–≥ –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
        service_desc = (analysis.get('service_description') or '').lower()
        if any(marker in service_desc for marker in service_markers + flower_keywords):
            logger.info(f"üå∏ –¶–≤–µ—Ç–æ—á–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —É—Å–ª—É–≥: {service_desc[:50]}...")
            return True
        
        logger.info("üìã –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –æ—Ç–Ω–æ—Å—è—â–∏–π—Å—è –∫ —Ü–≤–µ—Ç–æ—á–Ω–æ–º—É –±–∏–∑–Ω–µ—Å—É")
        return False
    
    @classmethod
    def _is_car_purchase(cls, analysis: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        
        Args:
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç LLM –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            True –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        """
        # 1. VIN –Ω–æ–º–µ—Ä –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        vin = analysis.get('vin', '')
        if vin and len(vin) == 17:
            logger.info(f"üöó –ù–∞–π–¥–µ–Ω VIN –Ω–æ–º–µ—Ä: {vin}")
            return True
        
        # 2. LLM –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é CARS
        llm_category = (analysis.get('product_category') or '').upper()
        if llm_category == 'CARS':
            logger.info(f"üöó LLM –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∞–≤—Ç–æ–º–æ–±–∏–ª—å: category={llm_category}")
            return True
        
        # 3. –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –º–∞—Ä–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        text = (analysis.get('extracted_text') or '').lower()
        car_brands = ['bmw', 'mercedes', 'audi', 'volkswagen', 'porsche', 'toyota', 'honda', 'ford']
        
        found_brands = [brand for brand in car_brands if brand in text]
        if found_brands:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            car_keywords = ['vehicle', 'car', 'auto', 'fahrzeug', 'samoch√≥d', 'pojazd']
            if any(kw in text for kw in car_keywords):
                logger.info(f"üöó –ù–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã: brands={found_brands}, keywords={[kw for kw in car_keywords if kw in text]}")
                return True
        
        # 4. –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏
        supplier_name = (analysis.get('supplier_name') or '').lower()
        auto_suppliers = ['autohaus', 'auto', 'car', 'mobile.de', 'autoscout']
        
        if any(supplier in supplier_name for supplier in auto_suppliers):
            logger.info(f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_name}")
            return True
        
        return False
    
    @classmethod
    def get_branch_by_org_id(cls, org_id: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª–∏–∞–ª–µ –ø–æ org_id
        
        Args:
            org_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ Zoho
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª–∏–∞–ª–µ –∏–ª–∏ None
        """
        for branch in cls.BRANCHES.values():
            if branch['org_id'] == org_id:
                return branch
        return None
    
    @classmethod
    def get_all_branches(cls) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª—ã"""
        return cls.BRANCHES.copy()
    
    @classmethod
    def is_flowers_branch(cls, branch_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∏–ª–∏–∞–ª —Ü–≤–µ—Ç–æ—á–Ω—ã–º"""
        return branch_key == 'IRIS_FLOWERS'
    
    @classmethod
    def get_branch_key_by_name(cls, branch_name: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á —Ñ–∏–ª–∏–∞–ª–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        
        Args:
            branch_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
            
        Returns:
            –ö–ª—é—á —Ñ–∏–ª–∏–∞–ª–∞ –∏–ª–∏ None
        """
        for key, branch in cls.BRANCHES.items():
            if branch['name'] == branch_name:
                return key
        return None
    
    @classmethod
    def get_branch_display_info(cls, branch: Dict) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª–∏–∞–ª–µ
        
        Args:
            branch: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª–∏–∞–ª–µ
            
        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        name = branch.get('name', 'Unknown Branch')
        org_id = branch.get('org_id', 'Unknown')
        
        if branch.get('description'):
            return f"{name} (org_id: {org_id}) - {branch['description']}"
        else:
            return f"{name} (org_id: {org_id})"
