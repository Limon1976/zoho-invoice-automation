"""
ExpenseService - —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Expense
–í—ã–¥–µ–ª–µ–Ω –∏–∑ handlers.py –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ WorkDrive Processor –∏ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
"""

import logging
from typing import Dict, Optional, Tuple
from datetime import datetime
import requests

from telegram_bot.services.account_manager import AccountManager
from functions.zoho_api import get_access_token, find_tax_by_percent
from telegram_bot.services.attachment_manager import AttachmentManager

logger = logging.getLogger(__name__)


class ExpenseService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Expense –≤ Zoho Books"""
    
    @staticmethod
    def determine_payment_method(analysis: Dict) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Returns:
            'personal' –¥–ª—è –Ω–∞–ª–∏—á–Ω—ã—Ö (Petty Cash)
            'business' –¥–ª—è –∫–∞—Ä—Ç—ã (Konto Firmowe)
        """
        text = (analysis.get('extracted_text') or '').lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–Ω—ã–µ
        cash_indicators = [
            'got√≥wka', 'gotowka', 'cash', 
            'zap≈Çacono got√≥wka', 'zaplacono gotowka',
            'p≈Çatno≈õƒá got√≥wkƒÖ', 'platnosc gotowka'
        ]
        
        for indicator in cash_indicators:
            if indicator in text:
                logger.info("üí∞ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –Ω–∞–ª–∏—á–Ω—ã–µ (Petty Cash)")
                return 'personal'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É
        card_indicators = [
            'karta', 'card', 'zap≈Çacono karta', 'zaplacono karta',
            'p≈Çatno≈õƒá kartƒÖ', 'platnosc karta'
        ]
        
        for indicator in card_indicators:
            if indicator in text:
                logger.info("üí∞ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –∫–∞—Ä—Ç–∞ (Konto Firmowe)")
                return 'business'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–∞—Ä–∞–≥–æ–Ω–æ–≤ - –Ω–∞–ª–∏—á–Ω—ã–µ
        logger.info("üí∞ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —á–µ—Ç–∫–æ ‚Üí –Ω–∞–ª–∏—á–Ω—ã–µ (Petty Cash) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return 'personal'
    
    @staticmethod
    def create_expense_payload(
        analysis: Dict, 
        supplier: Dict, 
        org_id: str,
        org_name: str
    ) -> Tuple[Dict, Optional[str]]:
        """
        –°–æ–∑–¥–∞–µ—Ç payload –¥–ª—è Expense API
        
        Returns:
            Tuple[expense_payload, error_message]
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            payment_type = ExpenseService.determine_payment_method(analysis)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ Account Manager
            paid_through_account_id, _ = AccountManager.get_paid_through_account(org_id, org_name, payment_type)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ account (–≤–∫–ª—é—á–∞–µ–º line_items –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
            context_items = []
            line_items = analysis.get('line_items', [])
            for item in line_items:
                context_items.append(item.get('description', ''))
                context_items.append(item.get('description_en', ''))
            
            context_text = f"Supplier: {analysis.get('supplier_name')}, Items: {', '.join(context_items)}, Category: {analysis.get('product_category', 'OTHER')}"
            
            expense_account_id, expense_account_name = AccountManager.get_expense_account(
                org_id, 
                org_name,
                context_text,
                analysis.get('supplier_name', ''),
                analysis.get('product_category', 'OTHER')
            )
            
            if not paid_through_account_id:
                return {}, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å paid_through_account –¥–ª—è {payment_type}"
            
            if not expense_account_id:
                return {}, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å expense_account"
            
            logger.info(f"üí≥ Expense account: {expense_account_name} (ID: {expense_account_id})")
            logger.info(f"üí≥ Paid through: {payment_type} account (ID: {paid_through_account_id})")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º branch –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è PARKENTERTAINMENT)
            branch_id = None
            if org_id == '20082562863' and expense_account_name in ['Flowers', 'Boxes', 'Paper, ribons', 'Vases', 'Balloons', 'Expenses IRIS']:
                # –¶–≤–µ—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∏–¥—É—Ç –Ω–∞ branch "Iris flowers atelier"
                branch_id = '281497000000355063'  # Iris flowers atelier branch ID
                logger.info(f"üå∏ –¶–í–ï–¢–û–ß–ù–´–ô —Ä–∞—Å—Ö–æ–¥ ‚Üí branch: Iris flowers atelier (ID: {branch_id})")
            
            # –ù–∞–ª–æ–≥–∏
            tax_rate = float(analysis.get('tax_rate') or 0)
            vat_amount = float(analysis.get('vat_amount') or 0)
            tax_id = None
            if tax_rate > 0:
                tax_id = find_tax_by_percent(org_id, tax_rate)
                logger.info(f"üí∞ –ù–∞–ª–æ–≥: {tax_rate}% (ID: {tax_id}), —Å—É–º–º–∞ –Ω–∞–ª–æ–≥–∞: {vat_amount}")
            
            # –°—É–º–º–∞ –¥–ª—è –ø–∞—Ä–∞–≥–æ–Ω–æ–≤ (VAT —É–∂–µ –≤–∫–ª—é—á–µ–Ω –≤ gross_amount)
            amount = analysis.get('gross_amount') or analysis.get('total_amount', 0)
            logger.info(f"üí∞ –°—É–º–º—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞: gross={analysis.get('gross_amount')}, net={analysis.get('net_amount')}, vat={analysis.get('vat_amount')}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–µ notes (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)
            line_items = analysis.get('line_items', [])
            if line_items and len(line_items) > 1:
                # –ú–Ω–æ–≥–æ–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ - –æ–±–æ–±—â–∞–µ–º
                notes = f"{len(line_items)} items: {amount:.2f} {analysis.get('currency', 'PLN')}"
                if tax_rate > 0:
                    notes += f" (VAT {tax_rate}%)"
            elif line_items:
                # –û–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                item_desc = line_items[0].get('description', 'Item')[:30]
                notes = f"{item_desc}: {amount:.2f} {analysis.get('currency', 'PLN')}"
                if tax_rate > 0:
                    notes += f" (VAT {tax_rate}%)"
            else:
                # –§–æ–ª–±—ç–∫ –±–µ–∑ line_items
                notes = f"Receipt: {amount:.2f} {analysis.get('currency', 'PLN')}"
                if tax_rate > 0:
                    notes += f" (VAT {tax_rate}%)"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç 100 —Å–∏–º–≤–æ–ª–æ–≤
            if len(notes) > 100:
                notes = notes[:97] + "..."
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            if line_items and len(line_items) > 1:
                description = f"Receipt from {analysis.get('supplier_name')}. Doc #{analysis.get('bill_number')}. {len(line_items)} items purchased"
            elif line_items:
                description = f"Receipt from {analysis.get('supplier_name')}. Doc #{analysis.get('bill_number')}. {line_items[0].get('description', 'Item')[:50]}"
            else:
                description = f"Receipt from {analysis.get('supplier_name')}. Doc #{analysis.get('bill_number')}. Total {amount:.2f} {analysis.get('currency', 'PLN')}"
            
            expense_payload = {
                "account_id": expense_account_id,
                "paid_through_account_id": paid_through_account_id,
                "vendor_id": supplier.get('contact_id'),
                "vendor_name": analysis.get('supplier_name'),
                "date": analysis.get('issue_date') or analysis.get('date') or datetime.now().strftime('%Y-%m-%d'),
                "amount": float(amount),
                "currency_code": analysis.get('currency', 'PLN'),
                "reference_number": analysis.get('bill_number', ''),
                "description": description,
                "notes": notes,
                "is_inclusive_tax": True  # VAT –≤–∫–ª—é—á–µ–Ω –≤ —Å—É–º–º—É –¥–ª—è –ø–∞—Ä–∞–≥–æ–Ω–æ–≤
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º branch_id –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
            if branch_id:
                expense_payload["branch_id"] = branch_id
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ª–æ–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
            if tax_id and vat_amount > 0:
                expense_payload["tax_id"] = tax_id
                expense_payload["tax_amount"] = float(vat_amount)
            
            logger.info(f"üí≥ Expense payload: —Å—É–º–º–∞={amount} {analysis.get('currency', 'PLN')}, —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã={payment_type}")
            
            return expense_payload, None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è expense payload: {e}")
            return {}, str(e)
    
    @staticmethod
    def create_expense(org_id: str, expense_payload: Dict) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç Expense –≤ Zoho Books
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è
        """
        try:
            access_token = get_access_token()
            if not access_token:
                return {"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Zoho"}
                
            expense_url = f"https://www.zohoapis.eu/books/v3/expenses?organization_id={org_id}"
            headers = {
                "Authorization": f"Zoho-oauthtoken {access_token}",
                "Content-Type": "application/json"
            }
            
            response = requests.post(expense_url, headers=headers, json=expense_payload)
            response_data = response.json() if response.content else {}
            
            if response.status_code == 201 and response_data.get('expense'):
                return response_data
            else:
                return {"error": response_data}
                
        except Exception as e:
            return {"error": str(e)}
    
    @staticmethod
    async def create_expense_from_analysis(
        analysis: Dict, 
        supplier: Dict, 
        org_id: str,
        org_name: str,
        file_path: Optional[str] = None
    ) -> Dict:
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è Expense –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Args:
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            supplier: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ Zoho
            org_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            org_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è
        """
        try:
            # –°–æ–∑–¥–∞–µ–º payload
            expense_payload, error = ExpenseService.create_expense_payload(
                analysis, supplier, org_id, org_name
            )
            
            if error:
                return {"error": error}
            
            # –°–æ–∑–¥–∞–µ–º Expense
            result = ExpenseService.create_expense(org_id, expense_payload)
            
            if 'error' in result:
                return result
            
            expense_data = result.get('expense', {})
            expense_id = expense_data.get('expense_id')
            
            # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if file_path and expense_id:
                try:
                    import os
                    filename = os.path.basename(file_path)
                    
                    attachment_result = await AttachmentManager.attach_to_entity(
                        'expense', expense_id, org_id, file_path, get_access_token()
                    )
                    
                    if attachment_result.get('success'):
                        logger.info(f"üìé PDF —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ Expense {expense_id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è PDF –∫ Expense {expense_id}: {attachment_result.get('error')}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫ Expense: {e}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Expense: {e}")
            return {"error": str(e)}
