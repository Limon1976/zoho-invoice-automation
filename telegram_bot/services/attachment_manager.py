"""
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫ —Å—É—â–Ω–æ—Å—Ç—è–º Zoho Books.
–í—ã–¥–µ–ª–µ–Ω –∏–∑ handlers.py –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ BILL, Expense, Invoice –∏ –¥—Ä—É–≥–∏—Ö —Å—É—â–Ω–æ—Å—Ç—è—Ö.
"""

import os
import logging
import requests
from typing import Optional, Dict, Any
from functions.zoho_api import get_access_token

logger = logging.getLogger(__name__)


class AttachmentManager:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤ –∫ Zoho —Å—É—â–Ω–æ—Å—Ç—è–º"""
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π –Ω–∞ URL endpoints
    ENTITY_ENDPOINTS = {
        'bill': 'bills',
        'expense': 'expenses',
        'invoice': 'invoices',
        'salesorder': 'salesorders',
        'purchaseorder': 'purchaseorders',
        'creditnote': 'creditnotes',
        'contact': 'contacts',
        'item': 'items'
    }
    
    @staticmethod
    async def attach_to_entity(
        entity_type: str,
        entity_id: str,
        org_id: str,
        file_path: str,
        access_token: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫ –ª—é–±–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ Zoho.
        
        Args:
            entity_type: –¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ ('bill', 'expense', 'invoice' –∏ —Ç.–¥.)
            entity_id: ID —Å—É—â–Ω–æ—Å—Ç–∏ –≤ Zoho
            org_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
            access_token: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (–µ—Å–ª–∏ None, –ø–æ–ª—É—á–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º:
                - success: bool
                - message: str
                - response_data: dict (–ø—Ä–∏ —É—Å–ø–µ—Ö–µ)
                - error: str (–ø—Ä–∏ –æ—à–∏–±–∫–µ)
        """
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if entity_type not in AttachmentManager.ENTITY_ENDPOINTS:
            return {
                'success': False,
                'error': f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏: {entity_type}'
            }
            
        if not os.path.exists(file_path):
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è: {file_path}")
            return {
                'success': False,
                'error': f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}'
            }
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if not access_token:
            access_token = get_access_token()
            if not access_token:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞'
                }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL
        endpoint = AttachmentManager.ENTITY_ENDPOINTS[entity_type]
        attach_url = f"https://www.zohoapis.eu/books/v3/{endpoint}/{entity_id}/attachment?organization_id={org_id}"
        
        logger.info(f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª {os.path.basename(file_path)} –∫ {entity_type} {entity_id}")
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            with open(file_path, 'rb') as file_obj:
                files = {'attachment': (os.path.basename(file_path), file_obj)}
                headers = {'Authorization': f'Zoho-oauthtoken {access_token}'}
                
                response = requests.post(attach_url, headers=headers, files=files)
                response_data = response.json() if response.content else {}
                
                logger.info(f"üìé ATTACH response: status={response.status_code}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if response.status_code in [200, 201]:
                    # –£—Å–ø–µ—Ö - —Ä–∞–∑–Ω—ã–µ API –º–æ–≥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    if response_data.get('code') == 0 or response_data.get('message') == 'success':
                        logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ {entity_type} (—Å—Ç–∞—Ç—É—Å {response.status_code})")
                        return {
                            'success': True,
                            'message': f'–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ {entity_type}',
                            'response_data': response_data
                        }
                    else:
                        # –°—Ç–∞—Ç—É—Å OK, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ
                        error_msg = response_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {error_msg}")
                        return {
                            'success': False,
                            'error': error_msg,
                            'response_data': response_data
                        }
                        
                elif response.status_code == 401:
                    # –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ - –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                    logger.info("üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è—é...")
                    new_token = get_access_token()
                    if new_token and new_token != access_token:
                        # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                        return await AttachmentManager.attach_to_entity(
                            entity_type, entity_id, org_id, file_path, new_token
                        )
                    else:
                        return {
                            'success': False,
                            'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞'
                        }
                        
                else:
                    # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                    error_msg = response_data.get('message', f'HTTP {response.status_code}')
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {response.status_code} - {error_msg}")
                    return {
                        'success': False,
                        'error': f'–û—à–∏–±–∫–∞ {response.status_code}: {error_msg}',
                        'response_data': response_data
                    }
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return {
                'success': False,
                'error': f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}'
            }
    
    @staticmethod
    async def attach_multiple(
        entity_type: str,
        entity_id: str,
        org_id: str,
        file_paths: list[str],
        access_token: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∫ –æ–¥–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏.
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:
                - success: bool (True –µ—Å–ª–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã)
                - attached: list[str] (—É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
                - failed: list[dict] (—Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏)
        """
        attached = []
        failed = []
        
        for file_path in file_paths:
            result = await AttachmentManager.attach_to_entity(
                entity_type, entity_id, org_id, file_path, access_token
            )
            
            if result['success']:
                attached.append(file_path)
            else:
                failed.append({
                    'file': file_path,
                    'error': result.get('error', 'Unknown error')
                })
                
        return {
            'success': len(failed) == 0,
            'attached': attached,
            'failed': failed
        }
    
    @staticmethod
    def get_attachment_url(entity_type: str, entity_id: str, org_id: str) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
        
        Returns:
            URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π
        """
        if entity_type not in AttachmentManager.ENTITY_ENDPOINTS:
            raise ValueError(f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏: {entity_type}')
            
        endpoint = AttachmentManager.ENTITY_ENDPOINTS[entity_type]
        return f"https://www.zohoapis.eu/books/v3/{endpoint}/{entity_id}/attachments?organization_id={org_id}"
