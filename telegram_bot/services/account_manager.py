"""
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—á–µ—Ç–∞–º–∏ Zoho Books.
–í—ã–¥–µ–ª–µ–Ω –∏–∑ handlers.py –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ BILL –∏ Expense creation.
"""

import logging
from typing import Optional, List, Dict, Tuple
from functions.export_zoho_accounts import get_accounts_cached_or_fetch
from functions.llm_document_extractor import llm_select_account

logger = logging.getLogger(__name__)


class AccountManager:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–æ —Å—á–µ—Ç–∞–º–∏ Zoho"""
    
    @staticmethod
    def get_expense_account(
        org_id: str, 
        org_name: str,
        context_text: str = "",
        supplier_name: str = "",
        category: str = ""
    ) -> Tuple[Optional[str], Optional[str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å expense account –∏—Å–ø–æ–ª—å–∑—É—è LLM –∏ fallback –ª–æ–≥–∏–∫—É.
        
        Returns:
            Tuple[account_id, account_name] –∏–ª–∏ (None, None) –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—á–µ—Ç–∞
            accounts = get_accounts_cached_or_fetch(org_id, org_name)
            if not accounts:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—á–µ—Ç–∞ –¥–ª—è {org_name}")
                return None, None
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –¶–≤–µ—Ç–æ—á–Ω—ã–µ accounts –¥–ª—è PARKENTERTAINMENT
            expense_account_id = None
            expense_account_name = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–æ—á–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è PARKENTERTAINMENT
            if org_id == '20082562863' and org_name == 'PARKENTERTAINMENT':
                flower_account = AccountManager._detect_flower_expense_account(
                    context_text, supplier_name, category, accounts
                )
                if flower_account:
                    expense_account_id, expense_account_name = flower_account
                    logger.info(f"üå∏ –¶–í–ï–¢–û–ß–ù–´–ô account –≤—ã–±—Ä–∞–Ω: {expense_account_name} (ID: {expense_account_id})")
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 2: LLM –µ—Å–ª–∏ —Ü–≤–µ—Ç–æ—á–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω
            if not expense_account_id:
                acc_names = [a.get('account_name') for a in accounts if a.get('account_name')]
                
                try:
                    llm_pick = llm_select_account(acc_names, context_text, supplier_name, category)
                    if llm_pick and llm_pick.get('name') in acc_names:
                        for acc in accounts:
                            if acc.get('account_name') == llm_pick['name']:
                                expense_account_id = acc.get('account_id')
                                expense_account_name = acc.get('account_name')
                                logger.info(f"üìä LLM –≤—ã–±—Ä–∞–ª expense account: {expense_account_name} (ID: {expense_account_id})")
                                break
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è LLM –≤—ã–±–æ—Ä account –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            
            # Fallback –∫ –ø–µ—Ä–≤–æ–º—É expense account
            if not expense_account_id:
                for acc in accounts:
                    acc_type = (acc.get('account_type') or '').lower()
                    if acc_type == 'expense':
                        expense_account_id = acc.get('account_id')
                        expense_account_name = acc.get('account_name')
                        logger.info(f"üìä Fallback expense account: {expense_account_name} (ID: {expense_account_id})")
                        break
            
            return expense_account_id, expense_account_name
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_expense_account: {e}")
            return None, None
    
    @staticmethod
    def get_paid_through_account(
        org_id: str,
        org_name: str, 
        payment_type: str = "business"
    ) -> Tuple[Optional[str], Optional[str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã (–±–∞–Ω–∫, –∫–∞—Å—Å–∞, –∫–∞—Ä—Ç–∞).
        
        Args:
            payment_type: "business" –∏–ª–∏ "personal"
            
        Returns:
            Tuple[account_id, account_name] –∏–ª–∏ (None, None) –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—á–µ—Ç–∞
            accounts = get_accounts_cached_or_fetch(org_id, org_name)
            if not accounts:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—á–µ—Ç–∞ –¥–ª—è {org_name}")
                return None, None
            
            paid_through_account_id = None
            paid_through_account_name = None
            
            # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –ò —Ç–∏–ø—É —Å—á–µ—Ç–∞
            for acc in accounts:
                acc_name = (acc.get('account_name') or '').lower()
                acc_type = (acc.get('account_type') or '').lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø —Å—á–µ—Ç–∞ –¥–ª—è paid_through (bank, cash, credit_card)
                if acc_type not in ['bank', 'cash', 'credit_card']:
                    continue
                
                if payment_type == "business":
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø–æ–ª—å—Å–∫–æ–≥–æ –±–∏–∑–Ω–µ—Å-—Å—á–µ—Ç–∞
                    if 'konto firmowe' in acc_name:
                        paid_through_account_id = acc.get('account_id')
                        paid_through_account_name = acc.get('account_name')
                        logger.info(f"üí≥ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å—Å–∫–∏–π –±–∏–∑–Ω–µ—Å —Å—á–µ—Ç: {paid_through_account_name} (ID: {paid_through_account_id}, type: {acc_type})")
                        break
                    # Fallback –∫ –¥—Ä—É–≥–∏–º –±–∏–∑–Ω–µ—Å —Å—á–µ—Ç–∞–º
                    elif any(keyword in acc_name for keyword in ['wise', 'business', 'company', 'checking', 'pko']):
                        paid_through_account_id = acc.get('account_id')
                        paid_through_account_name = acc.get('account_name')
                        logger.info(f"üí≥ –ù–∞–π–¥–µ–Ω –±–∏–∑–Ω–µ—Å —Å—á–µ—Ç: {paid_through_account_name} (ID: {paid_through_account_id}, type: {acc_type})")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫, –º–æ–∂–µ—Ç –Ω–∞–π–¥–µ–º Konto Firmowe
                else:  # personal
                    # –ò—â–µ–º –ª–∏—á–Ω—ã–µ —Å—á–µ—Ç–∞
                    if any(keyword in acc_name for keyword in ['petty cash', 'cash', 'personal', 'owner']):
                        paid_through_account_id = acc.get('account_id')
                        paid_through_account_name = acc.get('account_name')
                        logger.info(f"üí∞ –ù–∞–π–¥–µ–Ω –ª–∏—á–Ω—ã–π —Å—á–µ—Ç: {paid_through_account_name} (ID: {paid_through_account_id}, type: {acc_type})")
                        break
            
            # Fallback –∫ –ø–µ—Ä–≤–æ–º—É –±–∞–Ω–∫–æ–≤—Å–∫–æ–º—É —Å—á–µ—Ç—É
            if not paid_through_account_id:
                for acc in accounts:
                    acc_type = (acc.get('account_type') or '').lower()
                    if acc_type in ['bank', 'cash', 'credit_card']:
                        paid_through_account_id = acc.get('account_id')
                        paid_through_account_name = acc.get('account_name')
                        logger.info(f"üí≥ Fallback —Å—á–µ—Ç: {paid_through_account_name} (ID: {paid_through_account_id})")
                        break
            
            return paid_through_account_id, paid_through_account_name
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_paid_through_account: {e}")
            return None, None
    
    @staticmethod
    def _detect_flower_expense_account(
        context_text: str, 
        supplier_name: str, 
        category: str, 
        accounts: List[Dict]
    ) -> Optional[Tuple[str, str]]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç–æ—á–Ω—ã–π expense account –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        
        Returns:
            Tuple[account_id, account_name] –∏–ª–∏ None
        """
        
        # –í—Å–µ —Ç–µ–∫—Å—Ç—ã –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
        text_lower = (context_text or '').lower()
        supplier_lower = (supplier_name or '').lower()
        category_lower = (category or '').lower()
        
        # –¶–≤–µ—Ç–æ—á–Ω—ã–µ keywords –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ accounts
        flower_mapping = {
            'flowers': ['—Ü–≤–µ—Ç—ã', 'flowers', 'flower', 'kwiat', 'kwiaty', 'r√≥≈ºa', 'roza', 'tulip', 'bukiet'],
            'boxes': ['–∫–æ—Ä–æ–±–∫–∏', '–∫–æ—Ä–æ–±–∫–∞', 'pude≈Çko', 'pude≈Çka', 'box', 'boxes', 'opakowanie', 'packaging'],
            'paper, ribons': ['–ª–µ–Ω—Ç–æ—á–∫–∏', '–ª–µ–Ω—Ç–æ—á–∫–∞', '–ª–µ–Ω—Ç–∞', 'ribbon', 'ribons', 'wstƒÖ≈ºka', 'wstƒÖ≈ºki', 'paper', 'papier'],
            'vases': ['–≤–∞–∑–∞', '–≤–∞–∑—ã', 'vase', 'vases', 'wazon', 'wazony'],
            'balloons': ['—à–∞—Ä–∏–∫–∏', '—à–∞—Ä–∏–∫', 'balloon', 'balloons', 'balon', 'balony']
        }
        
        # –ü–æ–∏—Å–∫ –ø–æ keywords
        for account_name, keywords in flower_mapping.items():
            for keyword in keywords:
                if (keyword in text_lower or 
                    keyword in supplier_lower):
                    
                    # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π account –≤ —Å–ø–∏—Å–∫–µ
                    for acc in accounts:
                        acc_name = (acc.get('account_name') or '').lower()
                        if account_name.lower() in acc_name:
                            logger.info(f"üå∏ –ù–∞–π–¥–µ–Ω —Ü–≤–µ—Ç–æ—á–Ω—ã–π account –ø–æ keyword '{keyword}': {acc.get('account_name')}")
                            return acc.get('account_id'), acc.get('account_name')
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        flower_suppliers = ['hibispol', 'ro≈æany', 'rozany']
        for supplier_keyword in flower_suppliers:
            if supplier_keyword in supplier_lower:
                # –î–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π "Flowers" account
                for acc in accounts:
                    acc_name = (acc.get('account_name') or '').lower()
                    if 'flowers' in acc_name and 'expenses' not in acc_name:  # –ò–∑–±–µ–≥–∞–µ–º "Expenses IRIS"
                        logger.info(f"üå∏ –ù–∞–π–¥–µ–Ω —Ü–≤–µ—Ç–æ—á–Ω—ã–π account –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ '{supplier_name}': {acc.get('account_name')}")
                        return acc.get('account_id'), acc.get('account_name')
        
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è FLOWERS
        if 'flower' in category_lower:
            for acc in accounts:
                acc_name = (acc.get('account_name') or '').lower()
                if 'flowers' in acc_name and 'expenses' not in acc_name:
                    logger.info(f"üå∏ –ù–∞–π–¥–µ–Ω —Ü–≤–µ—Ç–æ—á–Ω—ã–π account –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {acc.get('account_name')}")
                    return acc.get('account_id'), acc.get('account_name')
        
        return None
    
    @staticmethod
    def get_accounts_for_selection(
        org_id: str, 
        org_name: str,
        account_types: List[str] = None
    ) -> List[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        
        Args:
            account_types: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º —Å—á–µ—Ç–æ–≤ ['expense', 'cost of goods sold']
            
        Returns:
            List[{account_id, account_name, account_type}]
        """
        try:
            accounts = get_accounts_cached_or_fetch(org_id, org_name)
            if not accounts:
                return []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
            if account_types:
                filtered = []
                for acc in accounts:
                    acc_type = (acc.get('account_type') or '').lower()
                    if acc_type in [t.lower() for t in account_types]:
                        filtered.append({
                            'account_id': acc.get('account_id'),
                            'account_name': acc.get('account_name'),
                            'account_type': acc.get('account_type')
                        })
                return filtered
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å—á–µ—Ç–∞
            return [{
                'account_id': acc.get('account_id'),
                'account_name': acc.get('account_name'), 
                'account_type': acc.get('account_type')
            } for acc in accounts]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_accounts_for_selection: {e}")
            return []
