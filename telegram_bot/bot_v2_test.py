"""
–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã handlers_v2
–†–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
"""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from telegram import Update
from telegram.ext import Application, MessageHandler, CallbackQueryHandler, CommandHandler, filters

from telegram_bot.handlers_v2.documents.document_handler import DocumentHandlerV2
from telegram_bot.handlers_v2.callbacks.callback_router import CallbackRouterV2
from telegram_bot.utils_v2.feature_flags import FEATURES, enable_feature

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('logs/bot_v2_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


async def start_command(update: Update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    await update.message.reply_text(
        "ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç v2 –∑–∞–ø—É—â–µ–Ω!\n\n"
        "‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ üìÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PDF –∏ JPEG\n"
        "‚Ä¢ üí≥ ExpenseService –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è\n"
        "‚Ä¢ üå∏ –¶–≤–µ—Ç–æ—á–Ω—ã–µ accounts\n"
        "‚Ä¢ üè¢ Branch –ª–æ–≥–∏–∫–∞\n\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"
    )


async def status_command(update: Update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å feature flags"""
    enabled_features = [f for f, enabled in FEATURES.items() if enabled]
    disabled_features = [f for f, enabled in FEATURES.items() if not enabled]
    
    message = "üéõÔ∏è –°–¢–ê–¢–£–° FEATURE FLAGS:\n\n"
    
    if enabled_features:
        message += "‚úÖ –í–ö–õ–Æ–ß–ï–ù–û:\n"
        for feature in enabled_features:
            message += f"  ‚Ä¢ {feature}\n"
        message += "\n"
    
    if disabled_features:
        message += "‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–û:\n"
        for feature in disabled_features:
            message += f"  ‚Ä¢ {feature}\n"
    
    await update.message.reply_text(message)


def setup_v2_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤—ã—Ö handlers v2"""
    
    # –í–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    enable_feature('use_new_document_handler')
    enable_feature('use_new_callback_router')
    enable_feature('use_jpeg_processing')
    
    # –°–æ–∑–¥–∞–µ–º handlers
    doc_handler = DocumentHandlerV2()
    callback_router = CallbackRouterV2()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("status", status_command))
    
    # –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    application.add_handler(MessageHandler(
        filters.Document.PDF | filters.PHOTO, 
        doc_handler.handle_document
    ))
    
    # Callbacks
    application.add_handler(CallbackQueryHandler(callback_router.route_callback))
    
    logger.info("‚úÖ Handlers v2 –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")


def main():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π)
    token = os.getenv('TELEGRAM_BOT_TOKEN_TEST') or os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º handlers v2
    setup_v2_handlers(application)
    
    logger.info("üöÄ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç v2 –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        application.run_polling(drop_pending_updates=True)
    except KeyboardInterrupt:
        logger.info("üõë –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞: {e}")


if __name__ == '__main__':
    main()
