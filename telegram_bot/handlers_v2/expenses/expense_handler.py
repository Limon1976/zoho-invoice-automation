"""
–ù–æ–≤—ã–π Expense Handler v2 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ExpenseService
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from telegram_bot.handlers_v2.base import BaseHandler, SafetyMixin, ValidationMixin
from functions.zoho_contact_search import find_supplier_in_zoho

logger = logging.getLogger(__name__)


class ExpenseHandlerV2(BaseHandler, SafetyMixin, ValidationMixin):
    """–ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è Expense"""
    
    async def create_expense(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–°–æ–∑–¥–∞–µ—Ç Expense –∏—Å–ø–æ–ª—å–∑—É—è ExpenseService"""
        
        if not update.callback_query:
            return
            
        query = update.callback_query
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if not await self.validate_context(context):
                await query.edit_message_text("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            analysis = context.user_data.get('document_analysis_v2', {})
            if not self.validate_analysis(analysis):
                await query.edit_message_text("‚ùå –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
                return
            
            await query.edit_message_text("üí∏ –°–æ–∑–¥–∞—é Expense —á–µ—Ä–µ–∑ ExpenseService...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
            org_id, org_name = self._determine_organization(analysis)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            supplier_name = analysis.get('supplier_name', 'Unknown Vendor')
            supplier_vat = analysis.get('supplier_vat', '')
            
            supplier_contact = find_supplier_in_zoho(org_id, supplier_name, supplier_vat)
            
            if not supplier_contact or not supplier_contact.get('contact_id'):
                # –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
                await self._offer_create_supplier(query, analysis)
                return
            
            # –°–æ–∑–¥–∞–µ–º Expense —á–µ—Ä–µ–∑ ExpenseService
            supplier = {'contact_id': supplier_contact.get('contact_id')}
            file_path = context.user_data.get('processed_file_path') or context.user_data.get('file_path')
            
            result = await self.expense_service.create_expense_from_analysis(
                analysis=analysis,
                supplier=supplier,
                org_id=org_id,
                org_name=org_name,
                file_path=file_path
            )
            
            if 'error' in result:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Expense: {result['error']}")
                return
            
            # Expense —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
            expense_data = result.get('expense', {})
            expense_id = expense_data.get('expense_id')
            expense_number = expense_data.get('expense_number')
            total = expense_data.get('total', 0)
            currency = analysis.get('currency', 'PLN')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            zoho_url = f"https://books.zoho.eu/app/{org_id}#/expenses/{expense_id}"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –≤ Zoho", url=zoho_url)],
                [InlineKeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ WorkDrive", callback_data="v2_upload_workdrive")]
            ])
            
            await query.edit_message_text(
                f"‚úÖ Expense #{expense_number} —Å–æ–∑–¥–∞–Ω! (v2)\n\n"
                f"üí∞ –°—É–º–º–∞: {total:.2f} {currency}\n"
                f"üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_name}\n"
                f"üìÑ –ù–æ–º–µ—Ä: {analysis.get('bill_number', 'N/A')}",
                reply_markup=keyboard
            )
            
            logger.info(f"‚úÖ Expense —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ v2 handler: {expense_id}")
            
        except Exception as e:
            await self.handle_error(update, e, "—Å–æ–∑–¥–∞–Ω–∏—è Expense")
    
    def _determine_organization(self, analysis: dict) -> tuple[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è Expense"""
        our_company = analysis.get('our_company', '')
        
        if 'parkentertainment' in our_company.lower():
            return '20082562863', 'PARKENTERTAINMENT'
        elif 'tavie' in our_company.lower():
            return '20092948714', 'TaVie Europe O√ú'
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é PARKENTERTAINMENT
            return '20082562863', 'PARKENTERTAINMENT'
    
    async def _offer_create_supplier(self, query, analysis: dict):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"""
        supplier_name = analysis.get('supplier_name', 'Unknown')
        supplier_vat = analysis.get('supplier_vat', '')
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", callback_data="v2_create_contact")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="v2_cancel")]
        ])
        
        await query.edit_message_text(
            f"‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
            f"üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_name}\n"
            f"üè∑Ô∏è VAT: {supplier_vat or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"–°–æ–∑–¥–∞–π—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º Expense.",
            reply_markup=keyboard
        )
