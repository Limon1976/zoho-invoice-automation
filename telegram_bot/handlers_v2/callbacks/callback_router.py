"""
–ù–æ–≤—ã–π Callback Router v2 —Å —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import logging
import os
from datetime import datetime
from typing import Optional
from telegram import Update
from telegram.ext import ContextTypes

from telegram_bot.handlers_v2.base import BaseHandler
from telegram_bot.utils_v2.feature_flags import is_enabled

logger = logging.getLogger(__name__)


class CallbackRouterV2(BaseHandler):
    """–ù–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        super().__init__()
        
        # –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö handlers
        self.v2_routes = {
            'v2_create_expense': self._handle_create_expense,
            'v2_create_bill': self._handle_create_bill,
            'v2_create_contact': self._handle_create_contact,
            'v2_upload_workdrive': self._handle_upload_workdrive,
            'v2_cancel': self._handle_cancel
        }
    
    async def route_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        if not update.callback_query:
            return
        
        query = update.callback_query
        action = query.data
        
        logger.info(f"üîò Callback v2 received: {action}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ v2 callback
        if action.startswith('v2_'):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            if not self.should_use_new_handler('callback'):
                await query.answer("‚ö†Ô∏è –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            handler = self.v2_routes.get(action)
            if handler:
                await handler(update, context)
            else:
                await query.edit_message_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ v2: {action}")
        else:
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Ä–æ—É—Ç–µ—Ä—É
            logger.info(f"üîÑ Fallback –∫ —Å—Ç–∞—Ä–æ–º—É callback handler: {action}")
            await query.answer("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ —Å—Ç–∞—Ä–æ–≥–æ callback handler
    
    async def _handle_create_expense(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Expense"""
        try:
            from telegram_bot.handlers_v2.expenses.expense_handler import ExpenseHandlerV2
            
            expense_handler = ExpenseHandlerV2()
            await expense_handler.create_expense(update, context)
            
        except Exception as e:
            await self.handle_error(update, e, "—Å–æ–∑–¥–∞–Ω–∏—è Expense")
    
    async def _handle_create_bill(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bill"""
        try:
            # TODO: –°–æ–∑–¥–∞—Ç—å BillHandlerV2
            await update.callback_query.edit_message_text(
                "üìã Bill Handler v2 –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
                "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É"
            )
            
        except Exception as e:
            await self.handle_error(update, e, "—Å–æ–∑–¥–∞–Ω–∏—è Bill")
    
    async def _handle_create_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            # TODO: –°–æ–∑–¥–∞—Ç—å ContactHandlerV2
            await update.callback_query.edit_message_text(
                "üë§ Contact Handler v2 –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
                "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É"
            )
            
        except Exception as e:
            await self.handle_error(update, e, "—Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞")
    
    async def _handle_upload_workdrive(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ WorkDrive"""
        try:
            query = update.callback_query
            await query.edit_message_text("üìÅ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –≤ WorkDrive...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            analysis = context.user_data.get('document_analysis_v2') or context.user_data.get('document_analysis', {})
            file_path = context.user_data.get('processed_file_path') or context.user_data.get('file_path')
            
            if not file_path or not os.path.exists(file_path):
                await query.edit_message_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ WorkDrive")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ WorkDrive
            from functions.zoho_workdrive import ZohoWorkDriveAPI
            
            workdrive = ZohoWorkDriveAPI()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–∏
            sale_date = analysis.get('sale_date') or analysis.get('issue_date') or analysis.get('document_date')
            supplier_name = analysis.get('supplier_name', 'Unknown')
            document_type = analysis.get('document_type', 'document')
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞: –§–∏—Ä–º–∞_–¶–µ–Ω–∞–ë—Ä—É—Ç—Ç–æ
            gross_amount = analysis.get('total_amount', '0')
            # –£–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            if isinstance(gross_amount, str):
                gross_amount = gross_amount.replace('PLN', '').replace('‚Ç¨', '').replace('$', '').strip()
            # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            gross_amount = str(gross_amount).replace(',', '.')
            file_extension = os.path.splitext(file_path)[1]
            new_filename = f"{supplier_name.replace(' ', '_')}_{gross_amount}{file_extension}"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É –ø–æ –¥–∞—Ç–µ –ø—Ä–æ–¥–∞–∂–∏
            upload_result = workdrive.auto_upload_document(
                org_name="PARKENTERTAINMENT",
                document_date=sale_date,
                file_path=file_path,
                filename=new_filename,
                analysis=analysis
            )
            
            if upload_result.get('success'):
                file_id = upload_result.get('file_id')
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ Final
                mark_result = workdrive.mark_file_as_final(file_id)
                
                if mark_result:
                    folder_path = upload_result.get('folder_path', 'Unknown')
                    document_year = upload_result.get('document_year', 'Unknown')
                    await query.edit_message_text(
                        f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ WorkDrive!\n"
                        f"üìÅ –ü–∞–ø–∫–∞: {folder_path}\n"
                        f"üìÖ –ì–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_year}\n"
                        f"üìÑ –§–∞–π–ª: {new_filename}\n"
                        f"üè∑Ô∏è –°—Ç–∞—Ç—É—Å: Final (–æ–±—Ä–∞–±–æ—Ç–∞–Ω)\n"
                        f"üÜî File ID: {file_id}"
                    )
                else:
                    folder_path = upload_result.get('folder_path', 'Unknown')
                    await query.edit_message_text(
                        f"‚ö†Ô∏è –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ Final\n"
                        f"üìÅ –ü–∞–ø–∫–∞: {folder_path}\n"
                        f"üìÑ –§–∞–π–ª: {new_filename}\n"
                        f"üÜî File ID: {file_id}"
                    )
            else:
                error_msg = upload_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ WorkDrive: {error_msg}")
            
        except Exception as e:
            await self.handle_error(update, e, "–∑–∞–≥—Ä—É–∑–∫–∏ –≤ WorkDrive")
    
    async def _handle_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
        await update.callback_query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        logger.info("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
