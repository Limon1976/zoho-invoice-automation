"""
–ù–æ–≤—ã–π Document Handler v2 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JPEG –∏ —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import logging
import tempfile
import os
from pathlib import Path
from typing import Optional
from telegram import Update
from telegram.ext import ContextTypes

from telegram_bot.handlers_v2.base import BaseHandler, SafetyMixin, ValidationMixin
from telegram_bot.utils_v2.feature_flags import is_enabled
from functions.agent_invoice_parser import analyze_proforma_via_agent

logger = logging.getLogger(__name__)


class DocumentHandlerV2(BaseHandler, SafetyMixin, ValidationMixin):
    """–ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PDF –∏ JPEG"""
    
    def __init__(self):
        super().__init__()
        self.supported_formats = {
            'pdf': self._process_pdf,
            'jpeg': self._process_image,
            'jpg': self._process_image,
            'png': self._process_image,
            'tiff': self._process_image
        }
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º feature flag
        if not self.should_use_new_handler('document'):
            await self.fallback_to_old_handler(update, context, 'document_handler')
            return
        
        try:
            # Backup –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            await self.backup_context(context, 'document_processing')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_info = await self._get_file_info(update)
            if not file_info:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")
                return
            
            file_type = file_info['type']
            file_path = file_info['path']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–æ—Ä–º–∞—Ç–∞
            if file_type not in self.supported_formats:
                await update.message.reply_text(
                    f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_type}\n"
                    f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: {', '.join(self.supported_formats.keys())}"
                )
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...")
            
            processor = self.supported_formats[file_type]
            result = await processor(file_path)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not result or not self.validate_analysis(result.get('document_analysis', {})):
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['document_analysis_v2'] = result.get('document_analysis')
            context.user_data['smart_result_v2'] = result
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            message = self._format_analysis_message(result.get('document_analysis', {}))
            keyboard = self._build_action_keyboard(result.get('document_analysis', {}))
            
            await update.message.reply_text(message, reply_markup=keyboard)
            
            logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ handlers_v2: {file_info['name']}")
            
        except Exception as e:
            await self.handle_error(update, e, "–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    
    async def _get_file_info(self, update: Update) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ update"""
        try:
            if update.message.document:
                # PDF —Ñ–∞–π–ª
                file = update.message.document
                file_name = file.file_name or 'document.pdf'
                file_type = Path(file_name).suffix.lower().lstrip('.')
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(suffix=f'.{file_type}', delete=False) as temp_file:
                    await file.download_to_drive(temp_file.name)
                    
                return {
                    'name': file_name,
                    'type': file_type,
                    'path': temp_file.name,
                    'size': file.file_size
                }
            
            elif update.message.photo:
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                file_name = f"photo_{photo.file_id}.jpg"
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                    await photo.download_to_drive(temp_file.name)
                    
                return {
                    'name': file_name,
                    'type': 'jpeg',
                    'path': temp_file.name,
                    'size': photo.file_size
                }
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return None
    
    async def _process_pdf(self, file_path: str) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞"""
        logger.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF: {file_path}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
        result = analyze_proforma_via_agent(file_path)
        
        return result
    
    async def _process_image(self, image_path: str) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ PDF"""
        logger.info(f"üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF (–∏—Å–ø–æ–ª—å–∑—É—è –≥–æ—Ç–æ–≤—É—é –ª–æ–≥–∏–∫—É –∏–∑ handlers)
        pdf_path = await self._convert_image_to_pdf(image_path)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ PDF
        result = await self._process_pdf(pdf_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ PDF –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        result['processed_file_path'] = pdf_path
        
        return result
    
    async def _convert_image_to_pdf(self, image_path: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PDF (–≥–æ—Ç–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ handlers)"""
        try:
            from PIL import Image
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(image_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # –°–æ–∑–¥–∞–µ–º PDF
            pdf_path = image_path.replace('.jpg', '.pdf').replace('.jpeg', '.pdf').replace('.png', '.pdf')
            image.save(pdf_path, "PDF", resolution=100.0)
            
            logger.info(f"üìÑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ PDF: {pdf_path}")
            return pdf_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            raise
    
    def _format_analysis_message(self, analysis: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        if not analysis:
            return "‚ùå –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è"
        
        message = "üìÑ –ê–ù–ê–õ–ò–ó –î–û–ö–£–ú–ï–ù–¢–ê (v2)\n\n"
        
        # –ü–æ—Å—Ç–∞–≤—â–∏–∫
        supplier_name = analysis.get('supplier_name', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
        supplier_vat = analysis.get('supplier_vat', '–ù–µ —É–∫–∞–∑–∞–Ω')
        message += f"üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_name}\n"
        message += f"üè∑Ô∏è VAT: {supplier_vat}\n"
        
        # –°—É–º–º–∞
        total_amount = analysis.get('total_amount', 0)
        currency = analysis.get('currency', 'PLN')
        message += f"üí∞ –°—É–º–º–∞: {total_amount} {currency}\n"
        
        # –î–∞—Ç–∞
        document_date = analysis.get('document_date', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')
        message += f"üìÖ –î–∞—Ç–∞: {document_date}\n"
        
        # –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document_type = analysis.get('document_type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
        message += f"üìã –¢–∏–ø: {document_type}\n"
        
        # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
        our_company = analysis.get('our_company', {})
        if our_company:
            message += f"üè¢ –ù–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {our_company.get('name', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}\n"
        
        message += "\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        return message
    
    def _build_action_keyboard(self, analysis: dict):
        """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        document_type = (analysis.get('document_type', '') or '').lower()
        
        if document_type == 'receipt':
            # –î–ª—è —á–µ–∫–æ–≤ - —Å–æ–∑–¥–∞–Ω–∏–µ Expense
            keyboard.append([
                InlineKeyboardButton("üí≥ –°–æ–∑–¥–∞—Ç—å Expense", callback_data="v2_create_expense")
            ])
        else:
            # –î–ª—è –∏–Ω–≤–æ–π—Å–æ–≤ - —Å–æ–∑–¥–∞–Ω–∏–µ Bill
            keyboard.append([
                InlineKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å Bill", callback_data="v2_create_bill")
            ])
        
        # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard.append([
            InlineKeyboardButton("üë§ –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="v2_create_contact")
        ])
        
        keyboard.append([
            InlineKeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ WorkDrive", callback_data="v2_upload_workdrive")
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    async def cleanup_temp_files(self, *file_paths):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        for file_path in file_paths:
            try:
                if file_path and os.path.exists(file_path):
                    os.unlink(file_path)
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")
