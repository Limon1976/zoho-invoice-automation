"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –Ω–æ–≤—ã—Ö handlers —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import logging
from typing import Optional
from telegram import Update
from telegram.ext import ContextTypes

from telegram_bot.services.expense_service import ExpenseService
from telegram_bot.services.account_manager import AccountManager
from telegram_bot.services.attachment_manager import AttachmentManager
from telegram_bot.services.branch_manager import BranchManager
from telegram_bot.utils_v2.feature_flags import is_enabled

logger = logging.getLogger(__name__)


class BaseHandler:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö handlers"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        self.expense_service = ExpenseService()
        self.account_manager = AccountManager()
        self.attachment_manager = AttachmentManager()
        self.branch_manager = BranchManager()
    
    async def handle_error(self, update: Update, error: Exception, context_info: str = ""):
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        try:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ {context_info}: {str(error)}"
            logger.error(f"Handler error in {context_info}: {error}", exc_info=True)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(error_msg)
            elif update.message:
                await update.message.reply_text(error_msg)
                
        except Exception as e:
            logger.error(f"Failed to send error message: {e}")
    
    def should_use_new_handler(self, handler_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π handler"""
        feature_map = {
            'document': 'use_new_document_handler',
            'expense': 'use_new_expense_handler',
            'bill': 'use_new_bill_handler',
            'contact': 'use_new_contact_handler',
            'callback': 'use_new_callback_router'
        }
        
        feature = feature_map.get(handler_type)
        if feature:
            return is_enabled(feature)
        
        return False
    
    async def fallback_to_old_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE, handler_name: str):
        """Fallback –∫ —Å—Ç–∞—Ä–æ–º—É handler –µ—Å–ª–∏ –Ω–æ–≤—ã–π –Ω–µ –≤–∫–ª—é—á–µ–Ω"""
        logger.info(f"üîÑ Fallback –∫ —Å—Ç–∞—Ä–æ–º—É handler: {handler_name}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ —Å—Ç–∞—Ä—ã—Ö handlers –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        await update.message.reply_text(f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è {handler_name} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


class SafetyMixin:
    """Mixin –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    async def validate_context(self, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–µ–Ω"""
        try:
            if not context or not context.user_data:
                return False
            return True
        except Exception:
            return False
    
    async def backup_context(self, context: ContextTypes.DEFAULT_TYPE, operation: str):
        """–°–æ–∑–¥–∞–µ—Ç backup –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π"""
        try:
            if context and context.user_data:
                backup_key = f"backup_{operation}_{hash(str(context.user_data))}"
                # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Redis
                logger.info(f"üìã Backup –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation}")
        except Exception as e:
            logger.warning(f"Failed to backup context: {e}")


class ValidationMixin:
    """Mixin –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def validate_analysis(self, analysis: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–∞–ª–∏–¥–µ–Ω"""
        required_fields = ['supplier_name', 'total_amount', 'currency']
        
        for field in required_fields:
            if not analysis.get(field):
                logger.warning(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return False
        
        return True
    
    def validate_supplier(self, supplier: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤–∞–ª–∏–¥–Ω—ã"""
        if not supplier or not supplier.get('contact_id'):
            logger.warning("‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç contact_id")
            return False
        
        return True
