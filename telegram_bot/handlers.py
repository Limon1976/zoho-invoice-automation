import tempfile
import os
from typing import Dict, Any, Optional
from pathlib import Path
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
import re
from telegram.ext import ContextTypes, Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler

# Import new utilities for bug fixes
from telegram_bot.utils.callback_deduplicator import callback_deduplicator
from telegram_bot.utils.file_validator import validate_and_download, FileSizeError, FileTypeError

# from telegram_bot.handlers_new.expense_handler import handle_smart_create_expense, handle_expense_payment_method

from functions.smart_document_processor import SmartDocumentProcessor
from functions.llm_document_extractor import llm_analyze_contract_risks, llm_translate_to_ru  # LLM risks summary + RU translate
from functions.flower_line_extractor import extract_flower_lines_from_ocr, parse_invoice_items
from functions.complete_flower_extractor import extract_all_flower_positions, format_for_telegram_bot
from functions.pdf_direct_parser import extract_flower_positions_from_pdf, format_for_telegram_bot as format_pdf_result, is_suitable_for_pdf_parsing
from functions.contact_creator import create_supplier_from_document
from functions.agent_invoice_parser import analyze_proforma_via_agent
from functions.zoho_items_manager import ZohoItemsManager, CarItemData
from functions.phone_parser import parse_phone_number, format_phone_for_zoho
from functions.export_zoho_accounts import get_accounts_cached_or_fetch
from functions.zoho_api import (
    get_access_token,
    find_branch_id,
    find_warehouse_id,
    find_tax_by_percent,
    bill_exists_smart,
    get_contact_by_name,
    find_supplier_in_zoho,
)

import logging
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º thread-safe –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
# last_document_analysis - —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ context.user_data
# _recent_callbacks - –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ callback_deduplicator


def get_supplier_info(analysis: dict) -> tuple[str, str]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
    
    Args:
        analysis: –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å buyer/seller –ø–æ–ª—è–º–∏
    
    Returns:
        tuple: (supplier_name, supplier_vat)
    """
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: seller_* –ø–æ–ª—è –∏–∑ LLM, –∑–∞—Ç–µ–º —Å—Ç–∞—Ä—ã–µ supplier_* –ø–æ–ª—è 
    supplier_name = (
        analysis.get('seller_name') or 
        analysis.get('supplier_name') or 
        analysis.get('issuer_name') or 
        ''
    ).strip()
    
    supplier_vat = (
        analysis.get('seller_vat') or 
        analysis.get('supplier_vat') or 
        analysis.get('issuer_vat') or 
        ''
    ).strip()
    
    logger.info(f"üè™ SUPPLIER: '{supplier_name}' VAT='{supplier_vat}'")
    return supplier_name, supplier_vat


def determine_buyer_organization(analysis: dict) -> tuple[str, str]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    
    Args:
        analysis: –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å buyer_vat, buyer_name, seller_vat, seller_name
    
    Returns:
        tuple: (org_id, org_name)
        
    Raises:
        ValueError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—à—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    """
    buyer_vat = (analysis.get('buyer_vat') or '').strip()
    buyer_name = (analysis.get('buyer_name') or '').strip().lower()
    seller_vat = (analysis.get('seller_vat') or '').strip()
    seller_name = (analysis.get('seller_name') or '').strip().lower()
    
    # –ù–∞—à–∏ VAT –Ω–æ–º–µ—Ä–∞
    OUR_VATS = {
        'PL5272956146': ('20082562863', 'PARKENTERTAINMENT'),
        'EE102288270': ('20092948714', 'TaVie Europe O√ú')
    }
    
    # 1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ buyer_vat
    if buyer_vat in OUR_VATS:
        org_id, org_name = OUR_VATS[buyer_vat]
        logger.info(f"üè¢ BUYER ORG: {org_name} (buyer_vat={buyer_vat})")
        return org_id, org_name
    
    # 2. –ü–æ–∏—Å–∫ –ø–æ buyer_name
    if 'parkentertainment' in buyer_name:
        org_id, org_name = '20082562863', 'PARKENTERTAINMENT'
        logger.info(f"üè¢ BUYER ORG: {org_name} (buyer_name='{buyer_name}')")
        return org_id, org_name
    elif 'tavie' in buyer_name or 'estonia' in buyer_name:
        org_id, org_name = '20092948714', 'TaVie Europe O√ú'
        logger.info(f"üè¢ BUYER ORG: {org_name} (buyer_name='{buyer_name}')")
        return org_id, org_name
    
    # 3. Fallback: —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ our_company (–≤—Ä–µ–º–µ–Ω–Ω–æ)
    our_company = (analysis.get('our_company') or '').strip().lower()
    if 'parkentertainment' in our_company:
        org_id, org_name = '20082562863', 'PARKENTERTAINMENT'
        logger.info(f"üè¢ BUYER ORG: {org_name} (fallback our_company='{our_company}')")
        return org_id, org_name
    elif 'tavie' in our_company or 'estonia' in our_company:
        org_id, org_name = '20092948714', 'TaVie Europe O√ú'
        logger.info(f"üè¢ BUYER ORG: {org_name} (fallback our_company='{our_company}')")
        return org_id, org_name
    
    # 4. –û—à–∏–±–∫–∞: –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    logger.error(f"‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –û–ü–†–ï–î–ï–õ–ò–¢–¨ –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Æ –ü–û–ö–£–ü–ê–¢–ï–õ–Ø:")
    logger.error(f"   buyer_vat='{buyer_vat}', buyer_name='{buyer_name}'")
    logger.error(f"   seller_vat='{seller_vat}', seller_name='{seller_name}'")
    logger.error(f"   our_company='{our_company}'")
    
    raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—à—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è. buyer_vat='{buyer_vat}', buyer_name='{buyer_name}'")


async def smart_supplier_check(supplier_name: str, supplier_vat: Optional[str] = None,
                               our_company: Optional[str] = None, analysis: Optional[Dict] = None) -> Dict[str, Any]:
    """
    –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:
    1. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (our_company)
    2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤ –∫—ç—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    3. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤ –æ–±—â–µ–º –∫—ç—à–µ
    4. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from src.domain.services.contact_cache import OptimizedContactCache
        from src.domain.services.vat_validator import VATValidatorService

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        organization_id = None
        organization_name = None
        cache_file = None

        if our_company or analysis:
            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            if analysis:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π analysis - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                temp_analysis = analysis
            else:
                # Fallback: —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π analysis –∏–∑ our_company
                temp_analysis = {
                    'our_company': our_company or '',
                    'buyer_name': '',  
                    'buyer_vat': '',   
                    'seller_name': supplier_name or '',
                    'seller_vat': supplier_vat or ''
                }
            
            try:
                organization_id, organization_name = determine_buyer_organization(temp_analysis)
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º cache_file –ø–æ organization_id
                if organization_id == "20082562863":  # PARKENTERTAINMENT
                    cache_file = "data/optimized_cache/PARKENTERTAINMENT_optimized.json"
                elif organization_id == "20092948714":  # TaVie Europe
                    cache_file = "data/optimized_cache/TaVie_Europe_optimized.json"
            except ValueError as e:
                logger.error(f"‚ùå smart_supplier_check: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {e}")
                # Fallback –∫ TaVie Europe
                organization_id = "20092948714"
                organization_name = "TaVie Europe O√ú"
                cache_file = "data/optimized_cache/TaVie_Europe_optimized.json"

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º VAT –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–¥–æ–±–∞–≤–ª—è–µ–º ISO-–ø—Ä–µ—Ñ–∏–∫—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –°–¢–†–ê–ù–´ –ü–û–°–¢–ê–í–©–ò–ö–ê –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞)
        normalized_doc_vat = None
        if supplier_vat:
            vvs_norm = VATValidatorService()
            expected_country = None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            supplier_country = ''
            if analysis:
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: supplier_country, –∑–∞—Ç–µ–º –∏–∑ –∞–¥—Ä–µ—Å–∞, –∑–∞—Ç–µ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                supplier_country = (
                    analysis.get('supplier_country') or 
                    (analysis.get('supplier_address') or {}).get('country') or
                    analysis.get('supplier_country', '')
                )
            
            supplier_country_l = supplier_country.strip().lower()
            country_to_iso = {
                'poland': 'PL', 'polska': 'PL', 'estonia': 'EE', 'eesti': 'EE', 'germany': 'DE',
                'deutschland': 'DE', 'latvia': 'LV', 'lithuania': 'LT', 'netherlands': 'NL',
                'ireland': 'IE', 'france': 'FR', 'spain': 'ES', 'italy': 'IT', 'portugal': 'PT',
                'sweden': 'SE', 'denmark': 'DK', 'united kingdom': 'GB', 'uk': 'GB'
            }
            expected_country = country_to_iso.get(supplier_country_l)
            validation_norm = vvs_norm.validate_vat(supplier_vat, expected_country=expected_country)
            if validation_norm.is_valid:
                normalized_doc_vat = vvs_norm.add_country_prefix(
                    validation_norm.vat_number.value,
                    expected_country or validation_norm.country_code
                ).replace(' ', '')
            else:
                digits_only = ''.join(ch for ch in str(supplier_vat) if ch.isdigit())
                if digits_only and expected_country:
                    normalized_doc_vat = f"{expected_country}{digits_only}"
                else:
                    normalized_doc_vat = supplier_vat
            try:
                logger.info(f"VAT compare prep: supplier_country='{supplier_country}' raw='{supplier_vat}' normalized='{normalized_doc_vat}'")
            except Exception:
                pass

        # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –∫—ç—à–µ–º, –∞ –∫ Zoho –æ–±—Ä–∞—â–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ –Ω–∞—à–ª–∏

        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫—ç—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        if cache_file and organization_name:
            try:
                org_cache = OptimizedContactCache(cache_file)
                
                # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ VAT, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                found_in_org = []
                if supplier_vat or normalized_doc_vat:
                    search_vat = (normalized_doc_vat or supplier_vat or '').strip()
                    found = org_cache.search_by_vat(search_vat)
                    if not found and supplier_vat:
                        found = org_cache.search_by_vat(supplier_vat)
                    found_in_org = [found] if found else []
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ VAT - –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
                if not found_in_org:
                    found_in_org = org_cache.search_by_company(supplier_name)
                    
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ VAT
                    if found_in_org and (supplier_vat or normalized_doc_vat):
                        cached_contact = found_in_org[0].to_dict()
                        cached_vat = (cached_contact.get('vat_number') or '').strip()
                        doc_vat_for_compare = (normalized_doc_vat or supplier_vat or '').strip()
                        try:
                            logger.info(f"VAT compare (org cache): cached='{cached_vat}' doc='{doc_vat_for_compare}'")
                        except Exception:
                            pass
                        # –î–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                        cached_digits = ''.join(ch for ch in cached_vat if ch.isdigit())
                        doc_digits = ''.join(ch for ch in doc_vat_for_compare if ch.isdigit())
                        if cached_digits and doc_digits and cached_digits == doc_digits:
                            return {
                                'status': 'found_in_cache',
                                'contact': cached_contact,
                                'organization_id': organization_id,
                                'organization_name': organization_name,
                                'message': f'‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ "{supplier_name}" –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ {organization_name}',
                                'recommended_action': 'update_existing',
                                'button_text': 'üìù –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ',
                                'button_action': 'update_existing_contact'
                            }
                        # –ï—Å–ª–∏ –≤ –∫—ç—à–µ VAT –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ Zoho
                        try:
                            if organization_id:
                                direct = find_supplier_in_zoho(organization_id, supplier_name, None)
                                zoho_vat = (direct.get('vat_number') or '').strip() if direct else ''
                                zoho_digits = ''.join(ch for ch in zoho_vat if ch.isdigit())
                                if zoho_vat == doc_vat_for_compare or (zoho_digits and doc_digits and zoho_digits == doc_digits):
                                    return {
                                        'status': 'found_in_cache',
                                        'contact': cached_contact or direct,
                                        'organization_id': organization_id,
                                        'organization_name': organization_name,
                                        'message': f'‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ "{supplier_name}" –Ω–∞–π–¥–µ–Ω (VAT —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å Zoho)',
                                        'recommended_action': 'update_existing',
                                        'button_text': 'üìù –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ',
                                        'button_action': 'update_existing_contact'
                                    }
                        except Exception as e:
                            logger.warning(f"Zoho verify VAT compare failed: {e}")
                        
                        # –ï—Å–ª–∏ VAT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ, –Ω–æ –µ—Å—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        if not cached_vat or cached_vat != doc_vat_for_compare:
                            return {
                                'status': 'found_with_vat_mismatch',
                                'contact': cached_contact,
                                'organization_id': organization_id,
                                'organization_name': organization_name,
                                'message': f'‚ö†Ô∏è –ü–æ—Å—Ç–∞–≤—â–∏–∫ "{supplier_name}" –Ω–∞–π–¥–µ–Ω, –Ω–æ VAT –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è (–∫—ç—à: {cached_vat or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}, –¥–æ–∫—É–º–µ–Ω—Ç: {doc_vat_for_compare or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"})',
                                'recommended_action': 'update_vat',
                                'button_text': 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å VAT –≤ Zoho',
                                'button_action': 'update_supplier_vat'
                            }

                if found_in_org:
                    # –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (VAT —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ)
                    cached_contact = found_in_org[0].to_dict()
                    return {
                        'status': 'found_in_cache',
                        'contact': cached_contact,
                        'organization_id': organization_id,
                        'organization_name': organization_name,
                        'message': f'‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ "{supplier_name}" –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ {organization_name}',
                        'recommended_action': 'update_existing',
                        'button_text': 'üìù –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ',
                        'button_action': 'update_existing_contact'
                    }
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∫—ç—à–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization_name}: {e}")

        # –ù–ï –ù–ê–ô–î–ï–ù –≤ –∫—ç—à–µ —Ü–µ–ª–µ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        return {
            'status': 'not_found',
            'contact': None,
            'organization_id': organization_id,
            'organization_name': organization_name,
            'message': f'üÜï –ü–æ—Å—Ç–∞–≤—â–∏–∫ "{supplier_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ',
            'recommended_action': 'create_new',
            'button_text': '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ',
            'button_action': 'create_new_contact'
        }

    except Exception as e:
        return {
            'status': 'error',
            'contact': None,
            'organization_id': None,
            'organization_name': None,
            'message': f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(e)}',
            'recommended_action': 'error',
            'button_text': '‚ùå –û—à–∏–±–∫–∞',
            'button_action': 'error'
        }


class SupplierContactCreator:
    """–°–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ Zoho"""

    def __init__(self):
        self.zoho_api = None

    def check_existing_supplier(self, supplier_name: str, vat_number: Optional[str] = None) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –∫—ç—à–µ"""
        # Placeholder –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        return None

    def create_supplier_contact(self, supplier_data: Dict[str, Any]) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ Zoho"""
        # Placeholder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        return True


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not update.message:
        return

    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Invoice Bot!

–Ø —É–º–µ—é:
üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PDF —Å—á–µ—Ç–∞ –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
üè¢ –ò–∑–≤–ª–µ–∫–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
üöó –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
üí∞ –û–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å—É–º–º—ã –∏ –≤–∞–ª—é—Ç—ã
üéØ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª!
"""
    await update.message.reply_text(welcome_text)


async def handle_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
    if context.user_data and context.user_data.get('waiting_for_selling_price'):
        await handle_selling_price(update, context)
        return

    if not update.message:
        return

    if not update.message.document:
        await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    document = update.message.document

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if not document.file_name:
        await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –∏–º–µ–µ—Ç –∏–º–µ–Ω–∏")
        return

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    from telegram_bot.utils import is_pdf_file, is_image_file
    if not (is_pdf_file(document.file_name) or is_image_file(document.file_name)):
        await update.message.reply_text(
            "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, TIFF)"
        )
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    file_type = "PDF —Ñ–∞–π–ª" if is_pdf_file(document.file_name) else "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    await update.message.reply_text(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {file_type} —Å —É–º–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º...")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞
        file = await context.bot.get_file(document.file_id)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        try:
            # –ü–µ—Ä–µ–¥–∞–µ–º document –∏ context –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            temp_path = await validate_and_download(document, context)
        except FileSizeError as e:
            await update.message.reply_text(f"‚ùå {str(e)}")
            return
        except FileTypeError as e:
            await update.message.reply_text(f"‚ùå {str(e)}")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        processor = SmartDocumentProcessor()
        result = await processor.process_document(temp_path)

        if result.success:

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            document_analysis = result.document_analysis
            
            # –ò–°–ü–†–ê–í–õ–Ø–ï–ú –û–®–ò–ë–ö–ò LLM: –ø—Ä–æ–≤–µ—Ä—è–µ–º OCR —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é
            extracted_text = document_analysis.get('extracted_text', '')
            
            # –ò—â–µ–º "Bill To" –≤ OCR —Ç–µ–∫—Å—Ç–µ
            import re
            bill_to_match = re.search(r'Bill\s+To[:\s]*\n?([^\n]+(?:\n[^\n]+)*?)(?:\n\s*(?:TAX\s+ID|VAT|Phone|Email|Address)|$)', extracted_text, re.IGNORECASE | re.MULTILINE)
            
            if bill_to_match:
                # –ò–∑ OCR –∏–∑–≤–ª–µ—á–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π Bill To
                real_bill_to = bill_to_match.group(1).strip()
                logger.info(f"üîç –†–ï–ê–õ–¨–ù–´–ô Bill To –∏–∑ OCR: '{real_bill_to}'")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ Bill To —Å–æ–¥–µ—Ä–∂–∏—Ç Milestone Technology Limited
                if 'milestone technology limited' in real_bill_to.lower():
                    # LLM –ü–ï–†–ï–ü–£–¢–ê–õ! –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–ª–∏
                    logger.info(f"‚ùå LLM –ü–ï–†–ï–ü–£–¢–ê–õ –†–û–õ–ò! –ò—Å–ø—Ä–∞–≤–ª—è–µ–º:")
                    logger.info(f"  LLM –¥—É–º–∞–µ—Ç: buyer='{document_analysis.get('buyer_name')}', supplier='{document_analysis.get('supplier_name')}'")
                    logger.info(f"  –†–µ–∞–ª—å–Ω–æ: Bill To='Milestone Technology Limited' ‚Üí –Ω–µ –Ω–∞—à–∞ —Ñ–∏—Ä–º–∞!")
                    
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–ª–∏: —Ä–µ–∞–ª—å–Ω—ã–π Bill To = Milestone Technology Limited
                    supplier_name = document_analysis.get('buyer_name', '').strip()  # LLM –ø–µ—Ä–µ–ø—É—Ç–∞–ª
                    supplier_vat = document_analysis.get('buyer_vat', '').strip()
                    buyer_name = 'Milestone Technology Limited'  # –†–µ–∞–ª—å–Ω—ã–π Bill To –∏–∑ OCR
                    buyer_vat = 'HG'  # –ò–∑ –ª–æ–≥–æ–≤
                    
                    logger.info(f"  –ò–°–ü–†–ê–í–õ–ï–ù–û: supplier='{supplier_name}', buyer='{buyer_name}'")
                else:
                    # LLM –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Ä–æ–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    supplier_name = (
                        document_analysis.get('seller_name') or 
                        document_analysis.get('supplier_name') or 
                        document_analysis.get('issuer_name') or 
                        ''
                    ).strip()
                    
                    supplier_vat = (
                        document_analysis.get('seller_vat') or 
                        document_analysis.get('supplier_vat') or 
                        document_analysis.get('issuer_vat') or 
                        ''
                    ).strip()
                    
                    buyer_name = document_analysis.get('buyer_name', '').strip()
                    buyer_vat = document_analysis.get('buyer_vat', '').strip()
            else:
                # –ù–µ –Ω–∞—à–ª–∏ Bill To –≤ OCR - –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM –∫–∞–∫ –µ—Å—Ç—å
                supplier_name = (
                    document_analysis.get('seller_name') or 
                    document_analysis.get('supplier_name') or 
                    document_analysis.get('issuer_name') or 
                    ''
                ).strip()
                
                supplier_vat = (
                    document_analysis.get('seller_vat') or 
                    document_analysis.get('supplier_vat') or 
                    document_analysis.get('issuer_vat') or 
                    ''
                ).strip()
                
                buyer_name = document_analysis.get('buyer_name', '').strip()
                buyer_vat = document_analysis.get('buyer_vat', '').strip()
            
            our_company = document_analysis.get('our_company', '')
            document_type = document_analysis.get('document_type', 'Unknown')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.info(f"üîç SUPPLIER DETECTION: supplier='{supplier_name}' (VAT: {supplier_vat}), buyer='{buyer_name}' (VAT: {buyer_vat})")

            # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —Ä–æ–ª—è–º
            try:
                org_id, org_name = determine_buyer_organization(document_analysis)
                logger.info(f"üè¢ BUYER ORG: {org_name} (buyer_vat={buyer_vat})")
                
                # –õ–û–ì–ò–ö–ê: Bill To = –∫–æ–º—É –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å—á–µ—Ç
                # –ï—Å–ª–∏ Bill To = –Ω–∞—à–∞ —Ñ–∏—Ä–º–∞ ‚Üí –≤—Ö–æ–¥—è—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∞–º –ø—Ä–æ–¥–∞—é—Ç) ‚Üí –û–ë–†–ê–ë–ê–¢–´–í–ê–¢–¨
                # –ï—Å–ª–∏ Bill From = –Ω–∞—à–∞ —Ñ–∏—Ä–º–∞ ‚Üí –∏—Å—Ö–æ–¥—è—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (–º—ã –ø—Ä–æ–¥–∞–µ–º) ‚Üí –ù–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–¢–¨
                
                # –õ–û–ì–ò–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê: Bill To = –∫–æ–º—É –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å—á–µ—Ç
                # –ï—Å–ª–∏ Bill To = –Ω–∞—à–∞ —Ñ–∏—Ä–º–∞ ‚Üí –≤—Ö–æ–¥—è—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∞–º –ø—Ä–æ–¥–∞—é—Ç)
                # –ï—Å–ª–∏ Bill To ‚â† –Ω–∞—à–∞ —Ñ–∏—Ä–º–∞ ‚Üí –¥–æ–∫—É–º–µ–Ω—Ç –ù–ï –¥–ª—è –Ω–∞—Å
                
                # –ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: Bill To = Milestone Technology Limited ‚â† –Ω–∞—à–∞ —Ñ–∏—Ä–º–∞!
                # –ó–Ω–∞—á–∏—Ç: —Å—á–µ—Ç –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ù–ï –Ω–∞–º ‚Üí –¥–æ–∫—É–º–µ–Ω—Ç –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º!
                
                logger.info(f"üîç –ê–ù–ê–õ–ò–ó –†–û–õ–ï–ô:")
                logger.info(f"  ‚Ä¢ Bill To (buyer_name): '{buyer_name}' (VAT: {buyer_vat})")
                logger.info(f"  ‚Ä¢ Supplier (supplier_name): '{supplier_name}' (VAT: {supplier_vat})")
                logger.info(f"  ‚Ä¢ –ù–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: '{org_name}'")
                
                # –ù–ê–®–ò –ö–û–ú–ü–ê–ù–ò–ò - –æ–±–µ –º–æ–≥—É—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥—É
                our_companies = ['tavie', 'parkentertainment']
                our_vats = ['EE102288270', 'PL5272956146']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ Bill To –∫ –Ω–∞—à–∏–º –∫–æ–º–ø–∞–Ω–∏—è–º
                buyer_is_our_company = (
                    buyer_name and (
                        buyer_vat in our_vats or
                        any(org in buyer_name.lower() for org in our_companies)
                    )
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –∫ –Ω–∞—à–∏–º –∫–æ–º–ø–∞–Ω–∏—è–º  
                supplier_vat_match = supplier_vat in our_vats if supplier_vat else False
                supplier_name_match = any(org in supplier_name.lower() for org in our_companies) if supplier_name else False
                
                logger.info(f"  ‚Ä¢ supplier_vat_match: {supplier_vat_match} (VAT: {supplier_vat})")
                logger.info(f"  ‚Ä¢ supplier_name_match: {supplier_name_match} (name: '{supplier_name}')")
                logger.info(f"  ‚Ä¢ our_companies: {our_companies}")
                logger.info(f"  ‚Ä¢ our_vats: {our_vats}")
                
                supplier_is_our_company = supplier_vat_match or supplier_name_match
                
                logger.info(f"  ‚Ä¢ buyer_is_our_company: {buyer_is_our_company}")
                logger.info(f"  ‚Ä¢ supplier_is_our_company: {supplier_is_our_company}")
                
                # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê:
                # 1. –ï—Å–ª–∏ Bill To = –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è ‚Üí –≤—Ö–æ–¥—è—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí –û–ë–†–ê–ë–ê–¢–´–í–ê–¢–¨
                # 2. –ï—Å–ª–∏ Bill From = –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –ò Bill To = –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è ‚Üí –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí –û–ë–†–ê–ë–ê–¢–´–í–ê–¢–¨  
                # 3. –ï—Å–ª–∏ Bill To ‚â† –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è ‚Üí –¥–æ–∫—É–º–µ–Ω—Ç –ù–ï –¥–ª—è –Ω–∞—Å ‚Üí –ù–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–¢–¨
                
                is_internal_document = buyer_is_our_company and supplier_is_our_company
                is_incoming_document = buyer_is_our_company and not supplier_is_our_company
                is_outgoing_document = supplier_is_our_company and not buyer_is_our_company
                is_external_document = not buyer_is_our_company and not supplier_is_our_company
                
                logger.info(f"  ‚Ä¢ is_internal_document: {is_internal_document}")
                logger.info(f"  ‚Ä¢ is_incoming_document: {is_incoming_document}")
                logger.info(f"  ‚Ä¢ is_outgoing_document: {is_outgoing_document}")
                logger.info(f"  ‚Ä¢ is_external_document: {is_external_document}")
                
                if is_external_document:
                    # Bill To –∏ Bill From ‚â† –Ω–∞—à–∏ –∫–æ–º–ø–∞–Ω–∏–∏ ‚Üí –¥–æ–∫—É–º–µ–Ω—Ç –ù–ï –¥–ª—è –Ω–∞—Å ‚Üí –ù–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–¢–¨!
                    await update.message.reply_text(
                        f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç –ù–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–¢–°–Ø!\n\n"
                        f"üö® –í–ù–ï–®–ù–ò–ô –î–û–ö–£–ú–ï–ù–¢: –°—á–µ—Ç –º–µ–∂–¥—É —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏!\n\n"
                        f"üìã –ê–Ω–∞–ª–∏–∑ —Ä–æ–ª–µ–π:\n"
                        f"‚Ä¢ Bill From (–ø–æ—Å—Ç–∞–≤—â–∏–∫): {supplier_name} (VAT: {supplier_vat})\n"
                        f"‚Ä¢ Bill To (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å): {buyer_name} (VAT: {buyer_vat})\n\n"
                        f"üîç –ù–∞—à–∏ –∫–æ–º–ø–∞–Ω–∏–∏: TaVie Europe O√ú, PARKENTERTAINMENT\n\n"
                        f"‚ùå –ù–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫, –Ω–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è—é—Ç—Å—è –Ω–∞—à–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏\n"
                        f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç –ù–ï –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è!\n\n"
                        f"üí° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —É—á–∞—Å—Ç–∏–µ–º –Ω–∞—à–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π"
                    )
                    return
                    
                elif is_outgoing_document:
                    # Bill From = –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è, Bill To ‚â† –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è ‚Üí –∏—Å—Ö–æ–¥—è—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí –ù–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–¢–¨!
                    await update.message.reply_text(
                        f"üì§ –≠–¢–û –ù–ê–® –î–û–ö–£–ú–ï–ù–¢!\n\n"
                        f"üö® –ò–°–•–û–î–Ø–©–ò–ô –î–û–ö–£–ú–ï–ù–¢: –ú—ã –ø—Ä–æ–¥–∞–µ–º –≤–Ω–µ—à–Ω–µ–π –∫–æ–º–ø–∞–Ω–∏–∏!\n\n"
                        f"üìã –ê–Ω–∞–ª–∏–∑ —Ä–æ–ª–µ–π:\n"
                        f"‚Ä¢ Bill From (–ø–æ—Å—Ç–∞–≤—â–∏–∫): {supplier_name} (VAT: {supplier_vat}) ‚úÖ –ù–ê–®–ê –ö–û–ú–ü–ê–ù–ò–Ø\n"
                        f"‚Ä¢ Bill To (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å): {buyer_name} (VAT: {buyer_vat}) ‚ùå –í–ù–ï–®–ù–Ø–Ø –ö–û–ú–ü–ê–ù–ò–Ø\n\n"
                        f"üîç –ù–∞—à–∏ –∫–æ–º–ø–∞–Ω–∏–∏: TaVie Europe O√ú, PARKENTERTAINMENT\n\n"
                        f"üì§ –ú—ã –ø—Ä–æ–¥–∞–µ–º –≤–Ω–µ—à–Ω–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ ‚Üí —ç—Ç–æ –Ω–∞—à –∏—Å—Ö–æ–¥—è—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç\n"
                        f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è (–º—ã –Ω–µ –ø–æ–∫—É–ø–∞–µ–º —É —Å–µ–±—è)\n\n"
                        f"üí° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–∫–æ–≥–¥–∞ –º—ã –ø–æ–∫—É–ø–∞–µ–º) –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ (–º–µ–∂–¥—É –Ω–∞—à–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏)"
                    )
                    return
                    
                elif is_incoming_document:
                    # Bill To = –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è, Bill From ‚â† –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è ‚Üí –≤—Ö–æ–¥—è—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí –û–ë–†–ê–ë–ê–¢–´–í–ê–¢–¨!
                    logger.info(f"‚úÖ –í–•–û–î–Ø–©–ò–ô –¥–æ–∫—É–º–µ–Ω—Ç: Bill To = –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è ‚Üí –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º")
                    
                elif is_internal_document:
                    # Bill To = –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è, Bill From = –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è ‚Üí –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí –û–ë–†–ê–ë–ê–¢–´–í–ê–¢–¨!
                    logger.info(f"‚úÖ –í–ù–£–¢–†–ï–ù–ù–ò–ô –¥–æ–∫—É–º–µ–Ω—Ç: –º–µ–∂–¥—É –Ω–∞—à–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏ ‚Üí –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º")
                    
            except ValueError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {e}")
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é ‚Üí –ù–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–¢–¨!
                await update.message.reply_text(
                    f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç –ù–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–¢–°–Ø!\n\n"
                    f"üö® –ù–ï –£–î–ê–õ–û–°–¨ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—à—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é!\n\n"
                    f"üìã –ê–Ω–∞–ª–∏–∑ —Ä–æ–ª–µ–π:\n"
                    f"‚Ä¢ Bill From (–ø–æ—Å—Ç–∞–≤—â–∏–∫): {supplier_name} (VAT: {supplier_vat})\n"
                    f"‚Ä¢ Bill To (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å): {buyer_name} (VAT: {buyer_vat})\n\n"
                    f"‚ùå –ù–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º—É –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å—á–µ—Ç\n"
                    f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç –ù–ï –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è!\n\n"
                    f"üí° –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
                )
                return

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º VAT –¥–ª—è –ï–î–ò–ù–û–ì–û –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Å ISO‚Äë–ø—Ä–µ—Ñ–∏–∫—Å–æ–º)
            try:
                from telegram_bot.services.vat_normalizer import normalize_vat as _norm_vat
                normalized_vat = _norm_vat(
                    supplier_vat,
                    document_analysis.get('supplier_country'),
                    document_analysis.get('extracted_text'),
                )
                if normalized_vat:
                    document_analysis['supplier_vat'] = normalized_vat
                    supplier_vat = normalized_vat
            except Exception:
                normalized_vat = supplier_vat

            # AI –ø–µ—Ä–µ–≤–æ–¥ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            async def ai_translate_document_type(doc_type: str) -> str:
                """AI –ø–µ—Ä–µ–≤–æ–¥ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
                if not doc_type or doc_type == 'Unknown':
                    return '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
                
                # –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ AI
                try:
                    import openai
                    if not os.getenv('OPENAI_API_KEY'):
                        return doc_type  # Fallback –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞
                    
                    client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
                    
                    response = client.chat.completions.create(
                        model="gpt-4o-mini",  # –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                        messages=[{
                            "role": "user", 
                            "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{doc_type}' –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π. –ü—Ä–∏–º–µ—Ä—ã: 'Invoice' ‚Üí '–°—á—ë—Ç-—Ñ–∞–∫—Ç—É—Ä–∞', 'Contract' ‚Üí '–î–æ–≥–æ–≤–æ—Ä', 'Verbindliche Bestellung' ‚Üí '–î–æ–≥–æ–≤–æ—Ä –ø–æ–∫—É–ø–∫–∏'"
                        }],
                        max_tokens=50,
                        temperature=0
                    )
                    
                    translated = response.choices[0].message.content.strip()
                    return translated if translated else doc_type
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
                    return doc_type  # Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É

            document_type_ru = await ai_translate_document_type(document_type)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ü–†–ê–í–ò–õ–¨–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            telegram_message = f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–†–ê–ë–û–¢–ö–ò –î–û–ö–£–ú–ï–ù–¢–ê\n\n"
            telegram_message += f"üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_type_ru}\n"
            telegram_message += f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org_name}\n"
            telegram_message += "‚îÄ" * 40 + "\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ü–†–ê–í–ò–õ–¨–ù–£–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if supplier_name:
                telegram_message += f"üè™ Bill From (–ø–æ—Å—Ç–∞–≤—â–∏–∫): {supplier_name}\n"
            if buyer_name and buyer_name != supplier_name:
                telegram_message += f"üë§ Bill To (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å): {buyer_name}\n"
            if supplier_vat:
                telegram_message += f"üè∑Ô∏è VAT –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_vat}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if is_internal_document:
                telegram_message += f"üîÑ –í–ù–£–¢–†–ï–ù–ù–ò–ô –¥–æ–∫—É–º–µ–Ω—Ç: –º–µ–∂–¥—É –Ω–∞—à–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏\n\n"
            elif is_incoming_document:
                telegram_message += f"‚úÖ –í–•–û–î–Ø–©–ò–ô –¥–æ–∫—É–º–µ–Ω—Ç: —Å—á–µ—Ç –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ù–ê–ú\n\n"
            else:
                telegram_message += f"üìã –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ result
            analysis = result.document_analysis
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if analysis.get('document_category'):
                raw_cat = analysis.get('document_category')
                cat_map = {
                    'DocumentCategory.CARS': 'üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏', 'CARS': 'üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏',
                    'DocumentCategory.FLOWERS': 'üå∏ –¶–≤–µ—Ç—ã', 'FLOWERS': 'üå∏ –¶–≤–µ—Ç—ã',
                    'DocumentCategory.UTILITIES': 'üíß –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', 'UTILITIES': 'üíß –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
                    'DocumentCategory.SERVICES': 'üõ†Ô∏è –£—Å–ª—É–≥–∏', 'SERVICES': 'üõ†Ô∏è –£—Å–ª—É–≥–∏',
                    'DocumentCategory.FOOD': 'üçé –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', 'FOOD': 'üçé –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è',
                    'DocumentCategory.OTHER': 'üì¶ –ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã', 'OTHER': 'üì¶ –ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã'
                }
                readable_cat = cat_map.get(str(raw_cat), str(raw_cat))
                telegram_message += f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {readable_cat}\n"
            
            # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if analysis.get('supplier_email'):
                telegram_message += f"üìß Email: {analysis.get('supplier_email')}\n"
            if analysis.get('supplier_phone'):
                telegram_message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {analysis.get('supplier_phone')}\n"
            
            # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if analysis.get('tax_rate') is not None:
                try:
                    tax = float(analysis.get('tax_rate'))
                    telegram_message += f"üí∞ –ù–µ—Ç—Ç–æ/–ù–î–°: {analysis.get('total_amount', 0)} {analysis.get('currency', 'EUR')} ‚Ä¢ {tax}%\n"
                except Exception:
                    telegram_message += f"üí∞ –ù–µ—Ç—Ç–æ: {analysis.get('total_amount', 0)} {analysis.get('currency', 'EUR')}\n"
            else:
                telegram_message += f"üí∞ –°—É–º–º–∞: {analysis.get('total_amount', 0)} {analysis.get('currency', 'EUR')}\n"
            
            # –î–æ–∫—É–º–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if analysis.get('bill_number'):
                telegram_message += f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {analysis.get('bill_number')}\n"
            if analysis.get('document_date'):
                telegram_message += f"üìÖ –î–∞—Ç–∞: {analysis.get('document_date')}\n"
            
            # –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if analysis.get('vin'):
                telegram_message += f"\nüöó –ê–í–¢–û–ú–û–ë–ò–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n"
                telegram_message += f"–ú–∞—Ä–∫–∞: {analysis.get('car_brand', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}\n"
                telegram_message += f"–ú–æ–¥–µ–ª—å: {analysis.get('car_model', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}\n" 
                telegram_message += f"VIN: {analysis.get('vin')}\n"
                if analysis.get('car_item_name'):
                    telegram_message += f"Item: {analysis.get('car_item_name')}\n"
            
            # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞
            comparison = result.contact_comparison
            if comparison and comparison.exists_in_cache:
                telegram_message += "\n‚úÖ –ö–û–ù–¢–ê–ö–¢ –ù–ê–ô–î–ï–ù –í –ö–≠–®–ï\n"
                telegram_message += "‚úÖ VAT –Ω–æ–º–µ—Ä–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç\n"
            else:
                telegram_message += "\nüÜï –ö–û–ù–¢–ê–ö–¢ –ù–ï –ù–ê–ô–î–ï–ù –≤ –∫—ç—à–µ\n"
            
            # –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
            if any([analysis.get('iban'), analysis.get('swift_bic'), analysis.get('bank_name'), analysis.get('bank_account')]):
                telegram_message += "\nüè¶ –ë–ê–ù–ö–û–í–°–ö–ò–ï –†–ï–ö–í–ò–ó–ò–¢–´:\n"
                if analysis.get('bank_name'):
                    telegram_message += f"–ë–∞–Ω–∫: {analysis.get('bank_name')}\n"
                if analysis.get('iban'):
                    telegram_message += f"IBAN: {analysis.get('iban')}\n"
                if analysis.get('bank_account'):
                    telegram_message += f"–°—á—ë—Ç: {analysis.get('bank_account')}\n"
                if analysis.get('swift_bic'):
                    telegram_message += f"SWIFT: {analysis.get('swift_bic')}\n"
                if analysis.get('bank_address'):
                    telegram_message += f"–ê–¥—Ä–µ—Å –±–∞–Ω–∫–∞: {analysis.get('bank_address')}\n"
            if analysis.get('payment_method'):
                telegram_message += f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {analysis.get('payment_method')}\n"

            # –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π our_company –∏ supplier_country
            supplier_check = None
            if supplier_name:
                supplier_check = await smart_supplier_check(
                    supplier_name, 
                    supplier_vat, 
                    our_company, 
                    document_analysis
                )
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∏–º—è/–≤–∞—Ç
                try:
                    logger.info(f"üîé Supplier debug: org={supplier_check.get('organization_id')}, org_name={supplier_check.get('organization_name')}, name='{supplier_name}', vat='{supplier_vat}' status={supplier_check.get('status')}")
                except Exception:
                    pass

            # –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            keyboard = []

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if supplier_check:
                status = supplier_check.get('status')
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ —Ü–µ–ª–µ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                found_statuses = [
                    'found_in_cache', 'found_with_vat_mismatch'
                ]
                if status in found_statuses:
                    keyboard.append([InlineKeyboardButton(
                        'üìù –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç',
                        callback_data='update_existing_contact'
                    )])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –≤ Zoho" –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                    try:
                        contact_id = (
                            supplier_check.get('contact_id') or 
                            (supplier_check.get('contact') or {}).get('contact_id') or
                            (supplier_check.get('cached_contact') or {}).get('contact_id')
                        )
                        
                        if contact_id:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è URL
                            org_id = supplier_check.get('organization_id')
                            if not org_id:
                                org_id, _ = determine_buyer_organization(document_analysis)
                            
                            zoho_url = f"https://books.zoho.eu/app/{org_id}#/contacts/{contact_id}"
                            keyboard.append([InlineKeyboardButton(
                                'üîó –û—Ç–∫—Ä—ã—Ç—å –≤ Zoho',
                                url=zoho_url
                            )])
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ Zoho: {e}")
                        
                elif status == 'not_found':
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –µ—Å–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ —Ü–µ–ª–µ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                    keyboard.append([InlineKeyboardButton(
                        supplier_check.get('button_text', '‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'),
                        callback_data=supplier_check.get('button_action', 'create_new_contact')
                    )])

                # –î–æ–±–∞–≤–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    actions_block = "\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:\n"
                    if status in found_statuses:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        contact = supplier_check.get('contact', {})
                        needs_update = False
                        if analysis.get('supplier_email') and not contact.get('email'):
                            needs_update = True
                        if analysis.get('supplier_phone') and not contact.get('phone'):
                            needs_update = True
                        if analysis.get('supplier_address') and not contact.get('billing_address'):
                            needs_update = True
                        
                        if needs_update:
                            actions_block += "   üìù –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç (–µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)\n"
                        else:
                            actions_block += "   ‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –∞–∫—Ç—É–∞–ª–µ–Ω\n"
                    elif status == 'not_found':
                        actions_block += "   ‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞\n"
                    telegram_message = (telegram_message or "") + actions_block
                except Exception:
                    pass

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è ITEM (–¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å VIN)
            vin = document_analysis.get('vin')
            car_model = document_analysis.get('car_model')
            car_brand = document_analysis.get('car_brand')
            
            if vin and (car_model or car_brand):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ ITEM —Å —Ç–∞–∫–∏–º VIN
                try:
                from functions.zoho_items_manager import ZohoItemsManager
                manager = ZohoItemsManager()
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
                    org_id, org_name = determine_buyer_organization(document_analysis)

                    if manager.check_sku_exists(vin, org_id):
                        # ITEM —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è ITEM —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", callback_data="item_exists")])
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ITEM
                keyboard.append([InlineKeyboardButton("üöó –°–æ–∑–¥–∞—Ç—å ITEM", callback_data="create_item")])
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ITEM: {e}")
                    # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
                    keyboard.append([InlineKeyboardButton("üöó –°–æ–∑–¥–∞—Ç—å ITEM", callback_data="create_item")])

                # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è BILL (–¢–û–õ–¨–ö–û –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤)
            document_type = document_analysis.get('document_type', '').lower()
                is_final_invoice = (
                    document_type == 'invoice' or 
                    (
                        'invoice' in document_type and 
                        'proforma' not in document_type and 
                        'service' not in document_type
                    ) or
                    'rechnung' in document_type or
                    'facture' in document_type or
                    'fattura' in document_type or
                    'faktura' in document_type
                )
                is_not_proforma = 'proforma' not in document_type
                is_not_contract = 'contract' not in document_type and 'vertrag' not in document_type
                is_not_credit_note = 'credit' not in document_type and 'gutschrift' not in document_type
                is_not_retainer = 'retainer' not in document_type  # Retainer Invoice - —ç—Ç–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞, –Ω–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω–≤–æ–π—Å
                
                logger.info(f"üîç BILL BUTTON CHECK:")
                logger.info(f"  ‚Ä¢ document_type: '{document_type}'")
                logger.info(f"  ‚Ä¢ is_final_invoice: {is_final_invoice}")
                logger.info(f"  ‚Ä¢ is_not_proforma: {is_not_proforma}")
                logger.info(f"  ‚Ä¢ is_not_contract: {is_not_contract}")
                logger.info(f"  ‚Ä¢ is_not_credit_note: {is_not_credit_note}")
                logger.info(f"  ‚Ä¢ is_not_retainer: {is_not_retainer}")
                logger.info(f"  ‚Ä¢ bill_number: '{document_analysis.get('bill_number')}'")
                logger.info(f"  ‚Ä¢ total_amount: {document_analysis.get('total_amount')}")
                
                if (is_final_invoice and is_not_proforma and is_not_contract and is_not_credit_note and is_not_retainer and
                    document_analysis.get('bill_number') and document_analysis.get('total_amount')):
                    logger.info(f"‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É 'Create BILL' - —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω–≤–æ–π—Å")
                keyboard.append([InlineKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å BILL", callback_data="create_bill")])
                else:
                    logger.info(f"‚ùå –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É 'Create BILL' - –Ω–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω–≤–æ–π—Å")

            # –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            analysis_btn_needed = False
            try:
                dt = (document_analysis.get('document_type') or '').lower()
                if 'contract' in dt or 'proforma' in dt or document_analysis.get('contract_risks'):
                    analysis_btn_needed = True
            except Exception:
                pass

            row = [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à", callback_data="smart_refresh_cache"),
                   InlineKeyboardButton("üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="smart_full_report")]
            keyboard.append(row)
            if analysis_btn_needed:
                keyboard.append([InlineKeyboardButton("üß† –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞", callback_data="smart_analysis")])

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if supplier_check:
                telegram_message += f"\n\n{supplier_check['message']}"

            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            if context.user_data is not None:
                context.user_data['smart_result'] = result
                context.user_data['document_analysis'] = result.document_analysis
                context.user_data['supplier_check'] = supplier_check  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
            if update.effective_user:
                context.user_data[f'last_analysis_{update.effective_user.id}'] = result.document_analysis

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —É–∂–µ –µ—Å—Ç—å supplier_check)
            # –ß—Ç–æ–±—ã –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –≤–≤–æ–¥–∏–ª –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω
            try:
                if supplier_check and '–ù–ï –ù–ê–ô–î–ï–ù' in telegram_message:
                    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω
                    status = supplier_check.get('status')
                    if status and status != 'not_found':
                        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                        telegram_message = telegram_message.replace('üÜï –ö–û–ù–¢–ê–ö–¢ –ù–ï –ù–ê–ô–î–ï–ù –≤ –∫—ç—à–µ', '‚úÖ –ö–û–ù–¢–ê–ö–¢ –ù–ê–ô–î–ï–ù –í –ö–≠–®–ï')
            except Exception:
                pass

            chat_id = update.message.chat.id
            print(f"üîç DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ chat_id={chat_id}, –∫–Ω–æ–ø–æ–∫: {len(keyboard) if keyboard else 0}")
            await update.message.reply_text(telegram_message, reply_markup=reply_markup)
            print(f"‚úÖ DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ chat_id={chat_id}")
        else:
            error_list = result.errors or []
            error_message = "‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n" + "\n".join(error_list)
            await update.message.reply_text(error_message)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        if result.success:
            try:
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                processed_dir = Path("processed_files")
                processed_dir.mkdir(exist_ok=True)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                original_name = Path(document.file_name).stem
                new_filename = f"{original_name}_{timestamp}.pdf"
                processed_path = processed_dir / new_filename

                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                import shutil
                shutil.copy2(temp_path, processed_path)

                logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {processed_path}")

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if context.user_data is not None:
                    context.user_data['processed_file_path'] = str(processed_path)

            except Exception as save_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {save_error}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_path)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")


async def handle_selling_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è ITEM"""

    if not update.message or not context.user_data:
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Ü–µ–Ω—É
        price_text = update.message.text
        if not price_text:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º:")
            return

        price_text = price_text.strip()
        selling_price = float(price_text.replace(',', '.'))

        if selling_price <= 0:
            await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        await update.message.reply_text(f"‚úÖ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {selling_price} EUR\nüöó –°–æ–∑–¥–∞—é ITEM –≤ Zoho Books...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ ITEM
        item_data = context.user_data.get('item_data')
        if not item_data:
            await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ ITEM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
        item_data['selling_price'] = selling_price

        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
        analysis = context.user_data.get('document_analysis') or {}
        vin = (item_data.get('vin') or analysis.get('vin') or '').strip()
        car_model = item_data.get('car_model') or analysis.get('car_model') or ''
        car_brand = analysis.get('car_brand') or ''
        car_item_name = analysis.get('car_item_name')
        if not car_item_name:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ –ø—Ä–∞–≤–∏–ª—É Brand Model_last5VIN
            last5 = vin[-5:] if vin else ''
            car_item_name = ' '.join([p for p in [car_brand, car_model] if p]).strip()
            if last5:
                car_item_name = f"{car_item_name}_{last5}" if car_item_name else last5

        cost_price = None
        try:
            # –ë–µ—Ä—ë–º NET: —Å–Ω–∞—á–∞–ª–∞ net_amount, –ø–æ—Ç–æ–º total_amount (–∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –Ω–µ—Ç—Ç–æ)
            net_val = analysis.get('net_amount') if analysis.get('net_amount') is not None else analysis.get('total_amount')
            cost_price = float(item_data.get('cost_price') or net_val or 0.0)
        except Exception:
            cost_price = 0.0

        if not vin or not car_item_name:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ITEM (VIN/–Ω–∞–∑–≤–∞–Ω–∏–µ)")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        try:
            org_id, org_name = determine_buyer_organization(analysis)
            logger.info(f"üè¢ ITEM ORG: {org_name} (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å)")
        except ValueError as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ZohoItemsManager
        manager = ZohoItemsManager()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ VIN
        try:
            if manager.check_sku_exists(vin, org_id):
                await update.message.reply_text(f"‚ÑπÔ∏è ITEM —Å VIN {vin} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Zoho ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
                context.user_data['waiting_for_selling_price'] = False
                context.user_data.pop('item_data', None)
                return
        except Exception:
            pass

        # –ü–æ–ª—É—á–∞–µ–º tax_id (–æ–±—ã—á–Ω–æ 0% export)
        tax_id = None
        try:
            tax_id = manager.get_tax_export_id(org_id)
        except Exception:
            tax_id = None

        # –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç VIN
        description_en = analysis.get('item_description') or analysis.get('item_details') or ''
        if description_en:
            # Ensure VIN present
            if vin and vin not in description_en:
                description_en = f"{description_en}. VIN {vin}"
        else:
            description_en = f"{car_item_name} VIN {vin}".strip()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–±–µ–≥ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è (–ø–æ–∏—Å–∫ "XX km" –∏–ª–∏ "XX –∫–º")
        mileage = None
        try:
            import re
            mileage_match = re.search(r'(\d+)\s*(?:km|–∫–º)', description_en, re.IGNORECASE)
            if mileage_match:
                mileage = int(mileage_match.group(1))
                logger.info(f"üöó –ò–∑–≤–ª–µ—á–µ–Ω –ø—Ä–æ–±–µ–≥: {mileage} –∫–º")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ–±–µ–≥–∞: {e}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –≤ PLN –¥–ª—è PARKENTERTAINMENT
        original_currency = analysis.get('currency', 'EUR')
        document_date = analysis.get('document_date') or analysis.get('sale_date') or analysis.get('issue_date')
        
        final_cost_price = float(cost_price or 0.0)
        final_selling_price = float(selling_price)
        
        if org_id == "20082562863" and original_currency.upper() != "PLN":  # PARKENTERTAINMENT
            from functions.zoho_items_manager import convert_currency_to_pln
            final_cost_price = convert_currency_to_pln(final_cost_price, original_currency, document_date or "", org_id)
            final_selling_price = convert_currency_to_pln(final_selling_price, original_currency, document_date or "", org_id)

        car_data = CarItemData(
            name=car_item_name,
            sku=vin,
            description=description_en,
            cost_price=final_cost_price,
            selling_price=final_selling_price,
            unit="pcs",
            tax_id=tax_id,
            # –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø PARKENTERTAINMENT
            mileage=mileage,
            vin=vin,
            original_currency=original_currency,
            document_date=document_date,
        )

        created = manager.create_car_item(car_data, org_id)
        if created:
            msg_lines = [
                "‚úÖ ITEM —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ Zoho",
                f"   Name: {created.get('name')}",
                f"   SKU: {created.get('sku')}",
                f"   ID: {created.get('item_id')}",
            ]
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ ITEM –≤ Zoho
            item_id = created.get('item_id')
            if item_id:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                document_analysis = context.user_data.get('document_analysis') or {}
                org_id = "20082562863" if 'parkentertainment' in (document_analysis.get('our_company') or '').lower() else "20092948714"
                zoho_url = f"https://books.zoho.eu/app/{org_id}#/items/{item_id}"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –≤ Zoho", url=zoho_url)
                ]])
                
                await update.message.reply_text("\n".join(msg_lines), reply_markup=keyboard)
            else:
            await update.message.reply_text("\n".join(msg_lines))
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ITEM –≤ Zoho. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–Ω—ã
        context.user_data['waiting_for_selling_price'] = False
        context.user_data.pop('item_data', None)

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω—ã: {str(e)}")


async def send_analysis_result(update: Update, ai_result: Dict[str, Any]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram"""
    if not update.message:
        return

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        message = "üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–†–ê–ë–û–¢–ö–ò –î–û–ö–£–ú–ï–ù–¢–ê\n\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
        supplier = ai_result.get('supplier', {})
        if supplier:
            message += f"üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message += f"üìß Email: {supplier.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {supplier.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        message += f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {ai_result.get('bill_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        message += f"üìÖ –î–∞—Ç–∞: {ai_result.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        message += f"‚è∞ –°—Ä–æ–∫ –ø–ª–∞—Ç–µ–∂–∞: {ai_result.get('payment_terms', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

        # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_status = ai_result.get('contact_status', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
        message += f"üÜï –ö–æ–Ω—Ç–∞–∫—Ç: {contact_status}\n"

        # –°—É–º–º–∞
        total_amount = ai_result.get('total_amount')
        if total_amount:
            currency = ai_result.get('currency', 'EUR')
            message += f"üí∞ –°—É–º–º–∞: {total_amount} {currency}\n"

        # –ê–¥—Ä–µ—Å
        address = supplier.get('address', {})
        if address:
            message += "üìç –ê–¥—Ä–µ—Å –¥–ª—è Zoho:\n"
            message += f"   üåç Country: {address.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message += f"   üè† Address: {address.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message += f"   üèôÔ∏è City: {address.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message += f"   üìÆ ZIP Code: {address.get('zip', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message += f"   üìû Phone: {address.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

        # VAT –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–≤—Å–µ–≥–¥–∞ —Å ISO-–ø—Ä–µ—Ñ–∏–∫—Å–æ–º, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞)
        vat = supplier.get('vat')
        if vat:
            try:
                from src.domain.services.vat_validator import VATValidatorService
                vvs_disp = VATValidatorService()
                country = (supplier.get('country') or ai_result.get('supplier_country') or (supplier.get('address') or {}).get('country') or '').strip().lower()
                country_to_iso = {
                    'poland': 'PL', 'polska': 'PL', 'estonia': 'EE', 'eesti': 'EE', 'germany': 'DE',
                    'deutschland': 'DE', 'latvia': 'LV', 'lithuania': 'LT', 'netherlands': 'NL',
                    'ireland': 'IE', 'france': 'FR', 'spain': 'ES', 'italy': 'IT', 'portugal': 'PT',
                    'sweden': 'SE', 'denmark': 'DK', 'united kingdom': 'GB', 'uk': 'GB'
                }
                expected = country_to_iso.get(country)
                valid = vvs_disp.validate_vat(vat, expected_country=expected)
                if valid.is_valid:
                    vat_show = vvs_disp.add_country_prefix(valid.vat_number.value, expected or valid.country_code).replace(' ', '')
                else:
                    digits = ''.join(ch for ch in str(vat) if ch.isdigit())
                    vat_show = f"{expected}{digits}" if expected and digits else str(vat)
            except Exception:
                vat_show = str(vat)
            message += f"üè∑Ô∏è VAT: {vat_show}\n"

        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI
        confidence = ai_result.get('confidence')
        if confidence:
            message += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI: {confidence}%\n"

        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        message += "\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:\n"
        if contact_status == "–ù–ï –ù–ê–ô–î–ï–ù - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ":
            message += "   ‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞\n"

        await update.message.reply_text(message)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}")


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
    if not update.callback_query:
        return

    query = update.callback_query
    logger.info(f"üîò CALLBACK received: {query.data if query else 'None'}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º thread-safe deduplicator
    message_id = getattr(query.message, 'message_id', None) if query.message else None
    is_duplicate = await callback_deduplicator.is_duplicate(query.id, message_id)
    
    if is_duplicate:
        logger.info(f"üîÑ DUPLICATE callback detected: {query.data}")
        await query.answer("‚è≥ –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
            return
    
    logger.info(f"‚úÖ PROCESSING callback: {query.data}")
        
    await query.answer()

    try:
        action = query.data
        try:
            logger.info(f"CB action={action} user_data_keys={list(context.user_data.keys()) if context.user_data else None}")
            print(f"CB action={action} user_data_keys={list(context.user_data.keys()) if context.user_data else None}")
        except Exception:
            pass
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —É–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ handle_smart_callback
        smart_actions = [
            "create_new_contact", "update_existing_contact", "update_supplier_vat", 
            "update_supplier_vat_and_refresh", "refresh_cache_only", "smart_refresh_cache", "smart_full_report",
            "create_bill", "create_item", "smart_analysis", "smart_create_expense"
        ]
        
        if action in smart_actions or action.startswith("expense_paid_through:"):
            await handle_smart_callback(update, context, action)
            return
            
        # –ü—Ä–æ—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (—Å—Ç–∞—Ä—ã–µ)
        if action == "create_contact":
            await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é –∫–æ–Ω—Ç–∞–∫—Ç...")
        elif action == "update_contact":
            await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ç–∞–∫—Ç...")
        elif action == "create_item":
            await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é ITEM...")
        elif action == "refresh_cache":
            await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—ç—à...")
        elif action == "full_report":
            await query.edit_message_text("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
        elif action == "smart_create_expense":
            await handle_smart_create_expense(update, context)
        elif action.startswith("expense_paid_through:"):
            await handle_expense_payment_method(update, context)
        elif action == "smart_analysis":
            await handle_smart_analysis(update, context)
        elif action.startswith("choose_account:"):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª account_id –¥–ª—è BILL
            print(f"üå∏ DEBUG: choose_account triggered - using pre-created payload")
            aid = action.split(":", 1)[1]
            pending = context.user_data.get('pending_bill') or {}
            org_id = pending.get('org_id')
            vendor_id = pending.get('vendor_id')
            payload = pending.get('payload') or {}
            print(f"üå∏ DEBUG: Payload has {len(payload.get('line_items', []))} line_items from pending_bill")
            if not (org_id and vendor_id and payload):
                await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è BILL")
                return
            # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π account_id –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –±–µ–∑ account
            try:
                for li in payload.get('line_items', []):
                    if not li.get('account_id'):
                        li['account_id'] = aid
            except Exception:
                pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º BILL –≤ Zoho
            import requests
            from functions.zoho_api import get_access_token
            access_token = get_access_token()
            url = f"https://www.zohoapis.eu/books/v3/bills?organization_id={org_id}"
            headers = {"Authorization": f"Zoho-oauthtoken {access_token}", "Content-Type": "application/json"}
            r = requests.post(url, headers=headers, json=payload)
            
            # –ï—Å–ª–∏ 401 - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
            if r.status_code == 401:
                from functions.zoho_api import get_access_token
                new_token = get_access_token()
                if new_token:
                    headers['Authorization'] = f"Zoho-oauthtoken {new_token}"
                    r = requests.post(url, headers=headers, json=payload)
            
            ok = r.status_code in (200, 201) and 'bill' in (r.json() if r.content else {})
            try:
                logger.info(f"BILL(chosen) response: status={r.status_code} body={(r.text or '')[:400]}")
            except Exception:
                pass
            if ok:
                await query.edit_message_text("‚úÖ BILL —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è BILL: {r.status_code} {(r.text or '')[:200]}")
            context.user_data.pop('pending_bill', None)
            return
        elif action == "cancel_bill":
            context.user_data.pop('pending_bill', None)
            await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ BILL –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        elif action == "create_item":
            # –ü–µ—Ä–µ–≤–µ–¥—ë–º –¥–∏–∞–ª–æ–≥ –≤ —Ä–µ–∂–∏–º –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω–∏–≤ UI (–Ω–µ –∑–∞—Ç–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            await handle_smart_create_item(update, context)
            try:
                await query.answer()
            except Exception:
                pass
            return
        elif action.startswith("choose_branch_"):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª branch_id –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            branch_id = action.replace("choose_branch_", "")
            logger.info(f"üå∏ DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª branch_id: {branch_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            bill_payload = context.user_data.get('pending_bill_payload')
            analysis = context.user_data.get('pending_analysis')
            
            if not bill_payload or not analysis:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π branch_id –≤ payload
            bill_payload["branch_id"] = branch_id
            logger.info(f"üå∏ DEBUG: –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π branch_id –≤ payload: {branch_id}")
            
            # –°–æ–∑–¥–∞–µ–º Bill —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º branch
            try:
                from functions.zoho_api import create_bill
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
                supplier_name = analysis.get('supplier_name', '').lower()
                org_id = "20082562863"  # PARKENTERTAINMENT
                
                bill_response = create_bill(org_id, bill_payload)
                
                if bill_response.get('bill'):
                    bill_id = bill_response['bill'].get('bill_id')
                    bill_number = bill_response['bill'].get('bill_number', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
                    branch_name = bill_response['bill'].get('branch_name', 'Head Office')
                    await query.edit_message_text(f"‚úÖ Bill —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\nüìÑ ID: {bill_id}\nüî¢ –ù–æ–º–µ—Ä: {bill_number}\nüè¢ Branch: {branch_name}")
                else:
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bill: {bill_response}")

    except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bill —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º branch: {e}")
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bill: {str(e)}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('pending_bill_payload', None)
            context.user_data.pop('pending_analysis', None)
            return
        elif action == "smart_refresh_cache":
            await handle_smart_refresh_cache(update, context)
        elif action == "smart_full_report":
            await handle_smart_full_report(update, context)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É–º–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {str(e)}")


async def handle_smart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–Ω—ã—Ö callback –∫–Ω–æ–ø–æ–∫"""
    if not update.callback_query or not context.user_data:
        return

    query = update.callback_query
    await query.answer()

    try:
        try:
            logger.info(f"SMART CB enter action={action} keys={list(context.user_data.keys())}")
            print(f"SMART CB enter action={action} keys={list(context.user_data.keys())}")
        except Exception:
            pass
        if action == "create_new_contact":
            await handle_smart_create_contact(update, context)
        elif action == "update_existing_contact":
            # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–≤–∫–ª—é—á–∞—è VAT –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è)
            await handle_smart_update_contact(update, context)
        elif action == "update_supplier_vat":
            await handle_smart_update_supplier_vat(update, context, refresh_cache=False)
        elif action == "update_supplier_vat_and_refresh":
            await handle_smart_update_supplier_vat(update, context, refresh_cache=True)
        elif action == "refresh_cache_only":
            await handle_smart_refresh_cache(update, context)
        elif action == "create_bill":
            await handle_smart_create_bill(update, context)
        elif action == "smart_create_expense":
            await handle_smart_create_expense(update, context)
        elif action.startswith("expense_paid_through:"):
            await handle_expense_payment_method(update, context)
        elif action == "smart_analysis":
            await handle_smart_analysis(update, context)
        elif action.startswith("choose_account:"):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª account_id –¥–ª—è BILL
            print(f"üå∏ DEBUG: choose_account triggered - using pre-created payload")
            aid = action.split(":", 1)[1]
            pending = context.user_data.get('pending_bill') or {}
            org_id = pending.get('org_id')
            vendor_id = pending.get('vendor_id')
            payload = pending.get('payload') or {}
            print(f"üå∏ DEBUG: Payload has {len(payload.get('line_items', []))} line_items from pending_bill")
            if not (org_id and vendor_id and payload):
                await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è BILL")
                return
            # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π account_id –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –±–µ–∑ account
            try:
                for li in payload.get('line_items', []):
                    if not li.get('account_id'):
                        li['account_id'] = aid
            except Exception:
                pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º BILL –≤ Zoho
            import requests
            from functions.zoho_api import get_access_token
            access_token = get_access_token()
            url = f"https://www.zohoapis.eu/books/v3/bills?organization_id={org_id}"
            headers = {"Authorization": f"Zoho-oauthtoken {access_token}", "Content-Type": "application/json"}
            r = requests.post(url, headers=headers, json=payload)
            
            # –ï—Å–ª–∏ 401 - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
            if r.status_code == 401:
                from functions.zoho_api import get_access_token
                new_token = get_access_token()
                if new_token:
                    headers['Authorization'] = f"Zoho-oauthtoken {new_token}"
                    r = requests.post(url, headers=headers, json=payload)
            
            ok = r.status_code in (200, 201) and 'bill' in (r.json() if r.content else {})
            try:
                logger.info(f"BILL(chosen) response: status={r.status_code} body={(r.text or '')[:400]}")
            except Exception:
                pass
            if ok:
                await query.edit_message_text("‚úÖ BILL —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è BILL: {r.status_code} {(r.text or '')[:200]}")
            context.user_data.pop('pending_bill', None)
            return
        elif action == "cancel_bill":
            context.user_data.pop('pending_bill', None)
            await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ BILL –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        elif action == "create_item":
            # –ü–µ—Ä–µ–≤–µ–¥—ë–º –¥–∏–∞–ª–æ–≥ –≤ —Ä–µ–∂–∏–º –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω–∏–≤ UI (–Ω–µ –∑–∞—Ç–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            await handle_smart_create_item(update, context)
            try:
                await query.answer()
            except Exception:
                pass
            return
        elif action.startswith("choose_branch_"):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª branch_id –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            branch_id = action.replace("choose_branch_", "")
            logger.info(f"üå∏ DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª branch_id: {branch_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            bill_payload = context.user_data.get('pending_bill_payload')
            analysis = context.user_data.get('pending_analysis')
            
            if not bill_payload or not analysis:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π branch_id –≤ payload
            bill_payload["branch_id"] = branch_id
            logger.info(f"üå∏ DEBUG: –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π branch_id –≤ payload: {branch_id}")
            
            # –°–æ–∑–¥–∞–µ–º Bill —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º branch
            try:
                from functions.zoho_api import create_bill
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
                supplier_name = analysis.get('supplier_name', '').lower()
                org_id = "20082562863"  # PARKENTERTAINMENT
                
                bill_response = create_bill(org_id, bill_payload)
                
                if bill_response.get('bill'):
                    bill_id = bill_response['bill'].get('bill_id')
                    bill_number = bill_response['bill'].get('bill_number', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
                    branch_name = bill_response['bill'].get('branch_name', 'Head Office')
                    await query.edit_message_text(f"‚úÖ Bill —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\nüìÑ ID: {bill_id}\nüî¢ –ù–æ–º–µ—Ä: {bill_number}\nüè¢ Branch: {branch_name}")
                else:
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bill: {bill_response}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bill —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º branch: {e}")
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bill: {str(e)}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('pending_bill_payload', None)
            context.user_data.pop('pending_analysis', None)
            return
        elif action == "smart_refresh_cache":
            await handle_smart_refresh_cache(update, context)
        elif action == "smart_full_report":
            await handle_smart_full_report(update, context)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É–º–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {str(e)}")


async def handle_smart_create_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    if not update.callback_query or not context.user_data:
        return

    query = update.callback_query
    document_analysis = context.user_data.get('document_analysis')

    if not document_analysis:
        await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        try:
            org_id, org_name = determine_buyer_organization(document_analysis)
        except ValueError as e:
            await context.bot.send_message(
                chat_id=query.message.chat_id, 
                text=f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}"
            )
            return

        # –ù–µ –ø–µ—Ä–µ—Ç–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å—Ç–∞—Ç—É—Å‚Äë—Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(chat_id=query.message.chat_id, text="üîÑ –°–æ–∑–¥–∞—é –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...")

        # –î–æ–±–∞–≤–ª—è–µ–º org_id –≤ document_analysis –¥–ª—è contact_creator
        document_analysis_with_org = document_analysis.copy()
        document_analysis_with_org['target_org_id'] = org_id
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ contact_creator
        success, message = await create_supplier_from_document(document_analysis_with_org)

        if success:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º contact_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            contact_id = None
            if "ID: " in message:
                try:
                    contact_id = message.split("ID: ")[1].split(")")[0]
                except:
                    pass
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
            org_id = "20082562863" if 'parkentertainment' in (document_analysis_with_org.get('our_company') or '').lower() else "20092948714"
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Zoho –µ—Å–ª–∏ –µ—Å—Ç—å contact_id
            if contact_id:
                zoho_url = f"https://books.zoho.eu/app/20082562863#/contacts/{contact_id}" if org_id == "20082562863" else f"https://books.zoho.eu/app/20092948714#/contacts/{contact_id}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –≤ Zoho", url=zoho_url)
                ]])
                    await context.bot.send_message(
                        chat_id=query.message.chat_id, 
                        text=f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n{message}",
                        reply_markup=keyboard
                    )
                else:
            await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n{message}")
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {message}")

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}")


async def handle_smart_update_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±–µ—Ä—Ç—á–∏–∫: –Ω–∞—Ö–æ–¥–∏–º org/contact –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    if not update.callback_query or not context.user_data:
        return

    query = update.callback_query
    await context.bot.send_message(chat_id=query.message.chat_id, text="üîÑ –û–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...")

    try:
        result = context.user_data.get('smart_result')
        if not result:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞")
            return

        analysis = result.document_analysis
        org_id = '20082562863' if 'parkentertainment' in (analysis.get('our_company') or '').lower() else '20092948714'

        sc = context.user_data.get('supplier_check') or {}
        contact_id = (
            sc.get('contact_id') or (sc.get('contact') or {}).get('contact_id') or (sc.get('cached_contact') or {}).get('contact_id')
        )
        if not contact_id:
            from functions.zoho_api import get_contact_by_name
            contact = get_contact_by_name(analysis.get('supplier_name') or '', org_id)
            contact_id = contact.get('contact_id') if isinstance(contact, dict) else None
        if not contact_id:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
            return

        from src.infrastructure.zoho_api import ZohoAPIClient
        from config.zoho_auth import get_zoho_credentials
        creds = get_zoho_credentials()
        client = ZohoAPIClient(creds['client_id'], creds['client_secret'], creds['refresh_token'])

        from telegram_bot.services.zoho_contact_updater import update_contact as svc_update
        vat_ok, other_ok, _ = await svc_update(client, org_id, contact_id, analysis)

        if vat_ok and other_ok:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: VAT –∏ –ø—Ä–æ—á–∏–µ –ø–æ–ª—è")
        elif vat_ok:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: VAT")
        elif other_ok:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω (–±–µ–∑ VAT)")
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Zoho")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –∏–∑ Zoho, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—ã–π VAT –≤ –∫—ç—à–µ
        try:
            from functions.refresh_zoho_cache import refresh_single_contact_cache
            org_name = 'PARKENTERTAINMENT' if org_id == '20082562863' else 'TaVie Europe O√ú'
            cache_ok = await refresh_single_contact_cache(contact_id, org_id, org_name)
            if cache_ok:
                await context.bot.send_message(chat_id=query.message.chat_id, text="üîÑ –ö—ç—à –æ–±–Ω–æ–≤–ª—ë–Ω –∏–∑ Zoho")
        except Exception as ce:
            try:
                logger.warning(f"Cache refresh after update failed: {ce}")
            except Exception:
                pass

    except Exception as e:
        await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}")


async def handle_smart_update_supplier_vat(update: Update, context: ContextTypes.DEFAULT_TYPE, refresh_cache: bool = False) -> None:
    """–¢–æ—á–µ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ VAT –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º payload —á–µ—Ä–µ–∑ custom_fields –ø–æ index.

    –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ª—é–±—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –î–ª—è –ø–æ–ª—å—Å–∫–∏—Ö NIP –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å PL.
    """
    if not update.callback_query or not context.user_data:
        return
    query = update.callback_query
    await query.answer()

    try:
        analysis = (context.user_data.get('document_analysis') or {}).copy()
        supplier_check = context.user_data.get('supplier_check') or {}

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º org
        our_company = (analysis.get('our_company') or '').strip()
        org_id = '20082562863' if 'parkentertainment' in our_company.lower() else '20092948714'

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º contact_id
        contact_id = (
            supplier_check.get('contact_id') or
            (supplier_check.get('cached_contact') or {}).get('contact_id') or
            (supplier_check.get('contact') or {}).get('contact_id')
        )
        if not contact_id:
            from functions.zoho_api import get_contact_by_name
            lookup_name = analysis.get('supplier_name') or ''
            direct = get_contact_by_name(lookup_name, org_id)
            contact_id = direct.get('contact_id') if direct else None
        if not contact_id:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è VAT")
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ VAT: NIP –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞; –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ—Ñ–∏–∫—Å
        supplier_vat_val = (analysis.get('supplier_vat') or '').strip()
        try:
            if not supplier_vat_val and analysis.get('extracted_text'):
                import re
                m = re.search(r"\bNIP\s*[:#]?\s*(\d{10})\b", analysis['extracted_text'], re.IGNORECASE)
                if m:
                    supplier_vat_val = m.group(1)
        except Exception:
            pass
        if not supplier_vat_val:
            await query.edit_message_text("‚ùå –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω VAT/NIP –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return

        from src.domain.services.vat_validator import VATValidatorService
        vvs = VATValidatorService()
        # –î–ª—è –ü–æ–ª—å—à–∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä–∞–Ω—É PL, –∏–Ω–∞—á–µ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        expected_country = 'PL' if 'parkentertainment' in our_company.lower() or 'poland' in (analysis.get('supplier_country') or '').lower() else None
        validation = vvs.validate_vat(supplier_vat_val, expected_country=expected_country)
        if not validation.is_valid and expected_country != 'PL':
            # –§–æ–ª–±–µ–∫: –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è NIP, —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å—Å–∫–∏–º
            try:
                import re
                raw = analysis.get('extracted_text') or ''
                m = re.search(r"\bNIP\s*[:#]?\s*(\d{10})\b", raw, re.IGNORECASE)
                if m:
                    supplier_vat_val = m.group(1)
                    validation = vvs.validate_vat(supplier_vat_val, expected_country='PL')
            except Exception:
                pass
        if not validation.is_valid:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π VAT/NIP ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        vat_prefixed = vvs.add_country_prefix(validation.vat_number.value, expected_country or validation.country_code).replace(' ', '')

        # Zoho –∫–ª–∏–µ–Ω—Ç –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ–π
        from src.infrastructure.zoho_api import ZohoAPIClient
        from config.zoho_auth import get_zoho_credentials
        creds = get_zoho_credentials()
        client = ZohoAPIClient(creds['client_id'], creds['client_secret'], creds['refresh_token'])

        meta = await client.get_contact_custom_fields(org_id) or {}
        fields = (meta.get('customfields') or [])
        target_index = None
        for f in fields:
            if (f.get('module') == 'contacts'):
                lbl = (f.get('label') or '').strip().lower()
                api = (f.get('api_name') or '').strip().lower()
                if lbl in {'tax id','vat','vat id','vat number'} or api in {'cf_tax_id','cf_vat_id'}:
                    try:
                        target_index = int(f.get('index'))
                        break
                    except Exception:
                        pass
        url = f'https://www.zohoapis.eu/books/v3/contacts/{contact_id}?organization_id={org_id}'
        # –ü–ª–æ—Å–∫–∏–π JSON –±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏ 'contact'
        payload = {"custom_fields": [{"index": target_index, "value": vat_prefixed}]} if target_index is not None else {"tax_id": vat_prefixed}
        # –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: –æ–±—Ä–µ–∂–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        def _trim(v):
            if isinstance(v, str):
                return v[:100]
            if isinstance(v, list):
                return [_trim(x) for x in v]
            if isinstance(v, dict):
                return {k: _trim(val) for k, val in v.items()}
            return v
        resp = await client._make_request('PUT', url, json=_trim(payload))

        if resp and resp.get('contact'):
            msg = "‚úÖ VAT –æ–±–Ω–æ–≤–ª—ë–Ω"
            if refresh_cache:
                try:
                    await handle_smart_refresh_cache(update, context)
                except Exception:
                    pass
            await context.bot.send_message(chat_id=query.message.chat_id, text=msg)
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è VAT –≤ Zoho")

    except Exception as e:
        await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è VAT: {str(e)}")


async def handle_smart_refresh_cache(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞"""
    if not update.callback_query or not context.user_data:
        return

    query = update.callback_query

    try:
        await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—ç—à –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
        await query.edit_message_text("‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω!")

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {str(e)}")


async def handle_smart_create_item(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ ITEM"""
    if not update.callback_query or not context.user_data:
        return

    query = update.callback_query
    document_analysis = context.user_data.get('document_analysis')

    if not document_analysis:
        await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        vin = document_analysis.get('vin')
        car_model = document_analysis.get('car_model')
        cost_price = document_analysis.get('cost_price')

        if not vin or not car_model:
            await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ITEM (VIN –∏–ª–∏ –º–æ–¥–µ–ª—å)")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
        context.user_data['waiting_for_selling_price'] = True
        context.user_data['item_data'] = {
            'vin': vin,
            'car_model': car_model,
            'cost_price': cost_price
        }

        # –û—Ç–≤–µ—á–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –Ω–µ —É–±–∏—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await context.bot.send_message(chat_id=query.message.chat_id, text="üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤ EUR):")

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ITEM: {str(e)}")


async def handle_smart_create_bill(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ Bill –≤ Zoho (–≤–∫–ª—é—á–∞—è —Ü–≤–µ—Ç–æ—á–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã) –∏ –∫–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –≤ Zoho"."""
    logger.info(f"üå∏ DEBUG: handle_smart_create_bill STARTED")
    if not update.callback_query or not context.user_data:
        logger.info(f"üå∏ DEBUG: Early return - no callback_query or user_data")
        return
    query = update.callback_query
    analysis = context.user_data.get('document_analysis') or {}
    supplier_check = context.user_data.get('supplier_check') or {}
    processed_path = context.user_data.get('processed_file_path')
    logger.info(f"üå∏ DEBUG: analysis keys: {list(analysis.keys())}")

    # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô FIX: –ï—Å–ª–∏ –≤ —Å—Ç–∞—Ä–æ–º analysis –Ω–µ—Ç line_items, –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    if 'line_items' not in analysis and processed_path:
        logger.info(f"üîß –ü–ï–†–ï–†–ê–ë–û–¢–ö–ê: –°—Ç–∞—Ä—ã–π analysis –±–µ–∑ line_items, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å –Ω–æ–≤—ã–º LLM")
        try:
            from functions.smart_document_processor import SmartDocumentProcessor
            processor = SmartDocumentProcessor()
            result = await processor.process_document(processed_path)
            logger.info(f"üîß –ü–ï–†–ï–†–ê–ë–û–¢–ö–ê: result type={type(result)}, hasattr document_analysis={hasattr(result, 'document_analysis') if result else 'None'}")
            if result and result.document_analysis:
                analysis = result.document_analysis
                logger.info(f"üîß –ü–ï–†–ï–†–ê–ë–û–¢–ö–ê: analysis keys after reprocess={list(analysis.keys())}")
                logger.info(f"üîß –ü–ï–†–ï–†–ê–ë–û–¢–ö–ê: line_items in analysis={'line_items' in analysis}")
                if 'line_items' in analysis:
                    logger.info(f"üîß –ü–ï–†–ï–†–ê–ë–û–¢–ö–ê: line_items –Ω–∞–π–¥–µ–Ω—ã: {len(analysis['line_items'])} –ø–æ–∑–∏—Ü–∏–π")
                    for i, item in enumerate(analysis['line_items']):
                        logger.info(f"  {i+1}. {item.get('description', 'No description')} - {item.get('net_amount', 0)}")
                context.user_data['document_analysis'] = analysis  # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                logger.info(f"‚úÖ –ü–ï–†–ï–†–ê–ë–û–¢–ö–ê: –ù–æ–≤—ã–π analysis —Å {len(analysis.get('line_items', []))} line_items")
            else:
                logger.error(f"‚ùå –ü–ï–†–ï–†–ê–ë–û–¢–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å analysis")
        except Exception as e:
            logger.error(f"‚ùå –ü–ï–†–ï–†–ê–ë–û–¢–ö–ê: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è analysis: {e}")

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        try:
            org_id, org_name = determine_buyer_organization(analysis)
        except ValueError as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return

        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (—Å–Ω–∞—á–∞–ª–∞ —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ)
        vendor_id = (
            supplier_check.get('contact_id') or
            (supplier_check.get('cached_contact') or {}).get('contact_id') or
            (supplier_check.get('contact') or {}).get('contact_id')
        )
        if not vendor_id:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ
            supplier_name, supplier_vat = get_supplier_info(analysis)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ Zoho, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª—å
            found = find_supplier_in_zoho(org_id, supplier_name, supplier_vat)
            if found and found.get('contact_id'):
                vendor_id = found['contact_id']
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
                try:
                    success, msg = await create_supplier_from_document(analysis)
                    if not success:
                        await query.edit_message_text(f"‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ —Å–æ–∑–¥–∞–Ω: {msg}")
                        return
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å contact_id —á–µ—Ä–µ–∑ –∏–º—è
                    contact = get_contact_by_name(supplier_name, org_id)
                    vendor_id = contact.get('contact_id') if contact else None
                except Exception as ce:
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(ce)}")
                    return
        if not vendor_id:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
            return

        # –î–∞—Ç—ã
        def normalize_date(raw: Optional[str]) -> str:
            if not raw:
                return datetime.utcnow().strftime('%Y-%m-%d')
            raw = raw.strip()
            fmts = ["%d/%m/%Y", "%Y-%m-%d", "%d.%m.%Y", "%Y.%m.%d", "%m/%d/%Y", "%d-%m-%Y", "%Y/%m/%d", "%B %d, %Y", "%b %d, %Y"]
            for fmt in fmts:
                try:
                    return datetime.strptime(raw, fmt).strftime('%Y-%m-%d')
                except Exception:
                    continue
            cleaned = raw.replace(' ', '/').replace('.', '/').replace('-', '/')
            for fmt in ("%d/%m/%Y", "%Y/%m/%d", "%m/%d/%Y"):
                try:
                    return datetime.strptime(cleaned, fmt).strftime('%Y-%m-%d')
                except Exception:
                    continue
            return datetime.utcnow().strftime('%Y-%m-%d')

        # –ü—ã—Ç–∞–µ–º—Å—è –±—Ä–∞—Ç—å –¥–∞—Ç—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞, –∏–Ω–∞—á–µ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–ª—é—á–∞–º; —Ç–æ–ª—å–∫–æ –∑–∞—Ç–µ–º fallback=—Å–µ–≥–æ–¥–Ω—è
        bill_date = None
        if analysis.get('issue_date') or analysis.get('document_date') or analysis.get('date'):
            bill_date = normalize_date(analysis.get('issue_date') or analysis.get('document_date') or analysis.get('date'))
        else:
            txt = analysis.get('extracted_text') or ''
            m = re.search(r"(date of issue|issue date)\s*[:\-]*\s*([A-Za-z]{3,9}\s+\d{1,2},\s*\d{4}|\d{1,2}[./-]\d{1,2}[./-]\d{2,4}|\d{4}-\d{2}-\d{2})", txt, re.IGNORECASE)
            if m:
                bill_date = normalize_date(m.group(2))
        if not bill_date:
            bill_date = datetime.utcnow().strftime('%Y-%m-%d')

        due_date = None
        if analysis.get('due_date'):
            due_date = normalize_date(analysis.get('due_date'))
        else:
            txt = analysis.get('extracted_text') or ''
            m = re.search(r"(date due|due date|payment due)\s*[:\-]*\s*([A-Za-z]{3,9}\s+\d{1,2},\s*\d{4}|\d{1,2}[./-]\d{1,2}[./-]\d{2,4}|\d{4}-\d{2}-\d{2})", txt, re.IGNORECASE)
            if m:
                due_date = normalize_date(m.group(2))

        # –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞
        bill_number = (analysis.get('bill_number') or '').strip().rstrip('/') or None

        # Line items (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)
        logger.info(f"üå∏ DEBUG: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º line_items")
        line_items = []
        # –ü–æ–ø—ã—Ç–∫–∞ —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        logger.info(f"üå∏ DEBUG: –î–æ—Å—Ç–∏–≥–ª–∏ —Å–µ–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–≤–µ—Ç–æ–≤")
        flower_lines = analysis.get('flower_lines') or []
        logger.info(f"üå∏ DEBUG: –ù–∞—á–∞–ª—å–Ω—ã–µ flower_lines –∏–∑ analysis: {len(flower_lines)} –ø–æ–∑–∏—Ü–∏–π")
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä—ã –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º flower_lines –∏–∑ analysis)
        llm_cat = (analysis.get('product_category') or analysis.get('document_category') or '').upper()
        detected_flower_names = analysis.get('detected_flower_names') or []
        logger.info(f"üå∏ DEBUG: –í handlers - llm_cat='{llm_cat}', detected_flower_names={len(detected_flower_names)} —à—Ç")
        logger.info(f"üå∏ DEBUG: –£—Å–ª–æ–≤–∏–µ: llm_cat == 'FLOWERS' = {llm_cat == 'FLOWERS'}, bool(detected_flower_names) = {bool(detected_flower_names)}")
        
                # –û–ü–†–ï–î–ï–õ–Ø–ï–ú inclusive –î–û –ü–ê–†–°–ò–ù–ì–ê –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ perfect parser
        doc_text_lower = (analysis.get('extracted_text') or '').lower()
        
        # –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
        # 1. HIBISPOL (—Ü–≤–µ—Ç—ã): "cena brutto" –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ ‚Üí inclusive = True
        # 2. –û—Å—Ç–∞–ª—å–Ω—ã–µ: "warto≈õƒá netto" –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö ‚Üí inclusive = False
        
        hibispol_brutto_pattern = "cena brutto" in doc_text_lower or "cena przed" in doc_text_lower
        netto_price_pattern = "warto≈õƒá netto" in doc_text_lower and "cena jdn" in doc_text_lower
        
        # Fallback –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
        inclusive_markers = ["brutto", "gross", "tax inclusive", "cena brutto", "kwota brutto"]
        exclusive_markers = ["netto", "net price", "cena netto", "kwota netto", "tax exclusive"]
        
        inclusive_found = any(m in doc_text_lower for m in inclusive_markers)
        exclusive_found = any(m in doc_text_lower for m in exclusive_markers)
        
        logger.info(f"üå∏ DEBUG: –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã - hibispol_brutto: {hibispol_brutto_pattern}, netto_price: {netto_price_pattern}")
        logger.info(f"üå∏ DEBUG: Fallback –º–∞—Ä–∫–µ—Ä—ã - brutto: {inclusive_found}, netto: {exclusive_found}")
        
        # –ü–†–ò–û–†–ò–¢–ï–¢: —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if hibispol_brutto_pattern:
            inclusive = True
            logger.info("üå∏ DEBUG: HIBISPOL —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Üí INCLUSIVE (cena brutto)")
        elif netto_price_pattern:
            inclusive = False
            logger.info("üå∏ DEBUG: –ù–µ—Ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Üí EXCLUSIVE (warto≈õƒá netto)")
        # Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º EXCLUSIVE
        elif exclusive_found and not inclusive_found:
            inclusive = False
            logger.info("üå∏ DEBUG: Fallback –º–∞—Ä–∫–µ—Ä—ã ‚Üí EXCLUSIVE (—Ç–æ–ª—å–∫–æ netto)")
        elif inclusive_found and not exclusive_found:
            inclusive = True
            logger.info("üå∏ DEBUG: Fallback –º–∞—Ä–∫–µ—Ä—ã ‚Üí INCLUSIVE (—Ç–æ–ª—å–∫–æ brutto)")
        elif exclusive_found and inclusive_found:
            # –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ–±–∞, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç EXCLUSIVE (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)
            inclusive = False
            logger.info("üå∏ DEBUG: Fallback –º–∞—Ä–∫–µ—Ä—ã ‚Üí EXCLUSIVE (–æ–±–∞ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç netto)")
        else:
            inclusive = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é exclusive
            logger.info("üå∏ DEBUG: Fallback ‚Üí EXCLUSIVE (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        
        logger.info(f"üå∏ DEBUG: –ò—Ç–æ–≥–æ–≤—ã–π –Ω–∞–ª–æ–≥ {'INCLUSIVE (brutto)' if inclusive else 'EXCLUSIVE (netto)'}")
        
        if llm_cat == 'FLOWERS' and detected_flower_names:
            logger.info(f"üå∏ DEBUG: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (LLM cat={llm_cat}, flowers={len(detected_flower_names)})")
            flower_lines = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            raw_text = analysis.get('extracted_text') or ''
            try:
                # 1) –ù–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ –±–ª–æ–∫–∞–º (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º)
                parsed_blocks = parse_invoice_items(raw_text)
                logger.info(f"üå∏ DEBUG: parse_invoice_items –Ω–∞—à–µ–ª {len(parsed_blocks)} –ø–æ–∑–∏—Ü–∏–π")
                
                # 2) OCR –æ–∫–Ω–∞ –º–µ—Ç–æ–¥ (–≤—Å–µ–≥–¥–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
                parsed_ocr = extract_flower_lines_from_ocr(raw_text)
                logger.info(f"üå∏ DEBUG: extract_flower_lines_from_ocr –Ω–∞—à–µ–ª {len(parsed_ocr) if parsed_ocr else 0} –ø–æ–∑–∏—Ü–∏–π")
                
                # 3) –ù–û–í–´–ô –ü–û–õ–ù–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º (–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –≤—Å–µ 27 –ø–æ–∑–∏—Ü–∏–π)
                parsed_complete = extract_all_flower_positions(raw_text)
                formatted_complete = format_for_telegram_bot(parsed_complete) if parsed_complete else []
                logger.info(f"üå∏ DEBUG: extract_all_flower_positions –Ω–∞—à–µ–ª {len(formatted_complete)} –ø–æ–∑–∏—Ü–∏–π")
                
                # 4) –ü–†–Ø–ú–û–ô PDF –ü–ê–†–°–ï–† (–ë–ï–ó OCR) - –ù–û–í–´–ô!
                parsed_pdf = []
                logger.info(f"üå∏ DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º PDF –ø–∞—Ä—Å–µ—Ä - processed_path = {processed_path}")
                
                if processed_path:
                    logger.info(f"üå∏ DEBUG: processed_path –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º is_suitable_for_pdf_parsing...")
                    
                    if is_suitable_for_pdf_parsing(processed_path):
                        logger.info(f"üå∏ DEBUG: PDF –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è {processed_path}")
                        pdf_raw = extract_flower_positions_from_pdf(processed_path)
                        parsed_pdf = format_pdf_result(pdf_raw) if pdf_raw else []
                        logger.info(f"üå∏ DEBUG: PDF –ø–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª {len(parsed_pdf)} –ø–æ–∑–∏—Ü–∏–π")
                        
                        # –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ–∑–∏—Ü–∏–π PDF –ø–∞—Ä—Å–µ—Ä–∞
                        if parsed_pdf:
                            logger.info(f"üå∏ DEBUG PDF –î–ê–ù–ù–´–ï (–ø–µ—Ä–≤—ã–µ 5):")
                            for i, item in enumerate(parsed_pdf[:5]):
                                logger.info(f"  {i+1}. {item.get('name', 'N/A')} | qty={item.get('quantity', 0)} | price={item.get('price_net', 0)}")
                        
                        # –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                        key_positions = [5, 6, 11]  # DI ST ZEPPELIN, Di St Fl Moonaqua, R GR EXPLORER
                        for pos_idx in key_positions:
                            if pos_idx <= len(parsed_pdf):
                                item = parsed_pdf[pos_idx-1]
                                logger.info(f"üå∏ DEBUG PDF –ø–æ–∑.{pos_idx}: {item.get('name', 'N/A')} | qty={item.get('quantity', 0)} | price={item.get('price_net', 0)}")
                    else:
                        logger.info(f"üå∏ DEBUG: PDF –ø–∞—Ä—Å–∏–Ω–≥ –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è {processed_path}")
                else:
                    logger.info("üå∏ DEBUG: processed_path –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - PDF –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω")
                
                # üéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –õ–û–ì–ò–ö–ê: PDFPlumber –ü–ï–†–í–´–ô –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è
                best_result = None
                best_count = 0
                best_method = ""
                
                # üöÄ –ü–†–û–í–ï–†–Ø–ï–ú PDFPLUMBER –ü–ï–†–í–´–ú - –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–ª–æ–µ–º
                if processed_path:
                    try:
                        try:
                            from functions.pdfplumber_flower_parser import extract_flower_positions_pdfplumber, convert_to_zoho_format
                            parsed_pdfplumber_raw = extract_flower_positions_pdfplumber(processed_path)
                            parsed_pdfplumber = convert_to_zoho_format(parsed_pdfplumber_raw)
                        except ImportError:
                            logger.warning("‚ö†Ô∏è pdfplumber_flower_parser not found, skipping")
                            parsed_pdfplumber = None
                        if parsed_pdfplumber and len(parsed_pdfplumber) > 0:
                            best_result = parsed_pdfplumber
                            best_count = len(parsed_pdfplumber)
                            best_method = "pdfplumber_parser"
                            logger.info(f"üéØ –ü–†–ò–û–†–ò–¢–ï–¢: PDFPlumber –≤—ã–±—Ä–∞–Ω —Å {len(parsed_pdfplumber)} –ø–æ–∑–∏—Ü–∏—è–º–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π)")
                        else:
                            logger.info(f"üöÄ PDFPlumber: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ PDFPlumber: {e}")
                
                # –ï—Å–ª–∏ PDFPlumber –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                if not best_result:
                    logger.info("üîÑ PDFPlumber –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã...")
                    
                    # –ü—Ä–æ–±—É–µ–º PDFMiner –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
                    parsed_pdfminer = []
                    if processed_path:
                        try:
                            from functions.pdfminer_flower_parser import extract_flowers_with_pdfminer
                            parsed_pdfminer = extract_flowers_with_pdfminer(processed_path)
                            logger.info(f"üå∏ DEBUG: PDFMiner –Ω–∞—à–µ–ª {len(parsed_pdfminer)} –ø–æ–∑–∏—Ü–∏–π")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ PDFMiner: {e}")
                    
                    candidates = [
                        (parsed_blocks, "parse_invoice_items"),
                        (parsed_ocr, "extract_flower_lines_from_ocr"),
                        (formatted_complete, "extract_all_flower_positions"),
                        (parsed_pdf, "pdf_direct_parser"),
                        (parsed_pdfminer, "pdfminer_flower_parser")
                    ]
                    
                    for result, method_name in candidates:
                        if result and len(result) > best_count:
                            best_result = result
                            best_count = len(result)
                            best_method = method_name
                
                if best_result:
                    logger.info(f"üå∏ DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º {best_method} ({best_count} –ø–æ–∑–∏—Ü–∏–π)")
                    if best_method == "pdfplumber_parser":
                        # üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ò–î–ï–ê–õ–¨–ù–´–ô –ü–ê–†–°–ï–† –í–ú–ï–°–¢–û –°–õ–û–ñ–ù–û–ô –õ–û–ì–ò–ö–ò
                        try:
                            try:
                                from functions.perfect_flower_parser import extract_perfect_flower_data, convert_to_zoho_line_items
                                perfect_positions = extract_perfect_flower_data(processed_path)
                                # –ü–ï–†–ï–î–ê–ï–ú inclusive=True –¥–ª—è brutto –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ò org_id –¥–ª—è –Ω–∞–ª–æ–≥–æ–≤
                                line_items = convert_to_zoho_line_items(perfect_positions, inclusive_tax=inclusive, org_id=org_id)
                            except ImportError:
                                logger.warning("‚ö†Ô∏è perfect_flower_parser not found, using fallback")
                                flower_lines = best_result
                                skip_flower_processing = False
                                line_items = []
                            logger.info(f"üå∏ PERFECT: –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(line_items)} –ø–æ–∑–∏—Ü–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ (inclusive={inclusive})")
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—é –æ—Å—Ç–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è flower_lines
                            skip_flower_processing = True
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ perfect parser: {e}")
                            flower_lines = best_result
                            skip_flower_processing = False
                    elif best_method == "parse_invoice_items":
                        flower_lines = [
                            {
                                'name': p['name'],
                                'quantity': p['quantity'],
                                'price_net': p.get('unit_price_netto'),
                                'tax_percent': p.get('vat_percent', 8)
                            }
                            for p in best_result
                        ]
                        skip_flower_processing = False
                    else:
                        flower_lines = best_result
                        skip_flower_processing = False
                else:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ—Ç best_result
                    flower_lines = []
                    skip_flower_processing = False
                
                # 3) –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –º–∞–ª–æ –ø–æ–∑–∏—Ü–∏–π ‚Äî –ø—Ä–æ–±—É–µ–º Assistants API (–ù–û –ë–ï–ó –ü–û–í–¢–û–†–ù–û–ì–û OCR!)
                if len(flower_lines) < 15:  # –û–∂–∏–¥–∞–µ–º 27, –µ—Å–ª–∏ < 15 —Ç–æ –ø—Ä–æ–±—É–µ–º API
                    try:
                        if processed_path:
                            logger.info(f"üå∏ DEBUG: –ü—Ä–æ–±—É–µ–º Assistants API –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è (—Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {len(flower_lines)})")
                            logger.info(f"üîß DEBUG: –û–¢–ö–õ–Æ–ß–ï–ù Assistants API —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ OCR - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                            # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: assistant_data = analyze_proforma_via_agent(processed_path)
                            # –ü—Ä–∏—á–∏–Ω–∞: –∏–∑–±–µ–≥–∞–µ–º –¥–≤–æ–π–Ω–æ–≥–æ Google Vision OCR (—É–∂–µ –±—ã–ª —Å–¥–µ–ª–∞–Ω –≤ –Ω–∞—á–∞–ª–µ)
                            ai_flower_lines = []
                            logger.info(f"üå∏ DEBUG: Assistants API –ø—Ä–æ–ø—É—â–µ–Ω (–∏–∑–±–µ–≥–∞–µ–º –¥–≤–æ–π–Ω–æ–π OCR)")
                    except Exception as e:
                        print(f"üå∏ DEBUG: Assistants API failed: {e}")
            except Exception:
                pass
        else:
            # –î–ª—è –Ω–µ—Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            if not flower_lines:
                print(f"üå∏ DEBUG: –ù–µ—Ü–≤–µ—Ç–æ—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, flower_lines –ø—É—Å—Ç—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–±—ç–∫")
                pass  # –§–æ–ª–±—ç–∫ –ª–æ–≥–∏–∫–∞ –Ω–∏–∂–µ
        flowers_account_id = None
        try:
            accounts = get_accounts_cached_or_fetch(org_id, 'PARKENTERTAINMENT Sp. z o. o.' if org_id == '20082562863' else 'TaVie Europe O√ú')
            print(f"üîç DEBUG: loaded {len(accounts)} accounts for account selection")
            for acc in accounts:
                if (acc.get('account_name') or '').strip().lower() == 'flowers':
                    flowers_account_id = acc.get('account_id')
                    break
        except Exception:
            accounts = []
            pass

        # inclusive —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—ã—à–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ perfect parser

        # –ù–∞–¥—ë–∂–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        txt_lower = (analysis.get('extracted_text') or '').lower()
        occ_szt = txt_lower.count(' szt') + txt_lower.count('\nszt') + txt_lower.count('szt ')
        occ_pct = txt_lower.count('8%') + txt_lower.count('23%')
        occ_names = any(k in txt_lower for k in [
            'dahl', 'mondial', 'ruscus', 'gypsophila', 'alstr', 'tana', 'helian', 'delph'
        ])
        # –¶–≤–µ—Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ LLM-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–≤—ã—è–≤–ª–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º —Ü–≤–µ—Ç–æ–≤ + –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ —Ü–≤–µ—Ç–æ–≤
        llm_cat = (analysis.get('product_category') or analysis.get('document_category') or '').upper()
        detected_flower_names = analysis.get('detected_flower_names') or []
        supplier_name = (analysis.get('supplier_name') or '').lower()
        
        # üå∏ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: HIBISPOL –≤—Å–µ–≥–¥–∞ —Ü–≤–µ—Ç–æ—á–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫
        is_hibispol_flower_supplier = 'hibispol' in supplier_name
        
        print(f"üå∏ DEBUG: –í create_bill - llm_cat='{llm_cat}', detected_flower_names={len(detected_flower_names)} —à—Ç, hibispol={is_hibispol_flower_supplier}")
        is_flowers_doc = bool(flower_lines) or (llm_cat == 'FLOWERS' and bool(detected_flower_names)) or is_hibispol_flower_supplier

        print(f"üå∏ DEBUG: –ò—Ç–æ–≥–æ flower_lines –Ω–∞–π–¥–µ–Ω–æ: {len(flower_lines)}")
        
        # üéØ –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º perfect parser, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—é —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É
        if locals().get('skip_flower_processing', False):
            logger.info(f"üå∏ PERFECT: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É, line_items —É–∂–µ –≥–æ—Ç–æ–≤—ã ({len(line_items)} —à—Ç)")
        elif flower_lines:
            # –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ tax_id –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É
            def _tax_id_for(percent: float | int | None):
                try:
                    p = float(percent or 0)
                except Exception:
                    p = 0.0
                return find_tax_by_percent(org_id, p) if p > 0 else ("-1" if not inclusive else None)

            for fl in flower_lines:
                try:
                    name = str(fl.get('name') or fl.get('description') or 'Flowers')
                    qty = float(fl.get('quantity') or 1)
                    # VAT % –¥–ª—è —Å—Ç—Ä–æ–∫–∏: –∏–∑ –ª–∏–Ω–∏–∏, –∏–Ω–∞—á–µ –∏–∑ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –∏–Ω–∞—á–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ (—Ü–≤–µ—Ç—ã —á–∞—Å—Ç–æ 8%)
                    line_tax_percent = (
                        fl.get('tax_percent') or fl.get('vat_percent') or analysis.get('tax_rate')
                    )
                    if line_tax_percent is None:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º VAT –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º –≤ —Å–∞–º–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏
                        if '8%' in name or '8 %' in name or ' 8 ' in name:
                            line_tax_percent = 8
                        elif '23%' in name or '23 %' in name:
                            line_tax_percent = 23
                        else:
                            line_tax_percent = 8  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç –¥–ª—è —Ü–≤–µ—Ç–æ–≤
                            # TODO: –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å VAT –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞, –∞ –Ω–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º

                    # –ë–µ—Ä–µ–º —Ü–µ–Ω—É –ü–†–Ø–ú–û –∏–∑ PDF –ë–ï–ó –ø–µ—Ä–µ—Å—á–µ—Ç–∞ - Zoho —Å–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –Ω–∞–ª–æ–≥
                    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–≤–∫–ª—é—á–∞—è PDFPlumber)
                    price_net = (fl.get('price_net') or fl.get('unit_price') or 
                                fl.get('unit_price_netto') or fl.get('price_netto') or fl.get('rate'))
                    price_gross = (fl.get('price_gross') or fl.get('unit_price_brutto') or 
                                  fl.get('unit_price_brutto'))
                    
                    # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¶–ï–ù–´
                    if name == "Hydr M White Verena":  # –ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        logger.info(f"üîç PRICE DEBUG: name={name}")
                        logger.info(f"üîç PRICE DEBUG: fl keys={list(fl.keys())}")
                        logger.info(f"üîç PRICE DEBUG: fl.rate={fl.get('rate')}")
                        logger.info(f"üîç PRICE DEBUG: price_net={price_net}")
                        logger.info(f"üîç PRICE DEBUG: price_gross={price_gross}")
                        logger.info(f"üîç PRICE DEBUG: inclusive={inclusive}")
                    
                    try:
                        if inclusive:
                            # –î–æ–∫—É–º–µ–Ω—Ç —Å brutto —Ü–µ–Ω–∞–º–∏ - –±–µ—Ä–µ–º gross —Ü–µ–Ω—É –∫–∞–∫ –µ—Å—Ç—å
                            rate = float(price_gross or price_net or 0)
                        else:
                            # –î–æ–∫—É–º–µ–Ω—Ç —Å netto —Ü–µ–Ω–∞–º–∏ - –±–µ—Ä–µ–º net —Ü–µ–Ω—É –∫–∞–∫ –µ—Å—Ç—å  
                            rate = float(price_net or price_gross or 0)
                        
                        # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê
                        if name == "Hydr M White Verena":
                            logger.info(f"üîç PRICE DEBUG: final rate={rate}")
                            
                    except Exception as e:
                        rate = float(price_gross or price_net or 0)
                        if name == "Hydr M White Verena":
                            logger.info(f"üîç PRICE DEBUG: exception={e}, fallback rate={rate}")

                    item = {
                        "name": name[:200],
                        "description": name[:2000],
                        "quantity": qty,
                        "rate": rate,
                    }
                    # account
                    if flowers_account_id:
                        item["account_id"] = flowers_account_id
                    # –Ω–∞–ª–æ–≥ –Ω–∞ —Å—Ç—Ä–æ–∫—É
                    tid = _tax_id_for(line_tax_percent)
                    if tid:
                        item["tax_id"] = tid
                    else:
                        # –ï—Å–ª–∏ inclusive –∏ —Å—Ç–∞–≤–∫–∞ 0 ‚Äî —è–≤–Ω–æ –≤—ã–∫–ª—é—á–∏–º –Ω–∞–ª–æ–≥
                        item["tax_id"] = "-1"

                    line_items.append(item)
                except Exception:
                    continue
        else:
            # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ü–≤–µ—Ç–æ—á–Ω—ã–π, –Ω–æ —Å—Ç—Ä–æ–∫–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã ‚Äî –ø—Ä–æ–±—É–µ–º Assistants API –∫–∞–∫ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ
            if is_flowers_doc:
                try:
                    if processed_path:
                        assistant_data = analyze_proforma_via_agent(processed_path)
                        ai_flower_lines = assistant_data.get('flower_lines') or []
                        if ai_flower_lines:
                            flower_lines = ai_flower_lines
                            is_flowers_doc = True
                            # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –≤—ã—à–µ
                            def _tax_id_for(percent: float | int | None):
                                try:
                                    p = float(percent or 0)
                                except Exception:
                                    p = 0.0
                                return find_tax_by_percent(org_id, p) if p > 0 else ("-1" if not inclusive else None)
                            for fl in flower_lines:
                                try:
                                    name = str(fl.get('name') or fl.get('description') or 'Flowers')
                                    qty = float(fl.get('quantity') or 1)
                                    line_tax_percent = (
                                        fl.get('tax_percent') or fl.get('vat_percent') or analysis.get('tax_rate') or 8
                                    )
                                    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö
                                    price_net = (fl.get('unit_price_net') or fl.get('price_net') or 
                                                fl.get('price_netto') or fl.get('unit_price_netto'))
                                    price_gross = (fl.get('unit_price_gross') or fl.get('price_gross') or 
                                                  fl.get('unit_price_brutto'))
                                    
                                    if inclusive and price_gross:
                                        rate = float(price_gross)
                                    elif price_net:
                                        rate = float(price_net)
                                    else:
                                        # PDFPlumber —Ñ–æ—Ä–º–∞—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'rate' –Ω–∞–ø—Ä—è–º—É—é
                                        rate = float(fl.get('rate') or fl.get('unit_price') or 0)
                                    item = {"name": name[:200], "description": name[:2000], "quantity": qty, "rate": rate}
                                    if flowers_account_id:
                                        item["account_id"] = flowers_account_id
                                    tid = _tax_id_for(line_tax_percent)
                                    if tid:
                                        item["tax_id"] = tid
                                    else:
                                        item["tax_id"] = "-1"
                                    line_items.append(item)
                                except Exception:
                                    continue
                except Exception:
                    pass
                if not line_items:
                    # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –Ω–µ —Å—Ç–∏—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    try:
                        await query.answer()
                    except Exception:
                        pass
                    await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∫–∞–Ω–∞ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á—à–µ ‚Äî —Å—Ç—Ä–æ–∫–∏ –Ω–µ –±—É–¥—É—Ç —Å–æ–±—Ä–∞–Ω—ã –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
                    return
            # üéØ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ LLM
            logger.info(f"üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            llm_line_items = analysis.get('line_items') or []
            logger.info(f"üîç DEBUG: LLM –Ω–∞—à–µ–ª {len(llm_line_items)} –ø–æ–∑–∏—Ü–∏–π")
            
            if llm_line_items:
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ line_item –∏–∑ LLM
                for i, llm_item in enumerate(llm_line_items):
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ LLM - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª—å—Å–∫–æ–≥–æ –¥–ª—è PARKENTERTAINMENT
                        our_company = analysis.get('our_company', '').lower()
                        if 'parkentertainment' in our_company:
                            # –î–ª—è –ø–æ–ª—å—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª—å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
                            name = (
                                llm_item.get('description') or  # –ü–æ–ª—å—Å–∫–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª
                                llm_item.get('description_en') or 
                                analysis.get('item_description') or
                                analysis.get('service_description') or 
                                f'Service {i+1}'
                            )
                        else:
                            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
                            name = (
                                llm_item.get('description_en') or 
                                llm_item.get('description') or 
                                analysis.get('item_description') or
                                analysis.get('service_description') or 
                                f'Service {i+1}'
                            )
                        quantity = float(llm_item.get('quantity') or 1)
                        net_amount = float(llm_item.get('net_amount') or 0)
                        vat_rate = float(llm_item.get('vat_rate') or 0)
                        vat_amount = float(llm_item.get('vat_amount') or 0)
                        gross_amount = float(llm_item.get('gross_amount') or 0)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º rate –Ω–∞ –æ—Å–Ω–æ–≤–µ inclusive/exclusive
                        if inclusive:
                            # INCLUSIVE: –Ω–∞–ª–æ–≥ —É–∂–µ –≤–∫–ª—é—á—ë–Ω –≤ —Ü–µ–Ω—É
                            rate = gross_amount / quantity if quantity > 0 else gross_amount
                        else:
                            # EXCLUSIVE: –Ω–∞–ª–æ–≥ –ù–ï –≤–∫–ª—é—á—ë–Ω –≤ —Ü–µ–Ω—É 
                            rate = net_amount / quantity if quantity > 0 else net_amount
                        
                        logger.info(f"üîç DEBUG: –ü–æ–∑–∏—Ü–∏—è {i+1}: {name} - {rate} ({'INCLUSIVE' if inclusive else 'EXCLUSIVE'}) VAT: {vat_rate}%")
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º account –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
                        account_id = None
                        try:
                            account_result = llm_select_account(
                                account_names=[acc.get('account_name', '') for acc in accounts],
                                context_text=llm_item.get('description', ''),
                                supplier_name=analysis.get('supplier_name', ''),
                                category=analysis.get('product_category', '')
                            )
                            if account_result and account_result.get('name'):
                                for acc in accounts:
                                    if acc.get('account_name') == account_result['name']:
                                        account_id = acc.get('account_id')
                                        break
                                logger.info(f"üîç DEBUG: Account –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {i+1}: {account_result['name']} (ID: {account_id})")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è account –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {i+1}: {e}")
                        
                        # –°–æ–∑–¥–∞–µ–º line_item
                        item = {
                            "name": name[:200],
                            "description": name[:2000], 
                            "quantity": quantity,
                            "rate": rate
                        }
                        
                        if account_id:
                            item["account_id"] = account_id
                            
                        # –î–æ–±–∞–≤–ª—è–µ–º tax_id –µ—Å–ª–∏ VAT > 0
                        if vat_rate > 0:
                            tax_id = find_tax_by_percent(org_id, vat_rate)
                            if tax_id:
                                item["tax_id"] = tax_id
                            else:
                                item["tax_id"] = "-1" if not inclusive else None
                        else:
                            # VAT = 0%
                            item["tax_id"] = "-1" if not inclusive else None
                            
                        line_items.append(item)
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ {i+1}: {e}")
                        continue
                        
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(line_items)} –ø–æ–∑–∏—Ü–∏–π –∏–∑ LLM analysis")
                
            else:
                # –§–æ–ª–±—ç–∫: —É—Å–ª—É–≥–∏/—Ç–æ–≤–∞—Ä—ã –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ line_items)
                logger.info(f"üîç DEBUG: Fallback –∫ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏")
                # –û–ø–∏—Å–∞–Ω–∏–µ: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç item_description (—Å VIN), –∑–∞—Ç–µ–º service_description
                desc = (
                    analysis.get('item_description') or 
                    analysis.get('service_description') or 
                    analysis.get('item_details')
                )
            if not desc:
                raw_text = analysis.get('extracted_text') or ''
                m = re.search(r"Description\s*[\r\n]+(.{3,120})", raw_text, re.IGNORECASE)
                if m:
                    desc = m.group(1).strip()
            if not desc:
                desc = 'Goods/Services'
            # Rate: Anchor Unit price
            rate = None
            try:
                raw_text = analysis.get('extracted_text') or ''
                m = re.search(r"Unit\s*price\s*\D*([0-9]+[.,][0-9]{2})", raw_text, re.IGNORECASE)
                if m:
                    rate = float(m.group(1).replace(',', '.'))
            except Exception:
                rate = None
            if rate is None:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ï–î–ò–ù–ò–ß–ù–´–ï —Ü–µ–Ω—ã, –∞ –Ω–µ –æ–±—â–∏–µ —Å—É–º–º—ã –¥–ª—è rate
                if inclusive:
                    # –î–ª—è INCLUSIVE –Ω–∞–ª–æ–≥ –£–ñ–ï –≤–∫–ª—é—á—ë–Ω –≤ –µ–¥–∏–Ω–∏—á–Ω—É—é —Ü–µ–Ω—É ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º unit_price_brutto
                    rate = float(analysis.get('unit_price_brutto') or analysis.get('gross_amount') or analysis.get('total_amount') or 0)
                    logger.info(f"üîß FALLBACK INCLUSIVE: rate={rate} (unit_price_brutto - –Ω–∞–ª–æ–≥ —É–∂–µ –≤–∫–ª—é—á—ë–Ω)")
                else:
                    # –î–ª—è EXCLUSIVE –Ω–∞–ª–æ–≥ –ù–ï –≤–∫–ª—é—á—ë–Ω –≤ –µ–¥–∏–Ω–∏—á–Ω—É—é —Ü–µ–Ω—É ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º unit_price_netto
                    rate = float(analysis.get('unit_price_netto') or analysis.get('net_amount') or analysis.get('total_amount') or 0)
                    logger.info(f"üîß FALLBACK EXCLUSIVE: rate={rate} (unit_price_netto - Zoho –¥–æ–±–∞–≤–∏—Ç –Ω–∞–ª–æ–≥)")
            item = {"name": desc[:200], "description": desc[:2000], "quantity": 1, "rate": rate}
            line_items.append(item)

        # –ù–∞–∑–Ω–∞—á–∞–µ–º account_id –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏: LLM-–≤—ã–±–æ—Ä –∏–∑ –∫—ç—à–∞
            from functions.llm_document_extractor import llm_select_account
        try:
            chosen_account_id = None
            acc_names = [a.get('account_name') for a in accounts if (a.get('account_name'))]
            print(f"üîç DEBUG: total accounts={len(accounts)}, account_names={len(acc_names)}")
            llm_pick = {}
            try:
                context_for_account = analysis.get('extracted_text') or ''
                llm_pick = llm_select_account([str(n) for n in acc_names], context_for_account, supplier_name=analysis.get('supplier_name') or '', category=(analysis.get('document_category') or ''))
                print(f"üîç DEBUG llm_select_account: pick={llm_pick}, acc_names={acc_names[:3]}...")
            except Exception as e:
                print(f"‚ùå llm_select_account failed: {e}")
                llm_pick = {}
            if llm_pick and llm_pick.get('name') in acc_names and float(llm_pick.get('confidence') or 0) >= 0.6:
                print(f"‚úÖ LLM –≤—ã–±—Ä–∞–ª –≤–∞–ª–∏–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {llm_pick['name']}")
                for acc in accounts:
                    if acc.get('account_name') == llm_pick['name']:
                        chosen_account_id = acc.get('account_id')
                        break
            else:
                if llm_pick:
                    print(f"‚ùå LLM –≤—ã–±—Ä–∞–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç '{llm_pick.get('name')}' —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {llm_pick.get('confidence')}")
            if not chosen_account_id:
                # –¥–µ—Ñ–æ–ª—Ç–Ω–æ ‚Äî –ø–µ—Ä–≤—ã–π —Ä–∞—Å—Ö–æ–¥–Ω—ã–π —Å—á—ë—Ç
                for acc in accounts:
                    if (acc.get('account_type') or '').strip().lower() in {'expense', 'cost of goods sold'}:
                        chosen_account_id = acc.get('account_id')
                        break

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è account_id
            llm_cat = (analysis.get('document_category') or '').upper()
            detected_flower_names = analysis.get('detected_flower_names') or []
            
            for li in line_items:
                if 'account_id' not in li or not li['account_id']:
                    # –¢–æ–ª—å–∫–æ –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º flowers_account_id
                    if (llm_cat == 'FLOWERS' and detected_flower_names and flowers_account_id):
                        li['account_id'] = flowers_account_id
                    else:
                        # –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM-–≤—ã–±—Ä–∞–Ω–Ω—ã–π account
                        li['account_id'] = chosen_account_id
        except Exception:
            pass

        # –ù–∞–ª–æ–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–æ–ª–±–µ–∫): –µ—Å–ª–∏ —É —Å—Ç—Ä–æ–∫–∏ –µ—â—ë –Ω–µ—Ç tax_id
        try:
            tax_percent = float(analysis.get('tax_rate') or 0)
        except Exception:
            tax_percent = 0.0
        tax_id_global = find_tax_by_percent(org_id, tax_percent) if tax_percent > 0 else None
        for li in line_items:
            if 'tax_id' not in li:
                if tax_id_global:
                    li['tax_id'] = tax_id_global
                else:
                    li['tax_id'] = "-1" if not inclusive else li.get('tax_id')

        # Branch (–¥–ª—è PARKENTERTAINMENT —Ü–≤–µ—Ç—ã)
        llm_cat = (analysis.get('product_category') or analysis.get('document_category') or '').upper()
        detected_flower_names = analysis.get('detected_flower_names') or []
        supplier_name = (analysis.get('supplier_name') or '').lower()
        
        # üå∏ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: HIBISPOL –≤—Å–µ–≥–¥–∞ —Ü–≤–µ—Ç–æ—á–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫  
        is_hibispol_flower_supplier = 'hibispol' in supplier_name
        
        is_flowers_doc = bool(flower_lines) or (llm_cat == 'FLOWERS' and bool(detected_flower_names)) or is_hibispol_flower_supplier
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º branch_id —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ BranchManager
        branch_id = None
        branch_reason = ""
        
        if org_id == '20082562863':  # PARKENTERTAINMENT
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π BranchManager –¥–ª—è —É–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤–µ—Ç–æ–∫
                from src.domain.services.branch_manager import BranchManager
                from functions.zoho_api import get_access_token
                
                access_token = get_access_token()
                branch_manager = BranchManager(access_token)
                
                if is_flowers_doc:
                    # –£–º–Ω—ã–π –≤—ã–±–æ—Ä –≤–µ—Ç–∫–∏ –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                    doc_text_full = analysis.get('extracted_text') or ''
                    branch_id, branch_reason = branch_manager.get_branch_for_flower_document(
                        org_id, supplier_name, doc_text_full
                    )
                    logger.info(f"üå∏ SMART BRANCH: {branch_reason}")
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - Head Office
                    head_office = branch_manager.get_head_office(org_id)
                    if head_office:
                        branch_id = head_office.branch_id
                        branch_reason = f"Head Office: {head_office.name}"
                        logger.info(f"üè¢ HEAD OFFICE: {head_office.name}")
                    
                if branch_id:
                    logger.info(f"‚úÖ BRANCH MANAGER: –í—ã–±—Ä–∞–Ω–∞ –≤–µ—Ç–∫–∞ {branch_id} ({branch_reason})")
                else:
                    logger.warning(f"‚ö†Ô∏è BRANCH MANAGER: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –≤–µ—Ç–∫–∞ ({branch_reason})")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ BranchManager: {e}")
                logger.info("üîÑ Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ –ø–æ–∏—Å–∫–∞ –≤–µ—Ç–æ–∫...")
                
                # Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ (–Ω–æ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∞–∫—Ç–∏–≤–Ω—ã—Ö)
                doc_text_full = (analysis.get('extracted_text') or '').lower()
                supplier_address = (analysis.get('supplier_address') or '').lower()
                
                if is_flowers_doc:
                    supplier_name_lower = (analysis.get('supplier_name') or '').lower()
                    
                    if 'hibispol' in supplier_name_lower and ('wile≈Ñska' in doc_text_full or 'wile≈Ñska' in supplier_address or 'praga' in doc_text_full or 'praga' in supplier_address):
                        preferred = ["Wile≈Ñska"]
                        logger.info("üå∏ FALLBACK: HIBISPOL + Wile≈Ñska/Praga –º–∞—Ä–∫–µ—Ä ‚Üí branch Wile≈Ñska")
                    elif 'browary' in doc_text_full or 'browary' in supplier_address:
                        preferred = ["Iris flowers atelier"] 
                        logger.info("üå∏ FALLBACK: –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ä–∫–µ—Ä Browary ‚Üí branch Iris flowers atelier")
                    elif 'hibispol' in supplier_name_lower:
                        preferred = ["Wile≈Ñska"]
                        logger.info("üå∏ FALLBACK: HIBISPOL (–±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤) ‚Üí branch Wile≈Ñska")
                    else:
                        preferred = ["Iris flowers atelier"]
                        logger.info("üå∏ FALLBACK: –¶–≤–µ—Ç–æ—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–µ Hibispol) ‚Üí branch Iris flowers atelier")
                    
                    branch_id = find_branch_id(org_id, preferred)
                    branch_reason = f"Fallback –ø–æ–∏—Å–∫: {preferred}"
                else:
                    preferred = ["head office"]
                    branch_id = find_branch_id(org_id, preferred)
                    branch_reason = f"Fallback Head Office: {preferred}"
                
                if branch_id:
                    logger.info(f"üå∏ FALLBACK: –ù–∞–π–¥–µ–Ω branch_id: {branch_id}")
                else:
                    logger.info("üå∏ FALLBACK: Branch –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ–∫–∞–∂–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞")

        # Inclusive tax —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤—ã—à–µ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º/–ª–∏–Ω–∏—è–º
        
        logger.info(f"üå∏ DEBUG: –ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º bill_payload, line_items={len(line_items)}")
        print(f"üå∏ DEBUG: –°–æ–∑–¥–∞—ë–º bill_payload —Å {len(line_items)} line_items")
        
        # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï LINE_ITEMS –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô
        for i, item in enumerate(line_items[:5]):  # –ü–µ—Ä–≤—ã–µ 5 –ø–æ–∑–∏—Ü–∏–π
            logger.info(f"LINE_ITEM[{i+1}]: {item.get('name', 'NO_NAME')} | qty={item.get('quantity', 'NO_QTY')} | rate={item.get('rate', 'NO_RATE')} | account_id={item.get('account_id', 'NO_ACC')}")
        if len(line_items) > 5:
            logger.info(f"... –∏ –µ—â–µ {len(line_items) - 5} –ø–æ–∑–∏—Ü–∏–π")

        bill_payload = {
            "vendor_id": vendor_id,
            "bill_number": bill_number,
            "date": bill_date,
            "due_date": due_date,
            "line_items": line_items,
            "notes": analysis.get('notes_for_bill') or analysis.get('notes') or '',
        }
        # –ü–µ—Ä–µ–¥–∞–µ–º branch_id –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –Ω–∞—Å—Ç–æ—è—â–∏–π branch
        if branch_id:
            bill_payload["branch_id"] = branch_id
            logger.info(f"üå∏ DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º branch_id: {branch_id}")
        else:
            logger.info("üå∏ DEBUG: Branch_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º Head Office")
        bill_payload["is_inclusive_tax"] = bool(inclusive)

        # –ï—Å–ª–∏ branch –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¢–û–õ–¨–ö–û –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ç–æ–∫
        if is_flowers_doc and not branch_id and org_id == '20082562863':
            logger.info("üå∏ DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ branch –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º payload –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ branch
            context.user_data['pending_bill_payload'] = bill_payload
            context.user_data['pending_analysis'] = analysis
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¢–û–õ–¨–ö–û –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ç–æ–∫ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ 17.08.2025)
            # Head Office (281497000000355003) - –ê–ö–¢–ò–í–ù–´–ô (PRIMARY)
            # Iris Flowers & Wine (281497000004535005) - –ê–ö–¢–ò–í–ù–´–ô
            # Iris flowers atelier (281497000000355063) - –ê–ö–¢–ò–í–ù–´–ô  
            # –ù–ï –≤–∫–ª—é—á–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: Wile≈Ñska, Iris Flowers Arkadia
            branch_keyboard = [
                [InlineKeyboardButton("‚úÖ Head Office (primary)", callback_data="choose_branch_281497000000355003")],
                [InlineKeyboardButton("‚úÖ Iris Flowers & Wine", callback_data="choose_branch_281497000004535005")],
                [InlineKeyboardButton("‚úÖ Iris flowers atelier", callback_data="choose_branch_281497000000355063")]
            ]
            reply_markup = InlineKeyboardMarkup(branch_keyboard)
            
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üå∏ –í—ã–±–µ—Ä–∏—Ç–µ –ê–ö–¢–ò–í–ù–£–Æ –≤–µ—Ç–∫—É –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n\n‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ—Ç–∫–∏",
                reply_markup=reply_markup
            )
            return
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å account, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            missing_account = any(not li.get('account_id') for li in line_items)
            if missing_account:
                # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ (expense/COGS)
                name_to_id = { (acc.get('account_name') or '').strip(): acc.get('account_id') for acc in (accounts or []) }
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
                prioritized: list[tuple[str, str]] = []
                # –î–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω—ã–º–∏/COGS
                for acc in (accounts or []):
                    t = (acc.get('account_type') or '').strip().lower()
                    nm = (acc.get('account_name') or '').strip()
                    if t in {'expense', 'cost of goods sold'} and (nm, acc.get('account_id')) not in prioritized:
                        prioritized.append((nm, acc.get('account_id')))

                # –û–≥—Ä–∞–Ω–∏—á–∏–º —Å–ø–∏—Å–æ–∫ –∏ –ø–æ—Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                top = prioritized[:8] if prioritized else []
                if not top:
                    await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π account. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—á–µ—Ç–æ–≤ –≤ Zoho.")
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º pending bill
                context.user_data['pending_bill'] = {
                    'org_id': org_id,
                    'vendor_id': vendor_id,
                    'payload': bill_payload,
                }
                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –∞–∫–∫–∞—É–Ω—Ç–∞
                kb = []
                for nm, aid in top:
                    kb.append([InlineKeyboardButton(f"üíº {nm}", callback_data=f"choose_account:{aid}")])
                kb.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_bill")])
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç (account) –¥–ª—è —Å—Ç—Ä–æ–∫ BILL:", reply_markup=InlineKeyboardMarkup(kb))
                return
        except Exception:
            pass

        # –°–æ–∑–¥–∞–µ–º BILL (account_id —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω)
        import requests
        from functions.zoho_api import get_access_token
        try:
            logger.info(f"Creating BILL payload preview: vendor_id={vendor_id}, items={len(line_items)}, org={org_id}")
        except Exception:
            pass
        access_token = get_access_token()
        url = f"https://www.zohoapis.eu/books/v3/bills?organization_id={org_id}"
        headers = {"Authorization": f"Zoho-oauthtoken {access_token}", "Content-Type": "application/json"}
        r = requests.post(url, headers=headers, json=bill_payload)
        
        # –ï—Å–ª–∏ 401 - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
        if r.status_code == 401:
            logger.info("üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è—é...")
            from functions.zoho_api import get_access_token
            new_token = get_access_token()
            if new_token:
                headers['Authorization'] = f"Zoho-oauthtoken {new_token}"
                r = requests.post(url, headers=headers, json=bill_payload)
                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {r.status_code}")
        
        try:
            logger.info(f"BILL response: status={r.status_code} body={(r.text or '')[:400]}")
        except Exception:
            pass
        data = r.json() if r.content else {}
        if r.status_code not in (200, 201) or 'bill' not in data:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bill: {r.status_code} {data}")
            return

        bill = data['bill']
        bill_id = bill.get('bill_id')

        # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º PDF –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –±–∏–ªlu
        if processed_path and os.path.exists(processed_path):
            logger.info(f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª {processed_path} –∫ bill {bill_id}")
            attach_url = f"https://www.zohoapis.eu/books/v3/bills/{bill_id}/attachment?organization_id={org_id}"
            
            try:
                with open(processed_path, 'rb') as pdf_file:
                    files = {"attachment": pdf_file}
                    headers_att = {"Authorization": f"Zoho-oauthtoken {access_token}"}
                    
                    attach_response = requests.post(attach_url, headers=headers_att, files=files)
                    logger.info(f"üìé ATTACH response: status={attach_response.status_code}")
                    
                    if attach_response.status_code in [200, 201]:
                        logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –±–∏–ªlu (—Å—Ç–∞—Ç—É—Å {attach_response.status_code})")
                        logger.info(f"üìé –û—Ç–≤–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è: {attach_response.text}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {attach_response.status_code} - {attach_response.text}")
                        
            except Exception as attach_error:
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {attach_error}")
        else:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è: {processed_path}")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–û—Ç–∫—Ä—ã—Ç—å –≤ Zoho¬ª
        # üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–ó–ò–¶–ò–Ø–• (–µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π)
        positions_info = ""
        if len(line_items) > 1:
            positions_info = f"\n\nüìä –°–æ–∑–¥–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(line_items)}\n"
            for i, item in enumerate(line_items[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                name = item.get('name', 'N/A')[:25]  # –ö–æ—Ä–æ—á–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                rate = item.get('rate', 0)
                qty = item.get('quantity', 1)
                positions_info += f"{i+1}. {name} - {rate:.2f}√ó{qty}\n"
            if len(line_items) > 3:
                positions_info += f"... –∏ –µ—â—ë {len(line_items) - 3} –ø–æ–∑–∏—Ü–∏–π\n"
        
        open_url = f"https://books.zoho.eu/app/{org_id}#/bills/{bill_id}?filter_by=Status.All&per_page=200&sort_column=date&sort_order=D"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –≤ Zoho", url=open_url)],
            [InlineKeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ WorkDrive", callback_data="v2_upload_workdrive")]
        ])
        success_message = f"‚úÖ Bill —Å–æ–∑–¥–∞–Ω: #{bill_number or bill_id}{positions_info}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–∏–º–∏—Ç Telegram: 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(success_message) > 4000:
            success_message = f"‚úÖ Bill —Å–æ–∑–¥–∞–Ω: #{bill_number or bill_id}\n\nüìä –°–æ–∑–¥–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(line_items)}"
        
        await context.bot.send_message(chat_id=query.message.chat_id, text=success_message, reply_markup=kb)

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bill: {str(e)}")


async def handle_smart_full_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–º–Ω—ã–π –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"""
    if not update.callback_query or not context.user_data:
        return

    query = update.callback_query
    result = context.user_data.get('smart_result')

    if not result:
        await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        full_report = generate_full_report(result)
        await query.edit_message_text(full_report)

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")


def generate_full_report(result) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        analysis = result.document_analysis
        report = "üìã –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –ü–û –î–û–ö–£–ú–ï–ù–¢–£\n\n"

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        report += f"üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {analysis.get('document_type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n"
        report += f"üìÑ –ù–æ–º–µ—Ä: {analysis.get('bill_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        report += f"üìÖ –î–∞—Ç–∞: {analysis.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        report += f"üí∞ –°—É–º–º–∞: {analysis.get('total_amount', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        report += f"üí± –í–∞–ª—é—Ç–∞: {analysis.get('currency', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
        supplier = analysis.get('supplier', {})
        if supplier:
            report += "üè¢ –ü–û–°–¢–ê–í–©–ò–ö:\n"
            report += f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {supplier.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            report += f"   VAT: {supplier.get('vat', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            report += f"   Email: {supplier.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            report += f"   –¢–µ–ª–µ—Ñ–æ–Ω: {supplier.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            report += f"   –ê–¥—Ä–µ—Å: {supplier.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        vin = analysis.get('vin')
        car_model = analysis.get('car_model')
        if vin or car_model:
            report += "üöó –ê–í–¢–û–ú–û–ë–ò–õ–¨:\n"
            report += f"   VIN: {vin or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            report += f"   –ú–æ–¥–µ–ª—å: {car_model or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            report += f"   –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {analysis.get('cost_price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"

        return report

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"


def generate_detailed_info(result) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    try:
        analysis = result.document_analysis
        info = "üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
        for key, value in analysis.items():
            if value and value != "–ù–µ —É–∫–∞–∑–∞–Ω" and value != "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
                info += f"{key}: {value}\n"

        return info

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if not update.message:
        return

    help_text = """
ü§ñ AI Invoice Bot - –ü–æ–º–æ—â—å

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ—Ç –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ ITEM

üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å—á–µ—Ç–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Zoho Books
‚Ä¢ –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
"""
    await update.message.reply_text(help_text)


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    if not update.message:
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π
        status_text = "üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´\n\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
            SmartDocumentProcessor()
            status_text += "‚úÖ SmartDocumentProcessor - –¥–æ—Å—Ç—É–ø–µ–Ω\n"
        except Exception:
            status_text += "‚ùå SmartDocumentProcessor - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
            create_supplier_from_document
            status_text += "‚úÖ ContactCreator - –¥–æ—Å—Ç—É–ø–µ–Ω\n"
        except Exception:
            status_text += "‚ùå ContactCreator - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"

        status_text += "\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"

        await update.message.reply_text(status_text)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")


def setup_handlers(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_pdf))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    # –í–≤–æ–¥ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è ITEM –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    application.add_handler(CallbackQueryHandler(handle_callback))


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    import tempfile
    import os
    from PIL import Image
    import io
    
    if not update.message or not update.message.photo:
        return
    
    try:
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo = update.message.photo[-1]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text("üì∏ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file = await photo.get_file()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp_file:
            await file.download_to_drive(tmp_file.name)
            temp_photo_path = tmp_file.name
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PDF –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as pdf_file:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PDF
                image = Image.open(temp_photo_path)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if image.mode != 'RGB':
                    image = image.convert('RGB')
                image.save(pdf_file.name, 'PDF')
                temp_pdf_path = pdf_file.name
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.edit_text("üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PDF...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.edit_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...")
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è update.message
            from functions.smart_document_processor import SmartDocumentProcessor
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
            processor = SmartDocumentProcessor()
            result = await processor.process_document(temp_pdf_path)
            
            if not result or not result.success:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['document_analysis'] = result.document_analysis
            context.user_data['file_path'] = temp_pdf_path  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å PDF
            context.user_data['file_name'] = f"photo_{photo.file_id[:10]}.pdf"
            context.user_data['supplier_search_result'] = getattr(result, 'supplier_search_result', None)
            context.user_data['contact_comparison'] = result.contact_comparison
            context.user_data['sku_check_result'] = getattr(result, 'sku_check', None)
            
            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.delete()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–ø—Ä—è–º—É—é
            analysis = result.document_analysis
            
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ  
            supplier_name = analysis.get('supplier_name', '')
            supplier_vat = analysis.get('supplier_vat', '')
            buyer_name = analysis.get('buyer_name', '')
            buyer_vat = analysis.get('buyer_vat', '')
            document_type = analysis.get('document_type_readable') or analysis.get('document_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
            our_company = analysis.get('our_company', '')
            org_name = 'TaVie Europe O√ú' if 'tavie' in our_company.lower() else 'PARKENTERTAINMENT'
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            telegram_message = f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–†–ê–ë–û–¢–ö–ò –§–û–¢–û –î–û–ö–£–ú–ï–ù–¢–ê\n\n"
            telegram_message += f"üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_type}\n"
            telegram_message += f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org_name}\n"
            telegram_message += "‚îÄ" * 40 + "\n\n"
            
            if supplier_name:
                telegram_message += f"üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_name}\n"
            if buyer_name and buyer_name != supplier_name:
                telegram_message += f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_name}\n"
            if supplier_vat:
                telegram_message += f"üè∑Ô∏è VAT: {supplier_vat}\n"
                
            # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if analysis.get('total_amount'):
                telegram_message += f"üí∞ –°—É–º–º–∞: {analysis.get('total_amount', 0)} {analysis.get('currency', 'EUR')}\n"
            
            # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞
            if result.contact_comparison and result.contact_comparison.exists_in_cache:
                telegram_message += "\n‚úÖ –ö–û–ù–¢–ê–ö–¢ –ù–ê–ô–î–ï–ù –í –°–ò–°–¢–ï–ú–ï\n"
            else:
                telegram_message += "\nüÜï –ù–û–í–´–ô –ö–û–ù–¢–ê–ö–¢\n"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not (result.contact_comparison and result.contact_comparison.exists_in_cache):
                buttons.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="smart_create_contact")])
            else:
                buttons.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="smart_update_contact")])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏
            doc_type_lower = str(analysis.get('document_type', '')).lower()
            extracted_text = (analysis.get('extracted_text') or '').lower()
            supplier_name = (analysis.get('supplier_name') or '').lower()
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è PARAGON FISKALNY —Ç–æ–ª—å–∫–æ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
            is_paragon = (
                'paragon' in doc_type_lower or 
                'fiskalny' in doc_type_lower or
                'paragon fiskalny' in extracted_text or
                ('paragon' in extracted_text and 'fiskalny' in extracted_text) or
                'receipt' in doc_type_lower or
                'paragon fiskalny' in doc_type_lower
            )
            
            # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è Expense –¥–ª—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                buttons.append([InlineKeyboardButton("üí∞ Create Expense", callback_data="smart_create_expense")])
            
            if is_paragon:
                # –î–ª—è —á–µ–∫–æ–≤ —Ç–æ–ª—å–∫–æ Expense (–±–µ–∑ Bill)
                pass
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                is_final_invoice = any(term in doc_type_lower for term in ['invoice', 'faktura', 'rechnung', 'facture', 'fattura'])
                is_not_proforma = 'proforma' not in doc_type_lower and 'pro-forma' not in doc_type_lower and 'pro forma' not in doc_type_lower
                is_not_contract = 'contract' not in doc_type_lower and 'agreement' not in doc_type_lower and 'umowa' not in doc_type_lower
                is_not_credit_note = 'credit' not in doc_type_lower and 'nota' not in doc_type_lower
                is_not_retainer = 'retainer' not in doc_type_lower
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Create BILL —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤
                if (is_final_invoice and is_not_proforma and is_not_contract and 
                    is_not_credit_note and is_not_retainer and analysis.get('bill_number') and 
                    analysis.get('total_amount')):
                    buttons.append([InlineKeyboardButton("üìã Create BILL", callback_data="smart_create_bill")])
            
            keyboard = InlineKeyboardMarkup(buttons) if buttons else None
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                telegram_message,
                reply_markup=keyboard
            )
            
            logger.info(f"‚úÖ –§–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {context.user_data['file_name']}")
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if os.path.exists(temp_photo_path):
                os.unlink(temp_photo_path)
            if 'temp_pdf_path' in locals() and os.path.exists(temp_pdf_path):
                os.unlink(temp_pdf_path)
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞–∫ —Ñ–∞–π–ª (üìé), –∞ –Ω–µ –∫–∞–∫ —Ñ–æ—Ç–æ."
        )


async def handle_smart_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–Ω–æ–ø–∫–∞: –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∫—Ä–∞—Ç–∫–∏–µ —Ç–µ–∑–∏—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º)."""
    if not update.callback_query or not context.user_data:
        return
    query = update.callback_query
    analysis = context.user_data.get('document_analysis') or {}

    try:
        # 1) –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ contract_risks –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        risks = analysis.get('contract_risks') or {}
        summary_lines = []
        if risks:
            # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤—ã–≤–æ–¥
            if risks.get('payment_terms'):
                summary_lines.append(f"–û–ø–ª–∞—Ç–∞: {risks.get('payment_terms')}")
            if risks.get('delivery_terms'):
                summary_lines.append(f"–ü–æ—Å—Ç–∞–≤–∫–∞: {risks.get('delivery_terms')}")
            if risks.get('jurisdiction'):
                summary_lines.append(f"–Æ—Ä–∏—Å–¥–∏–∫—Ü–∏—è: {risks.get('jurisdiction')}")
            if risks.get('warranty'):
                summary_lines.append(f"–ì–∞—Ä–∞–Ω—Ç–∏—è: {risks.get('warranty')}")
            if risks.get('taxes'):
                summary_lines.append(f"–ù–∞–ª–æ–≥–∏: {risks.get('taxes')}")
            if risks.get('penalties'):
                summary_lines.append(f"–®—Ç—Ä–∞—Ñ—ã/–Ω–µ—É—Å—Ç–æ–π–∫–∏: {risks.get('penalties')}")
            unusual = risks.get('unusual') or []
            if unusual:
                bullet = '; '.join(str(x) for x in unusual[:5])
                summary_lines.append(f"–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è: {bullet}")
            listed_risks = risks.get('risks') or []
            if listed_risks:
                bullet = '; '.join(str(x) for x in listed_risks[:5])
                summary_lines.append(f"–†–∏—Å–∫–∏: {bullet}")
        else:
            # 2) Fallback: –≤—ã–∑–æ–≤ LLM –¥–ª—è –∫—Ä–∞—Ç–∫–æ–π –≤—ã–∂–∏–º–∫–∏ –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
            text = analysis.get('extracted_text') or ''
            try:
                # –í—ã–∑–æ–≤ –Ω–∞–ø—Ä—è–º—É—é: –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤—ã–¥–µ—Ä–∂–∫–∞ (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫)
                llm = llm_analyze_contract_risks(text)  # type: ignore
                if llm:
                    if llm.get('payment_terms'):
                        summary_lines.append(f"–û–ø–ª–∞—Ç–∞: {llm.get('payment_terms')}")
                    if llm.get('delivery_terms'):
                        summary_lines.append(f"–ü–æ—Å—Ç–∞–≤–∫–∞: {llm.get('delivery_terms')}")
                    if llm.get('jurisdiction'):
                        summary_lines.append(f"–Æ—Ä–∏—Å–¥–∏–∫—Ü–∏—è: {llm.get('jurisdiction')}")
                    if llm.get('warranty'):
                        summary_lines.append(f"–ì–∞—Ä–∞–Ω—Ç–∏—è: {llm.get('warranty')}")
                    if llm.get('taxes'):
                        summary_lines.append(f"–ù–∞–ª–æ–≥–∏: {llm.get('taxes')}")
                    if llm.get('penalties'):
                        summary_lines.append(f"–®—Ç—Ä–∞—Ñ—ã/–Ω–µ—É—Å—Ç–æ–π–∫–∏: {llm.get('penalties')}")
                    unusual = llm.get('unusual') or []
                    if unusual:
                        bullet = '; '.join(str(x) for x in unusual[:5])
                        summary_lines.append(f"–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è: {bullet}")
                    listed_risks = llm.get('risks') or []
                    if listed_risks:
                        bullet = '; '.join(str(x) for x in listed_risks[:5])
                        summary_lines.append(f"–†–∏—Å–∫–∏: {bullet}")
            except Exception:
                pass

        # –û–±–æ–≥–∞—â–∞–µ–º –∞–≤—Ç–æ–∏–Ω—Ñ–æ
        try:
            if analysis.get('vin'):
                summary_lines.append(f"VIN: {analysis.get('vin')}")
            brand_model = ' '.join([p for p in [analysis.get('car_brand'), analysis.get('car_model')] if p])
            if brand_model.strip():
                summary_lines.append(f"–ê–≤—Ç–æ: {brand_model.strip()}")
        except Exception:
            pass

        if not summary_lines:
            summary_lines.append("–ù–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –∏–ª–∏ –æ–Ω–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã.")

        # –ì–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π —á–µ—Ä–µ–∑ LLM
        raw_summary = "üß† –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n" + "\n".join(f"‚Ä¢ {line}" for line in summary_lines)
        ru_summary = llm_translate_to_ru(raw_summary)

        # –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—á—Ç–æ–±—ã –Ω–µ —É–±–∏—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏) ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await query.answer()
        except Exception:
            pass
        await context.bot.send_message(chat_id=query.message.chat_id, text=ru_summary)
    except Exception as e:
        try:
            await query.answer()
        except Exception:
            pass
        await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–≤–æ–¥ —Ü–µ–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ITEM)."""
    if not update.message or not context.user_data:
        return
    try:
        if context.user_data.get('waiting_for_selling_price'):
            await handle_selling_price(update, context)
    except Exception:
        pass
        
    
async def handle_smart_create_expense(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –¥–ª—è Expense."""
    if not update.callback_query:
        return
    query = update.callback_query
    try:
        await query.answer()
        keyboard = [
            [InlineKeyboardButton("üè¢ –ë–∏–∑–Ω–µ—Å-–∫–∞—Ä—Ç–∞", callback_data="expense_paid_through:business")],
            [InlineKeyboardButton("üë§ –õ–∏—á–Ω–∞—è –∫–∞—Ä—Ç–∞", callback_data="expense_paid_through:personal")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="expense_paid_through:cancel")]
        ]
        await query.edit_message_text("üí∞ –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ —Å –±–∏–∑–Ω–µ—Å-–∫–∞—Ä—Ç—ã –∏–ª–∏ –ª–∏—á–Ω–æ–π?", reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –¥–ª—è Expense: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def handle_expense_payment_method(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–µ—Ç Expense –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã."""
    if not update.callback_query or not context.user_data:
            return
        
    query = update.callback_query
    analysis = context.user_data.get('document_analysis') or {}
    payment_choice = query.data.split(":")[1]

    if payment_choice == "cancel":
        await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ Expense –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        
    await query.edit_message_text("üí∏ –°–æ–∑–¥–∞—é Expense –≤ Zoho...")

    try:
        import requests
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        try:
            org_id, org_name = determine_buyer_organization(analysis)
        except ValueError:
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º our_company –µ—Å–ª–∏ buyer_name/buyer_vat –ø—É—Å—Ç—ã–µ
            our_company = analysis.get('our_company', '').lower()
            if 'parkentertainment' in our_company:
                org_id, org_name = '20082562863', 'PARKENTERTAINMENT'
            elif 'tavie' in our_company:
                org_id, org_name = '20092948714', 'TaVie Europe O√ú'
        else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è Expense")
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ account_id –¥–ª—è paid_through
        try:
            from functions.export_zoho_accounts import get_accounts_cached_or_fetch
            accounts = get_accounts_cached_or_fetch(org_id, 'PARKENTERTAINMENT Sp. z o. o.' if org_id == '20082562863' else 'TaVie Europe O√ú')
            
            # –ò—â–µ–º —Å—á–µ—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã (–±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞, –∫–∞—Å—Å—ã, –∫–∞—Ä—Ç—ã)
            paid_through_account_id = None
            for acc in accounts:
                acc_name = (acc.get('account_name') or '').lower()
                acc_type = (acc.get('account_type') or '').lower()
                
                if payment_choice == "business":
                    # –î–ª—è –±–∏–∑–Ω–µ—Å –∫–∞—Ä—Ç—ã –≤—ã–±–∏—Ä–∞–µ–º —Å—á–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
                    currency = (analysis.get('currency') or 'PLN').upper()
                    
                    if currency == 'PLN':
                        # –î–ª—è PLN: Konto Firmowe Godne Polecenia
                        if 'firmowe godne polecenia' in acc_name or 'firmowe' in acc_name:
                            paid_through_account_id = acc.get('account_id')
                            logger.info(f"üí≥ –ù–∞–π–¥–µ–Ω PLN –±–∏–∑–Ω–µ—Å —Å—á–µ—Ç: {acc_name} (ID: {paid_through_account_id})")
                            break
                    elif currency == 'EUR':
                        # –î–ª—è EUR: Rachunek bie≈ºƒÖcy walutowy w EUR
                        if 'rachunek bie≈ºƒÖcy walutowy w eur' in acc_name or 'walutowy w eur' in acc_name:
                            paid_through_account_id = acc.get('account_id')
                            logger.info(f"üí∂ –ù–∞–π–¥–µ–Ω EUR –±–∏–∑–Ω–µ—Å —Å—á–µ—Ç: {acc_name} (ID: {paid_through_account_id})")
                            break
                    
                    # Fallback –¥–ª—è –±–∏–∑–Ω–µ—Å–∞: –ª—é–±—ã–µ –±–∏–∑–Ω–µ—Å —Å—á–µ—Ç–∞
                    if not paid_through_account_id and any(keyword in acc_name for keyword in ['pko', 'business', 'company', 'bank', 'checking', 'firmowe']):
                        paid_through_account_id = acc.get('account_id')
                        logger.info(f"üí≥ Fallback –±–∏–∑–Ω–µ—Å —Å—á–µ—Ç: {acc_name} (ID: {paid_through_account_id})")
                        break
                else:  # personal
                    # –ò—â–µ–º –ª–∏—á–Ω—ã–µ —Å—á–µ—Ç–∞: Petty Cash, cash
                    if any(keyword in acc_name for keyword in ['petty cash', 'cash', 'personal', 'owner', 'funds']):
                        paid_through_account_id = acc.get('account_id')
                        logger.info(f"üí∞ –ù–∞–π–¥–µ–Ω –ª–∏—á–Ω—ã–π —Å—á–µ—Ç: {acc_name} (ID: {paid_through_account_id})")
                        break
            
            # Fallback –∫ –ø–µ—Ä–≤–æ–º—É –±–∞–Ω–∫–æ–≤—Å–∫–æ–º—É —Å—á–µ—Ç—É –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
            if not paid_through_account_id:
                for acc in accounts:
                    acc_type = (acc.get('account_type') or '').lower()
                    if acc_type in ['bank', 'cash', 'credit_card', 'other_current_asset']:
                        paid_through_account_id = acc.get('account_id')
                        logger.info(f"üí≥ Fallback —Å—á–µ—Ç: {acc.get('account_name')} (ID: {paid_through_account_id})")
                        break
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è paid_through_account_id: {e}")
            # Fallback –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å—á–µ—Ç–∞–º
            if payment_choice == "business":
                currency = (analysis.get('currency') or 'PLN').upper()
                if currency == 'PLN':
                    # Konto Firmowe Godne Polecenia –¥–ª—è PLN
                    paid_through_account_id = "281497000000040049"
                    logger.info("üí≥ Fallback –∫ Konto Firmowe Godne Polecenia (PLN –±–∏–∑–Ω–µ—Å —Å—á–µ—Ç)")
                elif currency == 'EUR':
                    # Rachunek bie≈ºƒÖcy walutowy w EUR –¥–ª—è EUR
                    paid_through_account_id = "281497000000040053"
                    logger.info("üí∂ Fallback –∫ Rachunek bie≈ºƒÖcy walutowy w EUR (EUR –±–∏–∑–Ω–µ—Å —Å—á–µ—Ç)")
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º PLN —Å—á–µ—Ç
                    paid_through_account_id = "281497000000040049"
                    logger.info("üí≥ Fallback –∫ Konto Firmowe Godne Polecenia (PLN –±–∏–∑–Ω–µ—Å —Å—á–µ—Ç)")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Petty Cash –∫–∞–∫ –ª–∏—á–Ω—ã–π —Å—á–µ—Ç
                paid_through_account_id = "281497000000000349"
                logger.info("üí∞ Fallback –∫ Petty Cash (–ª–∏—á–Ω—ã–π —Å—á–µ—Ç)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ account_id –Ω–∞–π–¥–µ–Ω
        if not paid_through_account_id:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—á–µ—Ç–æ–≤ –≤ Zoho.")
            return

        supplier_name = analysis.get('supplier_name', 'Unknown Vendor')
        total_amount = analysis.get('total_amount', 0)
        currency = analysis.get('currency', 'PLN')
        bill_number = analysis.get('bill_number', '')
        document_date = analysis.get('document_date', '')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º Expense Account
        from functions.llm_document_extractor import llm_select_account
        from functions.export_zoho_accounts import get_accounts_cached_or_fetch

        # –ü–æ–ª—É—á–∞–µ–º expense_account_id (—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã accounts –≤—ã—à–µ)
        acc_names = [a.get('account_name') for a in accounts if a.get('account_name')]
        context_text = analysis.get('extracted_text', '')
        
        expense_account_id = None
        try:
            llm_pick = llm_select_account(acc_names, context_text, supplier_name, analysis.get('product_category', ''))
            if llm_pick and llm_pick.get('name') in acc_names:
                for acc in accounts:
                    if acc.get('account_name') == llm_pick['name']:
                        expense_account_id = acc.get('account_id')
                        logger.info(f"üìä LLM –≤—ã–±—Ä–∞–ª expense account: {llm_pick['name']} (ID: {expense_account_id})")
                            break
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Expense Account —á–µ—Ä–µ–∑ LLM: {e}")
        
        # Fallback –∫ –ø–µ—Ä–≤–æ–º—É expense account –µ—Å–ª–∏ LLM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        if not expense_account_id:
            for acc in accounts:
                acc_type = (acc.get('account_type') or '').lower()
                if acc_type in ['expense', 'cost of goods sold', 'other_expense']:
                    expense_account_id = acc.get('account_id')
                    logger.info(f"üìä Fallback expense account: {acc.get('account_name')} (ID: {expense_account_id})")
                    break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ expense_account_id –Ω–∞–π–¥–µ–Ω
        if not expense_account_id:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π expense account. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—á–µ—Ç–æ–≤ –≤ Zoho.")
            return
        
        expense_payload = {
            "paid_through_account_id": paid_through_account_id,
            "account_id": expense_account_id,
            "vendor_name": supplier_name,
            "date": document_date,
            "total": total_amount,
            "currency_code": currency,
            "reference_number": bill_number,
            "description": f"Receipt from {supplier_name}"
        }

        access_token = get_access_token()
        if not access_token:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Zoho")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Expense –≤ Zoho
        headers = {
            'Authorization': f'Zoho-oauthtoken {access_token}',
            'Content-Type': 'application/json'
        }
        
        url = f"https://books.zoho.eu/books/v3/expenses?organization_id={org_id}"
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è payload
        logger.info(f"üîç DEBUG: Expense Payload: {expense_payload}")
        logger.info(f"üîç DEBUG: Expense URL: {url}")
        
        response = requests.post(url, json=expense_payload, headers=headers)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"üîç DEBUG: Expense API Response Status: {response.status_code}")
        logger.info(f"üîç DEBUG: Expense API Response Text: {response.text}")
        
        try:
            response_data = response.json()
        except ValueError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: {e}")
            logger.error(f"‚ùå Response text: {response.text}")
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            error_text = response.text[:500] + "..." if len(response.text) > 500 else response.text
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Zoho API: {error_text}")
            return
        
        if response.status_code == 201 and response_data.get('expense'):
            expense_data = response_data['expense']
            expense_id = expense_data.get('expense_id')
            
            # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
            file_path = context.user_data.get('file_path')
            if file_path and os.path.exists(file_path):
                await attach_file_to_expense(org_id, expense_id, file_path)
            
            zoho_url = f"https://books.zoho.eu/app/{org_id}#/expenses/{expense_id}"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –≤ Zoho", url=zoho_url)],
                [InlineKeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ WorkDrive", callback_data="v2_upload_workdrive")]
            ])
            
            await query.edit_message_text(
                f"‚úÖ Expense #{expense_data.get('expense_number')} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
                reply_markup=keyboard
            )
        else:
            error_msg = response_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Expense: {error_msg}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Expense: {e}", exc_info=True)
        await query.edit_message_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Expense: {str(e)}")


async def attach_file_to_expense(org_id: str, expense_id: str, file_path: str) -> None:
    """–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç —Ñ–∞–π–ª –∫ Expense –≤ Zoho"""
    try:
        import requests
        access_token = get_access_token()
        if not access_token:
            return
            
        headers = {
            'Authorization': f'Zoho-oauthtoken {access_token}'
        }
        
        with open(file_path, 'rb') as f:
            files = {'file': f}
            url = f"https://books.zoho.eu/books/v3/expenses/{expense_id}/attachment?organization_id={org_id}"
            response = requests.post(url, files=files, headers=headers)
            
        if response.status_code == 201:
            logger.info(f"‚úÖ –§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ Expense {expense_id}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ Expense {expense_id}: {response.text}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫ Expense: {e}")