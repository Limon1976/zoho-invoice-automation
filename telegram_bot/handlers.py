import tempfile
import os
from typing import Dict, Any, Optional
from pathlib import Path
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
import re
from telegram.ext import ContextTypes, Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler

from functions.smart_document_processor import SmartDocumentProcessor
from functions.llm_document_extractor import llm_analyze_contract_risks, llm_translate_to_ru  # LLM risks summary + RU translate
from functions.flower_line_extractor import extract_flower_lines_from_ocr, parse_invoice_items
from functions.complete_flower_extractor import extract_all_flower_positions, format_for_telegram_bot
from functions.pdf_direct_parser import extract_flower_positions_from_pdf, format_for_telegram_bot as format_pdf_result, is_suitable_for_pdf_parsing
from functions.contact_creator import create_supplier_from_document
from functions.agent_invoice_parser import analyze_proforma_via_agent
from functions.zoho_items_manager import ZohoItemsManager, CarItemData
from functions.phone_parser import parse_phone_number, format_phone_for_zoho
from functions.export_zoho_accounts import get_accounts_cached_or_fetch
from functions.zoho_api import (
    get_access_token,
    find_branch_id,
    find_warehouse_id,
    find_tax_by_percent,
    bill_exists_smart,
    get_contact_by_name,
    find_supplier_in_zoho,
)

import logging
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
last_document_analysis = None
_recent_callbacks: dict[str, float] = {}
_RECENT_TTL_SECONDS = 10.0


async def smart_supplier_check(supplier_name: str, supplier_vat: Optional[str] = None,
                               our_company: Optional[str] = None) -> Dict[str, Any]:
    """
    –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:
    1. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (our_company)
    2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤ –∫—ç—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    3. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤ –æ–±—â–µ–º –∫—ç—à–µ
    4. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from src.domain.services.contact_cache import OptimizedContactCache
        from src.domain.services.vat_validator import VATValidatorService

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        organization_id = None
        organization_name = None
        cache_file = None

        if our_company:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
            if "parkentertainment" in our_company.lower() or "PL5272956146" in our_company:
                organization_id = "20082562863"
                organization_name = "PARKENTERTAINMENT"
                cache_file = "data/optimized_cache/PARKENTERTAINMENT_optimized.json"
            elif "tavie" in our_company.lower() or "EE102288270" in our_company:
                organization_id = "20092948714"
                organization_name = "TaVie Europe O√ú"
                cache_file = "data/optimized_cache/TaVie_Europe_optimized.json"

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º VAT –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–¥–æ–±–∞–≤–ª—è–µ–º ISO-–ø—Ä–µ—Ñ–∏–∫—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –°–¢–†–ê–ù–´ –ü–û–°–¢–ê–í–©–ò–ö–ê –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞)
        normalized_doc_vat = None
        if supplier_vat:
            vvs_norm = VATValidatorService()
            expected_country = None
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ø–æ —Å—Ç—Ä–∞–Ω–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã, —Ç–∞–∫ –∫–∞–∫ VAT —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç—Å—è –≤—ã—à–µ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏
            # —Å–æ–æ–±—â–µ–Ω–∏—è –≤ handle_pdf. –≠—Ç–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ last_document_analysis.
            supplier_country = ''
            supplier_country_l = supplier_country.strip().lower()
            country_to_iso = {
                'poland': 'PL', 'polska': 'PL', 'estonia': 'EE', 'eesti': 'EE', 'germany': 'DE',
                'deutschland': 'DE', 'latvia': 'LV', 'lithuania': 'LT', 'netherlands': 'NL',
                'ireland': 'IE', 'france': 'FR', 'spain': 'ES', 'italy': 'IT', 'portugal': 'PT',
                'sweden': 'SE', 'denmark': 'DK', 'united kingdom': 'GB', 'uk': 'GB'
            }
            expected_country = country_to_iso.get(supplier_country_l)
            validation_norm = vvs_norm.validate_vat(supplier_vat, expected_country=expected_country)
            if validation_norm.is_valid:
                normalized_doc_vat = vvs_norm.add_country_prefix(
                    validation_norm.vat_number.value,
                    expected_country or validation_norm.country_code
                ).replace(' ', '')
            else:
                digits_only = ''.join(ch for ch in str(supplier_vat) if ch.isdigit())
                if digits_only and expected_country:
                    normalized_doc_vat = f"{expected_country}{digits_only}"
                else:
                    normalized_doc_vat = supplier_vat
            try:
                logger.info(f"VAT compare prep: supplier_country='{supplier_country}' raw='{supplier_vat}' normalized='{normalized_doc_vat}'")
            except Exception:
                pass

        # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –∫—ç—à–µ–º, –∞ –∫ Zoho –æ–±—Ä–∞—â–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ –Ω–∞—à–ª–∏

        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫—ç—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        if cache_file and organization_name:
            try:
                org_cache = OptimizedContactCache(cache_file)
                
                # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ VAT, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                found_in_org = []
                if supplier_vat or normalized_doc_vat:
                    search_vat = (normalized_doc_vat or supplier_vat or '').strip()
                    found = org_cache.search_by_vat(search_vat)
                    if not found and supplier_vat:
                        found = org_cache.search_by_vat(supplier_vat)
                    found_in_org = [found] if found else []
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ VAT - –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
                if not found_in_org:
                    found_in_org = org_cache.search_by_company(supplier_name)
                    
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ VAT
                    if found_in_org and (supplier_vat or normalized_doc_vat):
                        cached_contact = found_in_org[0].to_dict()
                        cached_vat = (cached_contact.get('vat_number') or '').strip()
                        doc_vat_for_compare = (normalized_doc_vat or supplier_vat or '').strip()
                        try:
                            logger.info(f"VAT compare (org cache): cached='{cached_vat}' doc='{doc_vat_for_compare}'")
                        except Exception:
                            pass
                        # –î–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                        cached_digits = ''.join(ch for ch in cached_vat if ch.isdigit())
                        doc_digits = ''.join(ch for ch in doc_vat_for_compare if ch.isdigit())
                        if cached_digits and doc_digits and cached_digits == doc_digits:
                            return {
                                'status': 'found_in_cache',
                                'contact': cached_contact,
                                'organization_id': organization_id,
                                'organization_name': organization_name,
                                'message': f'‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ "{supplier_name}" –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ {organization_name}',
                                'recommended_action': 'update_existing',
                                'button_text': 'üìù –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ',
                                'button_action': 'update_existing_contact'
                            }
                        # –ï—Å–ª–∏ –≤ –∫—ç—à–µ VAT –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ Zoho
                        try:
                            if organization_id:
                                direct = find_supplier_in_zoho(organization_id, supplier_name, None)
                                zoho_vat = (direct.get('vat_number') or '').strip() if direct else ''
                                zoho_digits = ''.join(ch for ch in zoho_vat if ch.isdigit())
                                if zoho_vat == doc_vat_for_compare or (zoho_digits and doc_digits and zoho_digits == doc_digits):
                                    return {
                                        'status': 'found_in_cache',
                                        'contact': cached_contact or direct,
                                        'organization_id': organization_id,
                                        'organization_name': organization_name,
                                        'message': f'‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ "{supplier_name}" –Ω–∞–π–¥–µ–Ω (VAT —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å Zoho)',
                                        'recommended_action': 'update_existing',
                                        'button_text': 'üìù –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ',
                                        'button_action': 'update_existing_contact'
                                    }
                        except Exception as e:
                            logger.warning(f"Zoho verify VAT compare failed: {e}")
                        
                        # –ï—Å–ª–∏ VAT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ, –Ω–æ –µ—Å—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        if not cached_vat or cached_vat != doc_vat_for_compare:
                            return {
                                'status': 'found_with_vat_mismatch',
                                'contact': cached_contact,
                                'organization_id': organization_id,
                                'organization_name': organization_name,
                                'message': f'‚ö†Ô∏è –ü–æ—Å—Ç–∞–≤—â–∏–∫ "{supplier_name}" –Ω–∞–π–¥–µ–Ω, –Ω–æ VAT –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è (–∫—ç—à: {cached_vat or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}, –¥–æ–∫—É–º–µ–Ω—Ç: {doc_vat_for_compare or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"})',
                                'recommended_action': 'update_vat',
                                'button_text': 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å VAT –≤ Zoho',
                                'button_action': 'update_supplier_vat'
                            }

                if found_in_org:
                    # –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (VAT —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ)
                    cached_contact = found_in_org[0].to_dict()
                    return {
                        'status': 'found_in_cache',
                        'contact': cached_contact,
                        'organization_id': organization_id,
                        'organization_name': organization_name,
                        'message': f'‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ "{supplier_name}" –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ {organization_name}',
                        'recommended_action': 'update_existing',
                        'button_text': 'üìù –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ',
                        'button_action': 'update_existing_contact'
                    }
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∫—ç—à–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization_name}: {e}")

        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–±—â–µ–º –∫—ç—à–µ
        try:
            general_cache = OptimizedContactCache("data/optimized_cache/all_contacts_optimized.json")
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ VAT, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            found_in_general = []
            if supplier_vat or normalized_doc_vat:
                search_vat = (normalized_doc_vat or supplier_vat or '').strip()
                found = general_cache.search_by_vat(search_vat)
                if not found and supplier_vat:
                    found = general_cache.search_by_vat(supplier_vat)
                found_in_general = [found] if found else []
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ VAT - –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
            if not found_in_general:
                found_in_general = general_cache.search_by_company(supplier_name)
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤ –æ–±—â–µ–º –∫—ç—à–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ VAT
                if found_in_general and (supplier_vat or normalized_doc_vat):
                    cached_contact = found_in_general[0].to_dict()
                    cached_vat = (cached_contact.get('vat_number') or '').strip()
                    doc_vat_for_compare = (normalized_doc_vat or supplier_vat or '').strip()
                    try:
                        logger.info(f"VAT compare (general cache): cached='{cached_vat}' doc='{doc_vat_for_compare}'")
                    except Exception:
                        pass
                    cached_digits = ''.join(ch for ch in cached_vat if ch.isdigit())
                    doc_digits = ''.join(ch for ch in doc_vat_for_compare if ch.isdigit())
                    if cached_digits and doc_digits and cached_digits == doc_digits:
                        return {
                            'status': 'found_in_general_cache',
                            'contact': cached_contact,
                            'organization_id': organization_id,
                            'organization_name': organization_name,
                            'message': f'üîÑ –ü–æ—Å—Ç–∞–≤—â–∏–∫ "{supplier_name}" –Ω–∞–π–¥–µ–Ω –≤ –æ–±—â–µ–º –∫—ç—à–µ, –Ω–æ –Ω–µ –≤ –∫—ç—à–µ {organization_name}',
                            'recommended_action': 'refresh_cache',
                            'button_text': 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à',
                            'button_action': 'refresh_cache_only'
                        }
                    # –ï—Å–ª–∏ –≤ –∫—ç—à–µ VAT –ø—É—Å—Ç/–Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äì —Å–≤–µ—Ä–∏–º —Å Zoho
                    try:
                        if organization_id:
                            direct = find_supplier_in_zoho(organization_id, supplier_name, None)
                            zoho_vat = (direct.get('vat_number') or '').strip() if direct else ''
                            zoho_digits = ''.join(ch for ch in zoho_vat if ch.isdigit())
                            if zoho_vat == doc_vat_for_compare or (zoho_digits and doc_digits and zoho_digits == doc_digits):
                                return {
                                    'status': 'found_in_general_cache',
                                    'contact': cached_contact or direct,
                                    'organization_id': organization_id,
                                    'organization_name': organization_name,
                                    'message': f'üîÑ –ü–æ—Å—Ç–∞–≤—â–∏–∫ "{supplier_name}" –Ω–∞–π–¥–µ–Ω (VAT —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å Zoho)',
                                    'recommended_action': 'update_existing',
                                    'button_text': 'üìù –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç',
                                    'button_action': 'update_existing_contact'
                                }
                    except Exception as e:
                        logger.warning(f"Zoho verify VAT compare (general) failed: {e}")
                    
                    # –ï—Å–ª–∏ VAT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ, –Ω–æ –µ—Å—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    if not cached_vat or cached_vat != doc_vat_for_compare:
                        return {
                            'status': 'found_in_general_with_vat_mismatch',
                            'contact': cached_contact,
                            'organization_id': organization_id,
                            'organization_name': organization_name,
                            'message': f'‚ö†Ô∏è –ü–æ—Å—Ç–∞–≤—â–∏–∫ "{supplier_name}" –Ω–∞–π–¥–µ–Ω –≤ –æ–±—â–µ–º –∫—ç—à–µ, VAT –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è (–∫—ç—à: {cached_vat or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}, –¥–æ–∫—É–º–µ–Ω—Ç: {doc_vat_for_compare or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"})',
                            'recommended_action': 'update_vat_and_refresh',
                            'button_text': 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å VAT –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å',
                            'button_action': 'update_supplier_vat_and_refresh'
                        }

            if found_in_general:
                # –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–π–¥–µ–Ω –≤ –æ–±—â–µ–º –∫—ç—à–µ, –Ω–æ –Ω–µ –≤ –∫—ç—à–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                cached_contact = found_in_general[0].to_dict()
                return {
                    'status': 'found_in_general_cache',
                    'contact': cached_contact,
                    'organization_id': organization_id,
                    'organization_name': organization_name,
                    'message': f'üîÑ –ü–æ—Å—Ç–∞–≤—â–∏–∫ "{supplier_name}" –Ω–∞–π–¥–µ–Ω –≤ –æ–±—â–µ–º –∫—ç—à–µ, –Ω–æ –Ω–µ –≤ –∫—ç—à–µ {organization_name}',
                    'recommended_action': 'refresh_cache',
                    'button_text': 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à',
                    'button_action': 'refresh_cache_only'
                }
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –æ–±—â–µ–º –∫—ç—à–µ: {e}")

        # –®–∞–≥ 3: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ Zoho API (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π –ø—Ä–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–º –∫—ç—à–µ)
        try:
            if organization_id:
                direct = find_supplier_in_zoho(organization_id, supplier_name, supplier_vat)
                if direct and direct.get('contact_id'):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º VAT –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ, –Ω–æ –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±—â—É—é –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
                    cached_vat = (direct.get('vat_number') or '').strip()
                    if supplier_vat and (not cached_vat or cached_vat.upper() != str(supplier_vat).upper()):
                        return {
                            'status': 'found_in_zoho',
                            'contact': direct,
                            'organization_id': organization_id,
                            'organization_name': organization_name,
                            'message': f'‚ö†Ô∏è –ü–æ—Å—Ç–∞–≤—â–∏–∫ "{supplier_name}" –Ω–∞–π–¥–µ–Ω –≤ Zoho, VAT –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è/–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (Zoho: {cached_vat or "‚Äî"}, –î–æ–∫—É–º–µ–Ω—Ç: {supplier_vat}). –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç".',
                            'recommended_action': 'update_existing',
                            'button_text': 'üìù –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç',
                            'button_action': 'update_existing_contact'
                        }
                    return {
                        'status': 'found_in_zoho',
                        'contact': direct,
                        'organization_id': organization_id,
                        'organization_name': organization_name,
                        'message': f'‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ "{supplier_name}" –Ω–∞–π–¥–µ–Ω –≤ Zoho',
                        'recommended_action': 'update_existing',
                        'button_text': 'üìù –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç',
                        'button_action': 'update_existing_contact'
                    }
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ Zoho API: {e}")

        # –®–∞–≥ 4: –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ
        return {
            'status': 'not_found',
            'contact': None,
            'organization_id': organization_id,
            'organization_name': organization_name,
            'message': f'üÜï –ü–æ—Å—Ç–∞–≤—â–∏–∫ "{supplier_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ',
            'recommended_action': 'create_new',
            'button_text': '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ',
            'button_action': 'create_new_contact'
        }

    except Exception as e:
        return {
            'status': 'error',
            'contact': None,
            'organization_id': None,
            'organization_name': None,
            'message': f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(e)}',
            'recommended_action': 'error',
            'button_text': '‚ùå –û—à–∏–±–∫–∞',
            'button_action': 'error'
        }


class SupplierContactCreator:
    """–°–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ Zoho"""

    def __init__(self):
        self.zoho_api = None

    def check_existing_supplier(self, supplier_name: str, vat_number: Optional[str] = None) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –∫—ç—à–µ"""
        # Placeholder –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        return None

    def create_supplier_contact(self, supplier_data: Dict[str, Any]) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ Zoho"""
        # Placeholder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        return True


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not update.message:
        return

    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Invoice Bot!

–Ø —É–º–µ—é:
üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PDF —Å—á–µ—Ç–∞ –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
üè¢ –ò–∑–≤–ª–µ–∫–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
üöó –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
üí∞ –û–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å—É–º–º—ã –∏ –≤–∞–ª—é—Ç—ã
üéØ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª!
"""
    await update.message.reply_text(welcome_text)


async def handle_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
    if context.user_data and context.user_data.get('waiting_for_selling_price'):
        await handle_selling_price(update, context)
        return

    if not update.message:
        return

    if not update.message.document:
        await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    document = update.message.document

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if not document.file_name or not document.file_name.lower().endswith('.pdf'):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª")
        return

    await update.message.reply_text("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF —Ñ–∞–π–ª —Å —É–º–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º...")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(document.file_id)

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
            await file.download_to_drive(temp_file.name)
            temp_path = temp_file.name

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        processor = SmartDocumentProcessor()
        result = await processor.process_document(temp_path)

        if result.success:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            telegram_message = processor.generate_telegram_message(result)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            document_analysis = result.document_analysis
            supplier_name = document_analysis.get('supplier_name', '')
            supplier_vat = document_analysis.get('supplier_vat')
            our_company = document_analysis.get('our_company', '')
            document_type = document_analysis.get('document_type', 'Unknown')

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º VAT –¥–ª—è –ï–î–ò–ù–û–ì–û –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Å ISO‚Äë–ø—Ä–µ—Ñ–∏–∫—Å–æ–º)
            try:
                from telegram_bot.services.vat_normalizer import normalize_vat as _norm_vat
                normalized_vat = _norm_vat(
                    supplier_vat,
                    document_analysis.get('supplier_country'),
                    document_analysis.get('extracted_text'),
                )
                if normalized_vat:
                    document_analysis['supplier_vat'] = normalized_vat
                    supplier_vat = normalized_vat
            except Exception:
                normalized_vat = supplier_vat

            # AI –ø–µ—Ä–µ–≤–æ–¥ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            async def ai_translate_document_type(doc_type: str) -> str:
                """AI –ø–µ—Ä–µ–≤–æ–¥ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
                if not doc_type or doc_type == 'Unknown':
                    return '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
                
                # –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ AI
                try:
                    import openai
                    if not os.getenv('OPENAI_API_KEY'):
                        return doc_type  # Fallback –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞
                    
                    client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
                    
                    response = client.chat.completions.create(
                        model="gpt-4o-mini",  # –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                        messages=[{
                            "role": "user", 
                            "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{doc_type}' –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π. –ü—Ä–∏–º–µ—Ä—ã: 'Invoice' ‚Üí '–°—á—ë—Ç-—Ñ–∞–∫—Ç—É—Ä–∞', 'Contract' ‚Üí '–î–æ–≥–æ–≤–æ—Ä', 'Verbindliche Bestellung' ‚Üí '–î–æ–≥–æ–≤–æ—Ä –ø–æ–∫—É–ø–∫–∏'"
                        }],
                        max_tokens=50,
                        temperature=0
                    )
                    
                    translated = response.choices[0].message.content.strip()
                    return translated if translated else doc_type
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
                    return doc_type  # Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É

            document_type_ru = await ai_translate_document_type(document_type)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            header_info = f"üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_type_ru}\n"
            if our_company:
                header_info += f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {our_company}\n"
            header_info += "‚îÄ" * 40 + "\n\n"
            # –û—Ç–¥–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏–º VAT –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            if supplier_vat:
                header_info += f"üè∑Ô∏è VAT: {supplier_vat}\n\n"
            telegram_message = header_info + telegram_message

            # –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π our_company
            supplier_check = None
            if supplier_name:
                supplier_check = await smart_supplier_check(supplier_name, supplier_vat, our_company)
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∏–º—è/–≤–∞—Ç
                try:
                    logger.info(f"üîé Supplier debug: org={supplier_check.get('organization_id')}, org_name={supplier_check.get('organization_name')}, name='{supplier_name}', vat='{supplier_vat}' status={supplier_check.get('status')}")
                except Exception:
                    pass

            # –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            keyboard = []

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if supplier_check:
                status = supplier_check.get('status')
                # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω (–≤–∫–ª—é—á–∞—è —Å–ª—É—á–∞–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è VAT)
                found_statuses = [
                    'found_in_cache', 'found_in_general_cache', 'found_in_zoho',
                    'found_with_vat_mismatch', 'found_in_general_with_vat_mismatch', 'found_in_zoho_with_vat_mismatch'
                ]
                if status in found_statuses:
                    keyboard.append([InlineKeyboardButton(
                        'üìù –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç',
                        callback_data='update_existing_contact'
                    )])
                elif status == 'not_found':
                    keyboard.append([InlineKeyboardButton(
                        supplier_check['button_text'],
                        callback_data=supplier_check['button_action']
                    )])

                # –î–æ–±–∞–≤–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    actions_block = "\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:\n"
                    if status in found_statuses:
                        actions_block += "   üìù –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç\n"
                    else:
                        actions_block += "   ‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞\n"
                    telegram_message = (telegram_message or "") + actions_block
                except Exception:
                    pass

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è ITEM (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏ VIN –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            sku_check = getattr(result, 'sku_check', None)
            if sku_check and sku_check.recommended_action == "create_item":
                keyboard.append([InlineKeyboardButton("üöó –°–æ–∑–¥–∞—Ç—å ITEM", callback_data="create_item")])
            elif sku_check and sku_check.recommended_action == "skip_duplicate":
                # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è ITEM –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                pass

        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è BILL (–¥–ª—è –∏–Ω–≤–æ–π—Å–æ–≤ —Å –Ω–æ–º–µ—Ä–æ–º/—Å—É–º–º–æ–π)
            if (document_analysis.get('bill_number') and document_analysis.get('total_amount')):
                keyboard.append([InlineKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å BILL", callback_data="create_bill")])

            # –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            analysis_btn_needed = False
            try:
                dt = (document_analysis.get('document_type') or '').lower()
                if 'contract' in dt or 'proforma' in dt or document_analysis.get('contract_risks'):
                    analysis_btn_needed = True
            except Exception:
                pass

            row = [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à", callback_data="smart_refresh_cache"),
                   InlineKeyboardButton("üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="smart_full_report")]
            keyboard.append(row)
            if analysis_btn_needed:
                keyboard.append([InlineKeyboardButton("üß† –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞", callback_data="smart_analysis")])

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if supplier_check:
                telegram_message += f"\n\n{supplier_check['message']}"

            # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            if context.user_data is not None:
                context.user_data['smart_result'] = result
                context.user_data['document_analysis'] = result.document_analysis
                context.user_data['supplier_check'] = supplier_check  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                # –ì–ª–æ–±–∞–ª—å–Ω—ã–π fallback –Ω–∞ —Å–ª—É—á–∞–π —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ –∏–ª–∏ –æ—á–∏—Å—Ç–∫–∏ user_data
                global last_document_analysis
                last_document_analysis = result.document_analysis
            except Exception:
                pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —É–∂–µ –µ—Å—Ç—å supplier_check)
            # –ß—Ç–æ–±—ã –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –≤–≤–æ–¥–∏–ª –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω
            try:
                if supplier_check and '–ù–ï –ù–ê–ô–î–ï–ù' in telegram_message:
                    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω
                    status = supplier_check.get('status')
                    if status and status != 'not_found':
                        telegram_message = telegram_message.replace('üÜï –ö–æ–Ω—Ç–∞–∫—Ç: –ù–ï –ù–ê–ô–î–ï–ù - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ', '‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç: –ù–ê–ô–î–ï–ù –≤ —Å–∏—Å—Ç–µ–º–µ')
            except Exception:
                pass

            chat_id = update.message.chat.id
            print(f"üîç DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ chat_id={chat_id}, –∫–Ω–æ–ø–æ–∫: {len(keyboard) if keyboard else 0}")
            await update.message.reply_text(telegram_message, reply_markup=reply_markup)
            print(f"‚úÖ DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ chat_id={chat_id}")
        else:
            error_list = result.errors or []
            error_message = "‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n" + "\n".join(error_list)
            await update.message.reply_text(error_message)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        if result.success:
            try:
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                processed_dir = Path("processed_files")
                processed_dir.mkdir(exist_ok=True)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                original_name = Path(document.file_name).stem
                new_filename = f"{original_name}_{timestamp}.pdf"
                processed_path = processed_dir / new_filename

                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                import shutil
                shutil.copy2(temp_path, processed_path)

                logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {processed_path}")

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if context.user_data is not None:
                    context.user_data['processed_file_path'] = str(processed_path)

            except Exception as save_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {save_error}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_path)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")


async def handle_selling_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è ITEM"""

    if not update.message or not context.user_data:
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Ü–µ–Ω—É
        price_text = update.message.text
        if not price_text:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º:")
            return

        price_text = price_text.strip()
        selling_price = float(price_text.replace(',', '.'))

        if selling_price <= 0:
            await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        await update.message.reply_text(f"‚úÖ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {selling_price} EUR\nüöó –°–æ–∑–¥–∞—é ITEM –≤ Zoho Books...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ ITEM
        item_data = context.user_data.get('item_data')
        if not item_data:
            await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ ITEM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
        item_data['selling_price'] = selling_price

        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
        analysis = context.user_data.get('document_analysis') or {}
        vin = (item_data.get('vin') or analysis.get('vin') or '').strip()
        car_model = item_data.get('car_model') or analysis.get('car_model') or ''
        car_brand = analysis.get('car_brand') or ''
        car_item_name = analysis.get('car_item_name')
        if not car_item_name:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ –ø—Ä–∞–≤–∏–ª—É Brand Model_last5VIN
            last5 = vin[-5:] if vin else ''
            car_item_name = ' '.join([p for p in [car_brand, car_model] if p]).strip()
            if last5:
                car_item_name = f"{car_item_name}_{last5}" if car_item_name else last5

        cost_price = None
        try:
            # –ë–µ—Ä—ë–º NET: —Å–Ω–∞—á–∞–ª–∞ net_amount, –ø–æ—Ç–æ–º total_amount (–∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –Ω–µ—Ç—Ç–æ)
            net_val = analysis.get('net_amount') if analysis.get('net_amount') is not None else analysis.get('total_amount')
            cost_price = float(item_data.get('cost_price') or net_val or 0.0)
        except Exception:
            cost_price = 0.0

        if not vin or not car_item_name:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ITEM (VIN/–Ω–∞–∑–≤–∞–Ω–∏–µ)")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
        our_company = (analysis.get('our_company') or '').strip().lower()
        org_id = '20082562863' if 'parkentertainment' in our_company else '20092948714'

        # –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ZohoItemsManager
        manager = ZohoItemsManager()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ VIN
        try:
            if manager.check_sku_exists(vin, org_id):
                await update.message.reply_text(f"‚ÑπÔ∏è ITEM —Å VIN {vin} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Zoho ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
                context.user_data['waiting_for_selling_price'] = False
                context.user_data.pop('item_data', None)
                return
        except Exception:
            pass

        # –ü–æ–ª—É—á–∞–µ–º tax_id (–æ–±—ã—á–Ω–æ 0% export)
        tax_id = None
        try:
            tax_id = manager.get_tax_export_id(org_id)
        except Exception:
            tax_id = None

        # –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç VIN
        description_en = analysis.get('item_description') or analysis.get('item_details') or ''
        if description_en:
            # Ensure VIN present
            if vin and vin not in description_en:
                description_en = f"{description_en}. VIN {vin}"
        else:
            description_en = f"{car_item_name} VIN {vin}".strip()

        car_data = CarItemData(
            name=car_item_name,
            sku=vin,
            description=description_en,
            cost_price=float(cost_price or 0.0),
            selling_price=float(selling_price),
            unit="pcs",
            tax_id=tax_id,
        )

        created = manager.create_car_item(car_data, org_id)
        if created:
            msg_lines = [
                "‚úÖ ITEM —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ Zoho",
                f"   Name: {created.get('name')}",
                f"   SKU: {created.get('sku')}",
                f"   ID: {created.get('item_id')}",
            ]
            await update.message.reply_text("\n".join(msg_lines))
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ITEM –≤ Zoho. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–Ω—ã
        context.user_data['waiting_for_selling_price'] = False
        context.user_data.pop('item_data', None)

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω—ã: {str(e)}")


async def send_analysis_result(update: Update, ai_result: Dict[str, Any]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram"""
    if not update.message:
        return

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        message = "üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–†–ê–ë–û–¢–ö–ò –î–û–ö–£–ú–ï–ù–¢–ê\n\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
        supplier = ai_result.get('supplier', {})
        if supplier:
            message += f"üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message += f"üìß Email: {supplier.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {supplier.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        message += f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {ai_result.get('bill_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        message += f"üìÖ –î–∞—Ç–∞: {ai_result.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        message += f"‚è∞ –°—Ä–æ–∫ –ø–ª–∞—Ç–µ–∂–∞: {ai_result.get('payment_terms', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

        # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_status = ai_result.get('contact_status', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
        message += f"üÜï –ö–æ–Ω—Ç–∞–∫—Ç: {contact_status}\n"

        # –°—É–º–º–∞
        total_amount = ai_result.get('total_amount')
        if total_amount:
            currency = ai_result.get('currency', 'EUR')
            message += f"üí∞ –°—É–º–º–∞: {total_amount} {currency}\n"

        # –ê–¥—Ä–µ—Å
        address = supplier.get('address', {})
        if address:
            message += "üìç –ê–¥—Ä–µ—Å –¥–ª—è Zoho:\n"
            message += f"   üåç Country: {address.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message += f"   üè† Address: {address.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message += f"   üèôÔ∏è City: {address.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message += f"   üìÆ ZIP Code: {address.get('zip', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message += f"   üìû Phone: {address.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

        # VAT –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–≤—Å–µ–≥–¥–∞ —Å ISO-–ø—Ä–µ—Ñ–∏–∫—Å–æ–º, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞)
        vat = supplier.get('vat')
        if vat:
            try:
                from src.domain.services.vat_validator import VATValidatorService
                vvs_disp = VATValidatorService()
                country = (supplier.get('country') or ai_result.get('supplier_country') or (supplier.get('address') or {}).get('country') or '').strip().lower()
                country_to_iso = {
                    'poland': 'PL', 'polska': 'PL', 'estonia': 'EE', 'eesti': 'EE', 'germany': 'DE',
                    'deutschland': 'DE', 'latvia': 'LV', 'lithuania': 'LT', 'netherlands': 'NL',
                    'ireland': 'IE', 'france': 'FR', 'spain': 'ES', 'italy': 'IT', 'portugal': 'PT',
                    'sweden': 'SE', 'denmark': 'DK', 'united kingdom': 'GB', 'uk': 'GB'
                }
                expected = country_to_iso.get(country)
                valid = vvs_disp.validate_vat(vat, expected_country=expected)
                if valid.is_valid:
                    vat_show = vvs_disp.add_country_prefix(valid.vat_number.value, expected or valid.country_code).replace(' ', '')
                else:
                    digits = ''.join(ch for ch in str(vat) if ch.isdigit())
                    vat_show = f"{expected}{digits}" if expected and digits else str(vat)
            except Exception:
                vat_show = str(vat)
            message += f"üè∑Ô∏è VAT: {vat_show}\n"

        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI
        confidence = ai_result.get('confidence')
        if confidence:
            message += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI: {confidence}%\n"

        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        message += "\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:\n"
        if contact_status == "–ù–ï –ù–ê–ô–î–ï–ù - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ":
            message += "   ‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞\n"

        await update.message.reply_text(message)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}")


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
    if not update.callback_query:
        return

    query = update.callback_query
    # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ callback_query.id + message_id —Å TTL
    try:
        key = f"{query.id}:{getattr(query.message, 'message_id', '')}"
        import time
        now = time.time()
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö
        expired = [k for k, t in _recent_callbacks.items() if now - t > _RECENT_TTL_SECONDS]
        for k in expired:
            _recent_callbacks.pop(k, None)
        if key in _recent_callbacks:
            return
        _recent_callbacks[key] = now
    except Exception:
        pass
    await query.answer()

    try:
        action = query.data
        try:
            logger.info(f"CB action={action} user_data_keys={list(context.user_data.keys()) if context.user_data else None}")
            print(f"CB action={action} user_data_keys={list(context.user_data.keys()) if context.user_data else None}")
        except Exception:
            pass
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —É–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ handle_smart_callback
        smart_actions = [
            "create_new_contact", "update_existing_contact", "update_supplier_vat", 
            "update_supplier_vat_and_refresh", "refresh_cache_only", "smart_refresh_cache", "smart_full_report",
            "create_bill", "create_item", "smart_analysis"
        ]
        
        if action in smart_actions:
            await handle_smart_callback(update, context, action)
            return
            
        # –ü—Ä–æ—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (—Å—Ç–∞—Ä—ã–µ)
        if action == "create_contact":
            await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é –∫–æ–Ω—Ç–∞–∫—Ç...")
        elif action == "update_contact":
            await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ç–∞–∫—Ç...")
        elif action == "create_item":
            await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é ITEM...")
        elif action == "refresh_cache":
            await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—ç—à...")
        elif action == "full_report":
            await query.edit_message_text("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: {str(e)}")


async def handle_smart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–Ω—ã—Ö callback –∫–Ω–æ–ø–æ–∫"""
    if not update.callback_query or not context.user_data:
        return

    query = update.callback_query
    await query.answer()

    try:
        try:
            logger.info(f"SMART CB enter action={action} keys={list(context.user_data.keys())}")
            print(f"SMART CB enter action={action} keys={list(context.user_data.keys())}")
        except Exception:
            pass
        if action == "create_new_contact":
            await handle_smart_create_contact(update, context)
        elif action == "update_existing_contact":
            # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–≤–∫–ª—é—á–∞—è VAT –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è)
            await handle_smart_update_contact(update, context)
        elif action == "update_supplier_vat":
            await handle_smart_update_supplier_vat(update, context, refresh_cache=False)
        elif action == "update_supplier_vat_and_refresh":
            await handle_smart_update_supplier_vat(update, context, refresh_cache=True)
        elif action == "refresh_cache_only":
            await handle_smart_refresh_cache(update, context)
        elif action == "create_bill":
            await handle_smart_create_bill(update, context)
        elif action == "smart_analysis":
            await handle_smart_analysis(update, context)
        elif action.startswith("choose_account:"):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª account_id –¥–ª—è BILL
            print(f"üå∏ DEBUG: choose_account triggered - using pre-created payload")
            aid = action.split(":", 1)[1]
            pending = context.user_data.get('pending_bill') or {}
            org_id = pending.get('org_id')
            vendor_id = pending.get('vendor_id')
            payload = pending.get('payload') or {}
            print(f"üå∏ DEBUG: Payload has {len(payload.get('line_items', []))} line_items from pending_bill")
            if not (org_id and vendor_id and payload):
                await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è BILL")
                return
            # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π account_id –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –±–µ–∑ account
            try:
                for li in payload.get('line_items', []):
                    if not li.get('account_id'):
                        li['account_id'] = aid
            except Exception:
                pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º BILL –≤ Zoho
            import requests
            access_token = get_access_token()
            url = f"https://www.zohoapis.eu/books/v3/bills?organization_id={org_id}"
            headers = {"Authorization": f"Zoho-oauthtoken {access_token}", "Content-Type": "application/json"}
            r = requests.post(url, headers=headers, json=payload)
            ok = r.status_code in (200, 201) and 'bill' in (r.json() if r.content else {})
            try:
                logger.info(f"BILL(chosen) response: status={r.status_code} body={(r.text or '')[:400]}")
            except Exception:
                pass
            if ok:
                await query.edit_message_text("‚úÖ BILL —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è BILL: {r.status_code} {(r.text or '')[:200]}")
            context.user_data.pop('pending_bill', None)
            return
        elif action == "cancel_bill":
            context.user_data.pop('pending_bill', None)
            await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ BILL –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        elif action == "create_item":
            # –ü–µ—Ä–µ–≤–µ–¥—ë–º –¥–∏–∞–ª–æ–≥ –≤ —Ä–µ–∂–∏–º –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω–∏–≤ UI (–Ω–µ –∑–∞—Ç–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            await handle_smart_create_item(update, context)
            try:
                await query.answer()
            except Exception:
                pass
            return
        elif action.startswith("choose_branch_"):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª branch_id –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            branch_id = action.replace("choose_branch_", "")
            logger.info(f"üå∏ DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª branch_id: {branch_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            bill_payload = context.user_data.get('pending_bill_payload')
            analysis = context.user_data.get('pending_analysis')
            
            if not bill_payload or not analysis:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π branch_id –≤ payload
            bill_payload["branch_id"] = branch_id
            logger.info(f"üå∏ DEBUG: –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π branch_id –≤ payload: {branch_id}")
            
            # –°–æ–∑–¥–∞–µ–º Bill —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º branch
            try:
                from functions.zoho_api import create_bill
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
                supplier_name = analysis.get('supplier_name', '').lower()
                org_id = "20082562863"  # PARKENTERTAINMENT
                
                bill_response = create_bill(org_id, bill_payload)
                
                if bill_response.get('bill'):
                    bill_id = bill_response['bill'].get('bill_id')
                    bill_number = bill_response['bill'].get('bill_number', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
                    branch_name = bill_response['bill'].get('branch_name', 'Head Office')
                    await query.edit_message_text(f"‚úÖ Bill —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\nüìÑ ID: {bill_id}\nüî¢ –ù–æ–º–µ—Ä: {bill_number}\nüè¢ Branch: {branch_name}")
                else:
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bill: {bill_response}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bill —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º branch: {e}")
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bill: {str(e)}")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('pending_bill_payload', None)
            context.user_data.pop('pending_analysis', None)
            return
        elif action == "smart_refresh_cache":
            await handle_smart_refresh_cache(update, context)
        elif action == "smart_full_report":
            await handle_smart_full_report(update, context)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É–º–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {str(e)}")


async def handle_smart_create_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    if not update.callback_query or not context.user_data:
        return

    query = update.callback_query
    document_analysis = context.user_data.get('document_analysis')

    if not document_analysis:
        await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    try:
        # –ù–µ –ø–µ—Ä–µ—Ç–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å—Ç–∞—Ç—É—Å‚Äë—Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(chat_id=query.message.chat_id, text="üîÑ –°–æ–∑–¥–∞—é –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ contact_creator
        success, message = await create_supplier_from_document(document_analysis)

        if success:
            await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n{message}")
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {message}")

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}")


async def handle_smart_update_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±–µ—Ä—Ç—á–∏–∫: –Ω–∞—Ö–æ–¥–∏–º org/contact –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    if not update.callback_query or not context.user_data:
        return

    query = update.callback_query
    await context.bot.send_message(chat_id=query.message.chat_id, text="üîÑ –û–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...")

    try:
        result = context.user_data.get('smart_result')
        if not result:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞")
            return

        analysis = result.document_analysis
        org_id = '20082562863' if 'parkentertainment' in (analysis.get('our_company') or '').lower() else '20092948714'

        sc = context.user_data.get('supplier_check') or {}
        contact_id = (
            sc.get('contact_id') or (sc.get('contact') or {}).get('contact_id') or (sc.get('cached_contact') or {}).get('contact_id')
        )
        if not contact_id:
            from functions.zoho_api import get_contact_by_name
            contact = get_contact_by_name(analysis.get('supplier_name') or '', org_id)
            contact_id = contact.get('contact_id') if isinstance(contact, dict) else None
        if not contact_id:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
            return

        from src.infrastructure.zoho_api import ZohoAPIClient
        from config.zoho_auth import get_zoho_credentials
        creds = get_zoho_credentials()
        client = ZohoAPIClient(creds['client_id'], creds['client_secret'], creds['refresh_token'])

        from telegram_bot.services.zoho_contact_updater import update_contact as svc_update
        vat_ok, other_ok, _ = await svc_update(client, org_id, contact_id, analysis)

        if vat_ok and other_ok:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: VAT –∏ –ø—Ä–æ—á–∏–µ –ø–æ–ª—è")
        elif vat_ok:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: VAT")
        elif other_ok:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω (–±–µ–∑ VAT)")
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Zoho")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –∏–∑ Zoho, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—ã–π VAT –≤ –∫—ç—à–µ
        try:
            from functions.refresh_zoho_cache import refresh_single_contact_cache
            org_name = 'PARKENTERTAINMENT' if org_id == '20082562863' else 'TaVie Europe O√ú'
            cache_ok = await refresh_single_contact_cache(contact_id, org_id, org_name)
            if cache_ok:
                await context.bot.send_message(chat_id=query.message.chat_id, text="üîÑ –ö—ç—à –æ–±–Ω–æ–≤–ª—ë–Ω –∏–∑ Zoho")
        except Exception as ce:
            try:
                logger.warning(f"Cache refresh after update failed: {ce}")
            except Exception:
                pass

    except Exception as e:
        await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}")


async def handle_smart_update_supplier_vat(update: Update, context: ContextTypes.DEFAULT_TYPE, refresh_cache: bool = False) -> None:
    """–¢–æ—á–µ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ VAT –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º payload —á–µ—Ä–µ–∑ custom_fields –ø–æ index.

    –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ª—é–±—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –î–ª—è –ø–æ–ª—å—Å–∫–∏—Ö NIP –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å PL.
    """
    if not update.callback_query or not context.user_data:
        return
    query = update.callback_query
    await query.answer()

    try:
        analysis = (context.user_data.get('document_analysis') or {}).copy()
        supplier_check = context.user_data.get('supplier_check') or {}

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º org
        our_company = (analysis.get('our_company') or '').strip()
        org_id = '20082562863' if 'parkentertainment' in our_company.lower() else '20092948714'

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º contact_id
        contact_id = (
            supplier_check.get('contact_id') or
            (supplier_check.get('cached_contact') or {}).get('contact_id') or
            (supplier_check.get('contact') or {}).get('contact_id')
        )
        if not contact_id:
            from functions.zoho_api import get_contact_by_name
            lookup_name = analysis.get('supplier_name') or ''
            direct = get_contact_by_name(lookup_name, org_id)
            contact_id = direct.get('contact_id') if direct else None
        if not contact_id:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è VAT")
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ VAT: NIP –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞; –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ—Ñ–∏–∫—Å
        supplier_vat_val = (analysis.get('supplier_vat') or '').strip()
        try:
            if not supplier_vat_val and analysis.get('extracted_text'):
                import re
                m = re.search(r"\bNIP\s*[:#]?\s*(\d{10})\b", analysis['extracted_text'], re.IGNORECASE)
                if m:
                    supplier_vat_val = m.group(1)
        except Exception:
            pass
        if not supplier_vat_val:
            await query.edit_message_text("‚ùå –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω VAT/NIP –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return

        from src.domain.services.vat_validator import VATValidatorService
        vvs = VATValidatorService()
        # –î–ª—è –ü–æ–ª—å—à–∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä–∞–Ω—É PL, –∏–Ω–∞—á–µ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        expected_country = 'PL' if 'parkentertainment' in our_company.lower() or 'poland' in (analysis.get('supplier_country') or '').lower() else None
        validation = vvs.validate_vat(supplier_vat_val, expected_country=expected_country)
        if not validation.is_valid and expected_country != 'PL':
            # –§–æ–ª–±–µ–∫: –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è NIP, —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å—Å–∫–∏–º
            try:
                import re
                raw = analysis.get('extracted_text') or ''
                m = re.search(r"\bNIP\s*[:#]?\s*(\d{10})\b", raw, re.IGNORECASE)
                if m:
                    supplier_vat_val = m.group(1)
                    validation = vvs.validate_vat(supplier_vat_val, expected_country='PL')
            except Exception:
                pass
        if not validation.is_valid:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π VAT/NIP ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        vat_prefixed = vvs.add_country_prefix(validation.vat_number.value, expected_country or validation.country_code).replace(' ', '')

        # Zoho –∫–ª–∏–µ–Ω—Ç –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ–π
        from src.infrastructure.zoho_api import ZohoAPIClient
        from config.zoho_auth import get_zoho_credentials
        creds = get_zoho_credentials()
        client = ZohoAPIClient(creds['client_id'], creds['client_secret'], creds['refresh_token'])

        meta = await client.get_contact_custom_fields(org_id) or {}
        fields = (meta.get('customfields') or [])
        target_index = None
        for f in fields:
            if (f.get('module') == 'contacts'):
                lbl = (f.get('label') or '').strip().lower()
                api = (f.get('api_name') or '').strip().lower()
                if lbl in {'tax id','vat','vat id','vat number'} or api in {'cf_tax_id','cf_vat_id'}:
                    try:
                        target_index = int(f.get('index'))
                        break
                    except Exception:
                        pass
        url = f'https://www.zohoapis.eu/books/v3/contacts/{contact_id}?organization_id={org_id}'
        # –ü–ª–æ—Å–∫–∏–π JSON –±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏ 'contact'
        payload = {"custom_fields": [{"index": target_index, "value": vat_prefixed}]} if target_index is not None else {"tax_id": vat_prefixed}
        # –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: –æ–±—Ä–µ–∂–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        def _trim(v):
            if isinstance(v, str):
                return v[:100]
            if isinstance(v, list):
                return [_trim(x) for x in v]
            if isinstance(v, dict):
                return {k: _trim(val) for k, val in v.items()}
            return v
        resp = await client._make_request('PUT', url, json=_trim(payload))

        if resp and resp.get('contact'):
            msg = "‚úÖ VAT –æ–±–Ω–æ–≤–ª—ë–Ω"
            if refresh_cache:
                try:
                    await handle_smart_refresh_cache(update, context)
                except Exception:
                    pass
            await context.bot.send_message(chat_id=query.message.chat_id, text=msg)
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è VAT –≤ Zoho")

    except Exception as e:
        await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è VAT: {str(e)}")


async def handle_smart_refresh_cache(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞"""
    if not update.callback_query or not context.user_data:
        return

    query = update.callback_query

    try:
        await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—ç—à –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
        await query.edit_message_text("‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω!")

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {str(e)}")


async def handle_smart_create_item(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ ITEM"""
    if not update.callback_query or not context.user_data:
        return

    query = update.callback_query
    document_analysis = context.user_data.get('document_analysis')

    if not document_analysis:
        await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        vin = document_analysis.get('vin')
        car_model = document_analysis.get('car_model')
        cost_price = document_analysis.get('cost_price')

        if not vin or not car_model:
            await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ITEM (VIN –∏–ª–∏ –º–æ–¥–µ–ª—å)")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
        context.user_data['waiting_for_selling_price'] = True
        context.user_data['item_data'] = {
            'vin': vin,
            'car_model': car_model,
            'cost_price': cost_price
        }

        # –û—Ç–≤–µ—á–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –Ω–µ —É–±–∏—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await context.bot.send_message(chat_id=query.message.chat_id, text="üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤ EUR):")

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ITEM: {str(e)}")


async def handle_smart_create_bill(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ Bill –≤ Zoho (–≤–∫–ª—é—á–∞—è —Ü–≤–µ—Ç–æ—á–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã) –∏ –∫–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –≤ Zoho"."""
    logger.info(f"üå∏ DEBUG: handle_smart_create_bill STARTED")
    if not update.callback_query or not context.user_data:
        logger.info(f"üå∏ DEBUG: Early return - no callback_query or user_data")
        return
    query = update.callback_query
    analysis = context.user_data.get('document_analysis') or {}
    supplier_check = context.user_data.get('supplier_check') or {}
    processed_path = context.user_data.get('processed_file_path')
    logger.info(f"üå∏ DEBUG: analysis keys: {list(analysis.keys())}")

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
        our_company = (analysis.get('our_company') or '').strip()
        org_id = '20082562863' if 'parkentertainment' in our_company.lower() else '20092948714'

        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (—Å–Ω–∞—á–∞–ª–∞ —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ)
        vendor_id = (
            supplier_check.get('contact_id') or
            (supplier_check.get('cached_contact') or {}).get('contact_id') or
            (supplier_check.get('contact') or {}).get('contact_id')
        )
        if not vendor_id:
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ Zoho, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª—å
            found = find_supplier_in_zoho(org_id, analysis.get('supplier_name'), analysis.get('supplier_vat'))
            if found and found.get('contact_id'):
                vendor_id = found['contact_id']
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
                try:
                    success, msg = await create_supplier_from_document(analysis)
                    if not success:
                        await query.edit_message_text(f"‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ —Å–æ–∑–¥–∞–Ω: {msg}")
                        return
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å contact_id —á–µ—Ä–µ–∑ –∏–º—è
                    supplier_name = analysis.get('supplier_name') or ''
                    contact = get_contact_by_name(supplier_name, org_id)
                    vendor_id = contact.get('contact_id') if contact else None
                except Exception as ce:
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(ce)}")
                    return
        if not vendor_id:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
            return

        # –î–∞—Ç—ã
        def normalize_date(raw: Optional[str]) -> str:
            if not raw:
                return datetime.utcnow().strftime('%Y-%m-%d')
            raw = raw.strip()
            fmts = ["%d/%m/%Y", "%Y-%m-%d", "%d.%m.%Y", "%Y.%m.%d", "%m/%d/%Y", "%d-%m-%Y", "%Y/%m/%d", "%B %d, %Y", "%b %d, %Y"]
            for fmt in fmts:
                try:
                    return datetime.strptime(raw, fmt).strftime('%Y-%m-%d')
                except Exception:
                    continue
            cleaned = raw.replace(' ', '/').replace('.', '/').replace('-', '/')
            for fmt in ("%d/%m/%Y", "%Y/%m/%d", "%m/%d/%Y"):
                try:
                    return datetime.strptime(cleaned, fmt).strftime('%Y-%m-%d')
                except Exception:
                    continue
            return datetime.utcnow().strftime('%Y-%m-%d')

        # –ü—ã—Ç–∞–µ–º—Å—è –±—Ä–∞—Ç—å –¥–∞—Ç—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞, –∏–Ω–∞—á–µ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–ª—é—á–∞–º; —Ç–æ–ª—å–∫–æ –∑–∞—Ç–µ–º fallback=—Å–µ–≥–æ–¥–Ω—è
        bill_date = None
        if analysis.get('issue_date') or analysis.get('document_date') or analysis.get('date'):
            bill_date = normalize_date(analysis.get('issue_date') or analysis.get('document_date') or analysis.get('date'))
        else:
            txt = analysis.get('extracted_text') or ''
            m = re.search(r"(date of issue|issue date)\s*[:\-]*\s*([A-Za-z]{3,9}\s+\d{1,2},\s*\d{4}|\d{1,2}[./-]\d{1,2}[./-]\d{2,4}|\d{4}-\d{2}-\d{2})", txt, re.IGNORECASE)
            if m:
                bill_date = normalize_date(m.group(2))
        if not bill_date:
            bill_date = datetime.utcnow().strftime('%Y-%m-%d')

        due_date = None
        if analysis.get('due_date'):
            due_date = normalize_date(analysis.get('due_date'))
        else:
            txt = analysis.get('extracted_text') or ''
            m = re.search(r"(date due|due date|payment due)\s*[:\-]*\s*([A-Za-z]{3,9}\s+\d{1,2},\s*\d{4}|\d{1,2}[./-]\d{1,2}[./-]\d{2,4}|\d{4}-\d{2}-\d{2})", txt, re.IGNORECASE)
            if m:
                due_date = normalize_date(m.group(2))

        # –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞
        bill_number = (analysis.get('bill_number') or '').strip().rstrip('/') or None

        # Line items (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞)
        logger.info(f"üå∏ DEBUG: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º line_items")
        line_items = []
        # –ü–æ–ø—ã—Ç–∫–∞ —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        logger.info(f"üå∏ DEBUG: –î–æ—Å—Ç–∏–≥–ª–∏ —Å–µ–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–≤–µ—Ç–æ–≤")
        flower_lines = analysis.get('flower_lines') or []
        logger.info(f"üå∏ DEBUG: –ù–∞—á–∞–ª—å–Ω—ã–µ flower_lines –∏–∑ analysis: {len(flower_lines)} –ø–æ–∑–∏—Ü–∏–π")
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä—ã –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º flower_lines –∏–∑ analysis)
        llm_cat = (analysis.get('product_category') or analysis.get('document_category') or '').upper()
        detected_flower_names = analysis.get('detected_flower_names') or []
        logger.info(f"üå∏ DEBUG: –í handlers - llm_cat='{llm_cat}', detected_flower_names={len(detected_flower_names)} —à—Ç")
        logger.info(f"üå∏ DEBUG: –£—Å–ª–æ–≤–∏–µ: llm_cat == 'FLOWERS' = {llm_cat == 'FLOWERS'}, bool(detected_flower_names) = {bool(detected_flower_names)}")
        
                # –û–ü–†–ï–î–ï–õ–Ø–ï–ú inclusive –î–û –ü–ê–†–°–ò–ù–ì–ê –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ perfect parser
        doc_text_lower = (analysis.get('extracted_text') or '').lower()
        
        # –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
        # 1. HIBISPOL (—Ü–≤–µ—Ç—ã): "cena brutto" –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ ‚Üí inclusive = True
        # 2. –û—Å—Ç–∞–ª—å–Ω—ã–µ: "warto≈õƒá netto" –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö ‚Üí inclusive = False
        
        hibispol_brutto_pattern = "cena brutto" in doc_text_lower or "cena przed" in doc_text_lower
        netto_price_pattern = "warto≈õƒá netto" in doc_text_lower and "cena jdn" in doc_text_lower
        
        # Fallback –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
        inclusive_markers = ["brutto", "gross", "tax inclusive", "cena brutto", "kwota brutto"]
        exclusive_markers = ["netto", "net price", "cena netto", "kwota netto", "tax exclusive"]
        
        inclusive_found = any(m in doc_text_lower for m in inclusive_markers)
        exclusive_found = any(m in doc_text_lower for m in exclusive_markers)
        
        logger.info(f"üå∏ DEBUG: –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã - hibispol_brutto: {hibispol_brutto_pattern}, netto_price: {netto_price_pattern}")
        logger.info(f"üå∏ DEBUG: Fallback –º–∞—Ä–∫–µ—Ä—ã - brutto: {inclusive_found}, netto: {exclusive_found}")
        
        # –ü–†–ò–û–†–ò–¢–ï–¢: —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if hibispol_brutto_pattern:
            inclusive = True
            logger.info("üå∏ DEBUG: HIBISPOL —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Üí INCLUSIVE (cena brutto)")
        elif netto_price_pattern:
            inclusive = False
            logger.info("üå∏ DEBUG: –ù–µ—Ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Üí EXCLUSIVE (warto≈õƒá netto)")
        # Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
        elif exclusive_found and not inclusive_found:
            inclusive = False
        elif inclusive_found:
            inclusive = True
        else:
            inclusive = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é exclusive
        
        logger.info(f"üå∏ DEBUG: –ò—Ç–æ–≥–æ–≤—ã–π –Ω–∞–ª–æ–≥ {'INCLUSIVE (brutto)' if inclusive else 'EXCLUSIVE (netto)'}")
        
        if llm_cat == 'FLOWERS' and detected_flower_names:
            logger.info(f"üå∏ DEBUG: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (LLM cat={llm_cat}, flowers={len(detected_flower_names)})")
            flower_lines = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            raw_text = analysis.get('extracted_text') or ''
            try:
                # 1) –ù–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ –±–ª–æ–∫–∞–º (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º)
                parsed_blocks = parse_invoice_items(raw_text)
                logger.info(f"üå∏ DEBUG: parse_invoice_items –Ω–∞—à–µ–ª {len(parsed_blocks)} –ø–æ–∑–∏—Ü–∏–π")
                
                # 2) OCR –æ–∫–Ω–∞ –º–µ—Ç–æ–¥ (–≤—Å–µ–≥–¥–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
                parsed_ocr = extract_flower_lines_from_ocr(raw_text)
                logger.info(f"üå∏ DEBUG: extract_flower_lines_from_ocr –Ω–∞—à–µ–ª {len(parsed_ocr) if parsed_ocr else 0} –ø–æ–∑–∏—Ü–∏–π")
                
                # 3) –ù–û–í–´–ô –ü–û–õ–ù–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º (–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –≤—Å–µ 27 –ø–æ–∑–∏—Ü–∏–π)
                parsed_complete = extract_all_flower_positions(raw_text)
                formatted_complete = format_for_telegram_bot(parsed_complete) if parsed_complete else []
                logger.info(f"üå∏ DEBUG: extract_all_flower_positions –Ω–∞—à–µ–ª {len(formatted_complete)} –ø–æ–∑–∏—Ü–∏–π")
                
                # 4) –ü–†–Ø–ú–û–ô PDF –ü–ê–†–°–ï–† (–ë–ï–ó OCR) - –ù–û–í–´–ô!
                parsed_pdf = []
                logger.info(f"üå∏ DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º PDF –ø–∞—Ä—Å–µ—Ä - processed_path = {processed_path}")
                
                if processed_path:
                    logger.info(f"üå∏ DEBUG: processed_path –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º is_suitable_for_pdf_parsing...")
                    
                    if is_suitable_for_pdf_parsing(processed_path):
                        logger.info(f"üå∏ DEBUG: PDF –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è {processed_path}")
                        pdf_raw = extract_flower_positions_from_pdf(processed_path)
                        parsed_pdf = format_pdf_result(pdf_raw) if pdf_raw else []
                        logger.info(f"üå∏ DEBUG: PDF –ø–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª {len(parsed_pdf)} –ø–æ–∑–∏—Ü–∏–π")
                        
                        # –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ–∑–∏—Ü–∏–π PDF –ø–∞—Ä—Å–µ—Ä–∞
                        if parsed_pdf:
                            logger.info(f"üå∏ DEBUG PDF –î–ê–ù–ù–´–ï (–ø–µ—Ä–≤—ã–µ 5):")
                            for i, item in enumerate(parsed_pdf[:5]):
                                logger.info(f"  {i+1}. {item.get('name', 'N/A')} | qty={item.get('quantity', 0)} | price={item.get('price_net', 0)}")
                        
                        # –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                        key_positions = [5, 6, 11]  # DI ST ZEPPELIN, Di St Fl Moonaqua, R GR EXPLORER
                        for pos_idx in key_positions:
                            if pos_idx <= len(parsed_pdf):
                                item = parsed_pdf[pos_idx-1]
                                logger.info(f"üå∏ DEBUG PDF –ø–æ–∑.{pos_idx}: {item.get('name', 'N/A')} | qty={item.get('quantity', 0)} | price={item.get('price_net', 0)}")
                    else:
                        logger.info(f"üå∏ DEBUG: PDF –ø–∞—Ä—Å–∏–Ω–≥ –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è {processed_path}")
                else:
                    logger.info("üå∏ DEBUG: processed_path –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - PDF –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω")
                
                # üéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –õ–û–ì–ò–ö–ê: PDFPlumber –ü–ï–†–í–´–ô –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è
                best_result = None
                best_count = 0
                best_method = ""
                
                # üöÄ –ü–†–û–í–ï–†–Ø–ï–ú PDFPLUMBER –ü–ï–†–í–´–ú - –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–ª–æ–µ–º
                if processed_path:
                    try:
                        from functions.pdfplumber_flower_parser import extract_flower_positions_pdfplumber, convert_to_zoho_format
                        parsed_pdfplumber_raw = extract_flower_positions_pdfplumber(processed_path)
                        parsed_pdfplumber = convert_to_zoho_format(parsed_pdfplumber_raw)
                        if parsed_pdfplumber and len(parsed_pdfplumber) > 0:
                            best_result = parsed_pdfplumber
                            best_count = len(parsed_pdfplumber)
                            best_method = "pdfplumber_parser"
                            logger.info(f"üéØ –ü–†–ò–û–†–ò–¢–ï–¢: PDFPlumber –≤—ã–±—Ä–∞–Ω —Å {len(parsed_pdfplumber)} –ø–æ–∑–∏—Ü–∏—è–º–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π)")
                        else:
                            logger.info(f"üöÄ PDFPlumber: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ PDFPlumber: {e}")
                
                # –ï—Å–ª–∏ PDFPlumber –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                if not best_result:
                    logger.info("üîÑ PDFPlumber –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã...")
                    
                    # –ü—Ä–æ–±—É–µ–º PDFMiner –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
                    parsed_pdfminer = []
                    if processed_path:
                        try:
                            from functions.pdfminer_flower_parser import extract_flowers_with_pdfminer
                            parsed_pdfminer = extract_flowers_with_pdfminer(processed_path)
                            logger.info(f"üå∏ DEBUG: PDFMiner –Ω–∞—à–µ–ª {len(parsed_pdfminer)} –ø–æ–∑–∏—Ü–∏–π")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ PDFMiner: {e}")
                    
                    candidates = [
                        (parsed_blocks, "parse_invoice_items"),
                        (parsed_ocr, "extract_flower_lines_from_ocr"),
                        (formatted_complete, "extract_all_flower_positions"),
                        (parsed_pdf, "pdf_direct_parser"),
                        (parsed_pdfminer, "pdfminer_flower_parser")
                    ]
                    
                    for result, method_name in candidates:
                        if result and len(result) > best_count:
                            best_result = result
                            best_count = len(result)
                            best_method = method_name
                
                if best_result:
                    logger.info(f"üå∏ DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º {best_method} ({best_count} –ø–æ–∑–∏—Ü–∏–π)")
                    if best_method == "pdfplumber_parser":
                        # üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ò–î–ï–ê–õ–¨–ù–´–ô –ü–ê–†–°–ï–† –í–ú–ï–°–¢–û –°–õ–û–ñ–ù–û–ô –õ–û–ì–ò–ö–ò
                        try:
                            from functions.perfect_flower_parser import extract_perfect_flower_data, convert_to_zoho_line_items
                            perfect_positions = extract_perfect_flower_data(processed_path)
                            # –ü–ï–†–ï–î–ê–ï–ú inclusive=True –¥–ª—è brutto –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ò org_id –¥–ª—è –Ω–∞–ª–æ–≥–æ–≤
                            line_items = convert_to_zoho_line_items(perfect_positions, inclusive_tax=inclusive, org_id=org_id)
                            logger.info(f"üå∏ PERFECT: –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(line_items)} –ø–æ–∑–∏—Ü–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ (inclusive={inclusive})")
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—é –æ—Å—Ç–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è flower_lines
                            skip_flower_processing = True
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ perfect parser: {e}")
                            flower_lines = best_result
                            skip_flower_processing = False
                    elif best_method == "parse_invoice_items":
                        flower_lines = [
                            {
                                'name': p['name'],
                                'quantity': p['quantity'],
                                'price_net': p.get('unit_price_netto'),
                                'tax_percent': p.get('vat_percent', 8)
                            }
                            for p in best_result
                        ]
                        skip_flower_processing = False
                    else:
                        flower_lines = best_result
                        skip_flower_processing = False
                else:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ—Ç best_result
                    flower_lines = []
                    skip_flower_processing = False
                
                # 3) –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –º–∞–ª–æ –ø–æ–∑–∏—Ü–∏–π ‚Äî –ø—Ä–æ–±—É–µ–º Assistants API
                if len(flower_lines) < 15:  # –û–∂–∏–¥–∞–µ–º 27, –µ—Å–ª–∏ < 15 —Ç–æ –ø—Ä–æ–±—É–µ–º API
                    try:
                        if processed_path:
                            logger.info(f"üå∏ DEBUG: –ü—Ä–æ–±—É–µ–º Assistants API –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è (—Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {len(flower_lines)})")
                            assistant_data = analyze_proforma_via_agent(processed_path)
                            ai_flower_lines = assistant_data.get('flower_lines') or []
                            logger.info(f"üå∏ DEBUG: Assistants API –Ω–∞—à–µ–ª {len(ai_flower_lines)} –ø–æ–∑–∏—Ü–∏–π")
                            if len(ai_flower_lines) > len(flower_lines):
                                print(f"üå∏ DEBUG: Assistants API –ª—É—á—à–µ! –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                                flower_lines = ai_flower_lines
                    except Exception as e:
                        print(f"üå∏ DEBUG: Assistants API failed: {e}")
            except Exception:
                pass
        else:
            # –î–ª—è –Ω–µ—Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            if not flower_lines:
                print(f"üå∏ DEBUG: –ù–µ—Ü–≤–µ—Ç–æ—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, flower_lines –ø—É—Å—Ç—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–±—ç–∫")
                pass  # –§–æ–ª–±—ç–∫ –ª–æ–≥–∏–∫–∞ –Ω–∏–∂–µ
        flowers_account_id = None
        try:
            accounts = get_accounts_cached_or_fetch(org_id, 'PARKENTERTAINMENT Sp. z o. o.' if org_id == '20082562863' else 'TaVie Europe O√ú')
            print(f"üîç DEBUG: loaded {len(accounts)} accounts for account selection")
            for acc in accounts:
                if (acc.get('account_name') or '').strip().lower() == 'flowers':
                    flowers_account_id = acc.get('account_id')
                    break
        except Exception:
            accounts = []
            pass

        # inclusive —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—ã—à–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ perfect parser

        # –ù–∞–¥—ë–∂–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        txt_lower = (analysis.get('extracted_text') or '').lower()
        occ_szt = txt_lower.count(' szt') + txt_lower.count('\nszt') + txt_lower.count('szt ')
        occ_pct = txt_lower.count('8%') + txt_lower.count('23%')
        occ_names = any(k in txt_lower for k in [
            'dahl', 'mondial', 'ruscus', 'gypsophila', 'alstr', 'tana', 'helian', 'delph'
        ])
        # –¶–≤–µ—Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ LLM-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–≤—ã—è–≤–ª–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º —Ü–≤–µ—Ç–æ–≤
        llm_cat = (analysis.get('product_category') or analysis.get('document_category') or '').upper()
        detected_flower_names = analysis.get('detected_flower_names') or []
        print(f"üå∏ DEBUG: –í create_bill - llm_cat='{llm_cat}', detected_flower_names={len(detected_flower_names)} —à—Ç")
        is_flowers_doc = bool(flower_lines) or (llm_cat == 'FLOWERS' and bool(detected_flower_names))

        print(f"üå∏ DEBUG: –ò—Ç–æ–≥–æ flower_lines –Ω–∞–π–¥–µ–Ω–æ: {len(flower_lines)}")
        
        # üéØ –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º perfect parser, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—é —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É
        if locals().get('skip_flower_processing', False):
            logger.info(f"üå∏ PERFECT: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É, line_items —É–∂–µ –≥–æ—Ç–æ–≤—ã ({len(line_items)} —à—Ç)")
        elif flower_lines:
            # –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ tax_id –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É
            def _tax_id_for(percent: float | int | None):
                try:
                    p = float(percent or 0)
                except Exception:
                    p = 0.0
                return find_tax_by_percent(org_id, p) if p > 0 else ("-1" if not inclusive else None)

            for fl in flower_lines:
                try:
                    name = str(fl.get('name') or fl.get('description') or 'Flowers')
                    qty = float(fl.get('quantity') or 1)
                    # VAT % –¥–ª—è —Å—Ç—Ä–æ–∫–∏: –∏–∑ –ª–∏–Ω–∏–∏, –∏–Ω–∞—á–µ –∏–∑ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –∏–Ω–∞—á–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ (—Ü–≤–µ—Ç—ã —á–∞—Å—Ç–æ 8%)
                    line_tax_percent = (
                        fl.get('tax_percent') or fl.get('vat_percent') or analysis.get('tax_rate')
                    )
                    if line_tax_percent is None:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º VAT –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º –≤ —Å–∞–º–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏
                        if '8%' in name or '8 %' in name or ' 8 ' in name:
                            line_tax_percent = 8
                        elif '23%' in name or '23 %' in name:
                            line_tax_percent = 23
                        else:
                            line_tax_percent = 8  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç –¥–ª—è —Ü–≤–µ—Ç–æ–≤
                            # TODO: –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å VAT –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞, –∞ –Ω–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º

                    # –ë–µ—Ä–µ–º —Ü–µ–Ω—É –ü–†–Ø–ú–û –∏–∑ PDF –ë–ï–ó –ø–µ—Ä–µ—Å—á–µ—Ç–∞ - Zoho —Å–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –Ω–∞–ª–æ–≥
                    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–≤–∫–ª—é—á–∞—è PDFPlumber)
                    price_net = (fl.get('price_net') or fl.get('unit_price') or 
                                fl.get('unit_price_netto') or fl.get('price_netto') or fl.get('rate'))
                    price_gross = (fl.get('price_gross') or fl.get('unit_price_brutto') or 
                                  fl.get('unit_price_brutto'))
                    
                    # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¶–ï–ù–´
                    if name == "Hydr M White Verena":  # –ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        logger.info(f"üîç PRICE DEBUG: name={name}")
                        logger.info(f"üîç PRICE DEBUG: fl keys={list(fl.keys())}")
                        logger.info(f"üîç PRICE DEBUG: fl.rate={fl.get('rate')}")
                        logger.info(f"üîç PRICE DEBUG: price_net={price_net}")
                        logger.info(f"üîç PRICE DEBUG: price_gross={price_gross}")
                        logger.info(f"üîç PRICE DEBUG: inclusive={inclusive}")
                    
                    try:
                        if inclusive:
                            # –î–æ–∫—É–º–µ–Ω—Ç —Å brutto —Ü–µ–Ω–∞–º–∏ - –±–µ—Ä–µ–º gross —Ü–µ–Ω—É –∫–∞–∫ –µ—Å—Ç—å
                            rate = float(price_gross or price_net or 0)
                        else:
                            # –î–æ–∫—É–º–µ–Ω—Ç —Å netto —Ü–µ–Ω–∞–º–∏ - –±–µ—Ä–µ–º net —Ü–µ–Ω—É –∫–∞–∫ –µ—Å—Ç—å  
                            rate = float(price_net or price_gross or 0)
                        
                        # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê
                        if name == "Hydr M White Verena":
                            logger.info(f"üîç PRICE DEBUG: final rate={rate}")
                            
                    except Exception as e:
                        rate = float(price_gross or price_net or 0)
                        if name == "Hydr M White Verena":
                            logger.info(f"üîç PRICE DEBUG: exception={e}, fallback rate={rate}")

                    item = {
                        "name": name[:200],
                        "description": name[:2000],
                        "quantity": qty,
                        "rate": rate,
                    }
                    # account
                    if flowers_account_id:
                        item["account_id"] = flowers_account_id
                    # –Ω–∞–ª–æ–≥ –Ω–∞ —Å—Ç—Ä–æ–∫—É
                    tid = _tax_id_for(line_tax_percent)
                    if tid:
                        item["tax_id"] = tid
                    else:
                        # –ï—Å–ª–∏ inclusive –∏ —Å—Ç–∞–≤–∫–∞ 0 ‚Äî —è–≤–Ω–æ –≤—ã–∫–ª—é—á–∏–º –Ω–∞–ª–æ–≥
                        item["tax_id"] = "-1"

                    line_items.append(item)
                except Exception:
                    continue
        else:
            # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ü–≤–µ—Ç–æ—á–Ω—ã–π, –Ω–æ —Å—Ç—Ä–æ–∫–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã ‚Äî –ø—Ä–æ–±—É–µ–º Assistants API –∫–∞–∫ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ
            if is_flowers_doc:
                try:
                    if processed_path:
                        assistant_data = analyze_proforma_via_agent(processed_path)
                        ai_flower_lines = assistant_data.get('flower_lines') or []
                        if ai_flower_lines:
                            flower_lines = ai_flower_lines
                            is_flowers_doc = True
                            # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –≤—ã—à–µ
                            def _tax_id_for(percent: float | int | None):
                                try:
                                    p = float(percent or 0)
                                except Exception:
                                    p = 0.0
                                return find_tax_by_percent(org_id, p) if p > 0 else ("-1" if not inclusive else None)
                            for fl in flower_lines:
                                try:
                                    name = str(fl.get('name') or fl.get('description') or 'Flowers')
                                    qty = float(fl.get('quantity') or 1)
                                    line_tax_percent = (
                                        fl.get('tax_percent') or fl.get('vat_percent') or analysis.get('tax_rate') or 8
                                    )
                                    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö
                                    price_net = (fl.get('unit_price_net') or fl.get('price_net') or 
                                                fl.get('price_netto') or fl.get('unit_price_netto'))
                                    price_gross = (fl.get('unit_price_gross') or fl.get('price_gross') or 
                                                  fl.get('unit_price_brutto'))
                                    
                                    if inclusive and price_gross:
                                        rate = float(price_gross)
                                    elif price_net:
                                        rate = float(price_net)
                                    else:
                                        # PDFPlumber —Ñ–æ—Ä–º–∞—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'rate' –Ω–∞–ø—Ä—è–º—É—é
                                        rate = float(fl.get('rate') or fl.get('unit_price') or 0)
                                    item = {"name": name[:200], "description": name[:2000], "quantity": qty, "rate": rate}
                                    if flowers_account_id:
                                        item["account_id"] = flowers_account_id
                                    tid = _tax_id_for(line_tax_percent)
                                    if tid:
                                        item["tax_id"] = tid
                                    else:
                                        item["tax_id"] = "-1"
                                    line_items.append(item)
                                except Exception:
                                    continue
                except Exception:
                    pass
                if not line_items:
                    # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –Ω–µ —Å—Ç–∏—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    try:
                        await query.answer()
                    except Exception:
                        pass
                    await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∫–∞–Ω–∞ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á—à–µ ‚Äî —Å—Ç—Ä–æ–∫–∏ –Ω–µ –±—É–¥—É—Ç —Å–æ–±—Ä–∞–Ω—ã –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
                    return
            # –§–æ–ª–±—ç–∫: —É—Å–ª—É–≥–∏/—Ç–æ–≤–∞—Ä—ã –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–¥–ª—è –Ω–µ—Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
            # –û–ø–∏—Å–∞–Ω–∏–µ: LLM service_description, –∏–Ω–∞—á–µ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ "Description"
            desc = analysis.get('service_description') or analysis.get('item_details')
            if not desc:
                raw_text = analysis.get('extracted_text') or ''
                m = re.search(r"Description\s*[\r\n]+(.{3,120})", raw_text, re.IGNORECASE)
                if m:
                    desc = m.group(1).strip()
            if not desc:
                desc = 'Goods/Services'
            # Rate: Anchor Unit price
            rate = None
            try:
                raw_text = analysis.get('extracted_text') or ''
                m = re.search(r"Unit\s*price\s*\D*([0-9]+[.,][0-9]{2})", raw_text, re.IGNORECASE)
                if m:
                    rate = float(m.group(1).replace(',', '.'))
            except Exception:
                rate = None
            if rate is None:
                rate = float(analysis.get('total_amount') or 0)
            item = {"name": desc[:200], "description": desc[:2000], "quantity": 1, "rate": rate}
            line_items.append(item)

        # –ù–∞–∑–Ω–∞—á–∞–µ–º account_id –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏: LLM-–≤—ã–±–æ—Ä –∏–∑ –∫—ç—à–∞
        try:
            from functions.llm_document_extractor import llm_select_account
            chosen_account_id = None
            acc_names = [a.get('account_name') for a in accounts if (a.get('account_name'))]
            print(f"üîç DEBUG: total accounts={len(accounts)}, account_names={len(acc_names)}")
            llm_pick = {}
            try:
                context_for_account = analysis.get('extracted_text') or ''
                llm_pick = llm_select_account([str(n) for n in acc_names], context_for_account, supplier_name=analysis.get('supplier_name') or '', category=(analysis.get('document_category') or ''))
                print(f"üîç DEBUG llm_select_account: pick={llm_pick}, acc_names={acc_names[:3]}...")
            except Exception as e:
                print(f"‚ùå llm_select_account failed: {e}")
                llm_pick = {}
            if llm_pick and llm_pick.get('name') in acc_names and float(llm_pick.get('confidence') or 0) >= 0.6:
                print(f"‚úÖ LLM –≤—ã–±—Ä–∞–ª –≤–∞–ª–∏–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {llm_pick['name']}")
                for acc in accounts:
                    if acc.get('account_name') == llm_pick['name']:
                        chosen_account_id = acc.get('account_id')
                        break
            else:
                if llm_pick:
                    print(f"‚ùå LLM –≤—ã–±—Ä–∞–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç '{llm_pick.get('name')}' —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {llm_pick.get('confidence')}")
            if not chosen_account_id:
                # –¥–µ—Ñ–æ–ª—Ç–Ω–æ ‚Äî –ø–µ—Ä–≤—ã–π —Ä–∞—Å—Ö–æ–¥–Ω—ã–π —Å—á—ë—Ç
                for acc in accounts:
                    if (acc.get('account_type') or '').strip().lower() in {'expense', 'cost of goods sold'}:
                        chosen_account_id = acc.get('account_id')
                        break

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è account_id
            llm_cat = (analysis.get('document_category') or '').upper()
            detected_flower_names = analysis.get('detected_flower_names') or []
            
            for li in line_items:
                if 'account_id' not in li or not li['account_id']:
                    # –¢–æ–ª—å–∫–æ –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º flowers_account_id
                    if (llm_cat == 'FLOWERS' and detected_flower_names and flowers_account_id):
                        li['account_id'] = flowers_account_id
                    else:
                        # –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM-–≤—ã–±—Ä–∞–Ω–Ω—ã–π account
                        li['account_id'] = chosen_account_id
        except Exception:
            pass

        # –ù–∞–ª–æ–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–æ–ª–±–µ–∫): –µ—Å–ª–∏ —É —Å—Ç—Ä–æ–∫–∏ –µ—â—ë –Ω–µ—Ç tax_id
        try:
            tax_percent = float(analysis.get('tax_rate') or 0)
        except Exception:
            tax_percent = 0.0
        tax_id_global = find_tax_by_percent(org_id, tax_percent) if tax_percent > 0 else None
        for li in line_items:
            if 'tax_id' not in li:
                if tax_id_global:
                    li['tax_id'] = tax_id_global
                else:
                    li['tax_id'] = "-1" if not inclusive else li.get('tax_id')

        # Branch (–¥–ª—è PARKENTERTAINMENT —Ü–≤–µ—Ç—ã)
        llm_cat = (analysis.get('product_category') or analysis.get('document_category') or '').upper()
        detected_flower_names = analysis.get('detected_flower_names') or []
        is_flowers_doc = bool(flower_lines) or (llm_cat == 'FLOWERS' and bool(detected_flower_names))
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º branch_id —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        branch_id = None
        if org_id == '20082562863':  # PARKENTERTAINMENT
            doc_text_full = (analysis.get('extracted_text') or '').lower()
            supplier_address = (analysis.get('supplier_address') or '').lower()
            
            if is_flowers_doc:
                # –î–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º branch –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –∏ –º–∞—Ä–∫–µ—Ä–∞–º
                supplier_name = (analysis.get('supplier_name') or '').lower()
                
                if 'hibispol' in supplier_name and ('wile≈Ñska' in doc_text_full or 'wile≈Ñska' in supplier_address or 'praga' in doc_text_full or 'praga' in supplier_address):
                    preferred = ["Wile≈Ñska"]
                    logger.info("üå∏ DEBUG: HIBISPOL + Wile≈Ñska/Praga –º–∞—Ä–∫–µ—Ä ‚Üí branch Wile≈Ñska")
                elif 'browary' in doc_text_full or 'browary' in supplier_address:
                    preferred = ["Iris flowers atelier"] 
                    logger.info("üå∏ DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ä–∫–µ—Ä Browary ‚Üí branch Iris flowers atelier")
                elif 'hibispol' in supplier_name:
                    # Hibispol –±–µ–∑ —è–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ - –≤—Å–µ —Ä–∞–≤–Ω–æ Wile≈Ñska
                    preferred = ["Wile≈Ñska"]
                    logger.info("üå∏ DEBUG: HIBISPOL (–±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤) ‚Üí branch Wile≈Ñska")
                else:
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–æ—á–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ ‚Üí Iris flowers atelier –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    preferred = ["Iris flowers atelier"]
                    logger.info("üå∏ DEBUG: –¶–≤–µ—Ç–æ—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–µ Hibispol) ‚Üí branch Iris flowers atelier")
                
                branch_id = find_branch_id(org_id, preferred)
                if branch_id:
                    logger.info(f"üå∏ DEBUG: –ù–∞–π–¥–µ–Ω branch_id: {branch_id}")
                else:
                    logger.info("üå∏ DEBUG: Branch –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ–∫–∞–∂–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞")
                    # –ï—Å–ª–∏ branch –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
                    branch_id = None
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - head office
                preferred = ["head office"]
                branch_id = find_branch_id(org_id, preferred)
                if not branch_id:
                    logger.info("üè¢ DEBUG: Branches –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Zoho - –∏—Å–ø–æ–ª—å–∑—É–µ–º default –æ—Ñ–∏—Å")

        # Inclusive tax —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤—ã—à–µ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º/–ª–∏–Ω–∏—è–º
        
        logger.info(f"üå∏ DEBUG: –ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º bill_payload, line_items={len(line_items)}")
        print(f"üå∏ DEBUG: –°–æ–∑–¥–∞—ë–º bill_payload —Å {len(line_items)} line_items")
        
        # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï LINE_ITEMS –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô
        for i, item in enumerate(line_items[:5]):  # –ü–µ—Ä–≤—ã–µ 5 –ø–æ–∑–∏—Ü–∏–π
            logger.info(f"LINE_ITEM[{i+1}]: {item.get('name', 'NO_NAME')} | qty={item.get('quantity', 'NO_QTY')} | rate={item.get('rate', 'NO_RATE')} | account_id={item.get('account_id', 'NO_ACC')}")
        if len(line_items) > 5:
            logger.info(f"... –∏ –µ—â–µ {len(line_items) - 5} –ø–æ–∑–∏—Ü–∏–π")

        bill_payload = {
            "vendor_id": vendor_id,
            "bill_number": bill_number,
            "date": bill_date,
            "due_date": due_date,
            "line_items": line_items,
            "notes": analysis.get('notes_for_bill') or analysis.get('notes') or '',
        }
        # –ü–µ—Ä–µ–¥–∞–µ–º branch_id –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –Ω–∞—Å—Ç–æ—è—â–∏–π branch
        if branch_id:
            bill_payload["branch_id"] = branch_id
            logger.info(f"üå∏ DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º branch_id: {branch_id}")
        else:
            logger.info("üå∏ DEBUG: Branch_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º Head Office")
        bill_payload["is_inclusive_tax"] = bool(inclusive)

        # –ï—Å–ª–∏ branch –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
        if is_flowers_doc and not branch_id and org_id == '20082562863':
            logger.info("üå∏ DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ branch –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º payload –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ branch
            context.user_data['pending_bill_payload'] = bill_payload
            context.user_data['pending_analysis'] = analysis
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ branch
            branch_keyboard = [
                [InlineKeyboardButton("üè¢ Head Office", callback_data="choose_branch_281497000000355003")],
                [InlineKeyboardButton("üå∏ Iris flowers atelier", callback_data="choose_branch_281497000000355063")], 
                [InlineKeyboardButton("üè™ Wile≈Ñska", callback_data="choose_branch_281497000002901751")]
            ]
            reply_markup = InlineKeyboardMarkup(branch_keyboard)
            
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üå∏ –í—ã–±–µ—Ä–∏—Ç–µ branch –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:",
                reply_markup=reply_markup
            )
            return
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å account, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            missing_account = any(not li.get('account_id') for li in line_items)
            if missing_account:
                # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ (expense/COGS)
                name_to_id = { (acc.get('account_name') or '').strip(): acc.get('account_id') for acc in (accounts or []) }
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
                prioritized: list[tuple[str, str]] = []
                # –î–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω—ã–º–∏/COGS
                for acc in (accounts or []):
                    t = (acc.get('account_type') or '').strip().lower()
                    nm = (acc.get('account_name') or '').strip()
                    if t in {'expense', 'cost of goods sold'} and (nm, acc.get('account_id')) not in prioritized:
                        prioritized.append((nm, acc.get('account_id')))

                # –û–≥—Ä–∞–Ω–∏—á–∏–º —Å–ø–∏—Å–æ–∫ –∏ –ø–æ—Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                top = prioritized[:8] if prioritized else []
                if not top:
                    await query.edit_message_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π account. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—á–µ—Ç–æ–≤ –≤ Zoho.")
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º pending bill
                context.user_data['pending_bill'] = {
                    'org_id': org_id,
                    'vendor_id': vendor_id,
                    'payload': bill_payload,
                }
                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –∞–∫–∫–∞—É–Ω—Ç–∞
                kb = []
                for nm, aid in top:
                    kb.append([InlineKeyboardButton(f"üíº {nm}", callback_data=f"choose_account:{aid}")])
                kb.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_bill")])
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç (account) –¥–ª—è —Å—Ç—Ä–æ–∫ BILL:", reply_markup=InlineKeyboardMarkup(kb))
                return
        except Exception:
            pass

        # –°–æ–∑–¥–∞–µ–º BILL (account_id —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω)
        import requests
        try:
            logger.info(f"Creating BILL payload preview: vendor_id={vendor_id}, items={len(line_items)}, org={org_id}")
        except Exception:
            pass
        access_token = get_access_token()
        url = f"https://www.zohoapis.eu/books/v3/bills?organization_id={org_id}"
        headers = {"Authorization": f"Zoho-oauthtoken {access_token}", "Content-Type": "application/json"}
        r = requests.post(url, headers=headers, json=bill_payload)
        try:
            logger.info(f"BILL response: status={r.status_code} body={(r.text or '')[:400]}")
        except Exception:
            pass
        data = r.json() if r.content else {}
        if r.status_code not in (200, 201) or 'bill' not in data:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bill: {r.status_code} {data}")
            return

        bill = data['bill']
        bill_id = bill.get('bill_id')

        # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º PDF
        if processed_path and os.path.exists(processed_path):
            attach_url = f"https://www.zohoapis.eu/books/v3/bills/{bill_id}/attachment?organization_id={org_id}"
            files = {"attachment": open(processed_path, 'rb')}
            headers_att = {"Authorization": f"Zoho-oauthtoken {access_token}"}
            try:
                requests.post(attach_url, headers=headers_att, files=files)
            finally:
                try:
                    files["attachment"].close()
                except Exception:
                    pass

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–û—Ç–∫—Ä—ã—Ç—å –≤ Zoho¬ª
        open_url = f"https://books.zoho.eu/app/{org_id}#/bills/{bill_id}?filter_by=Status.All&per_page=200&sort_column=date&sort_order=D"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –≤ Zoho", url=open_url)]])
        await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚úÖ Bill —Å–æ–∑–¥–∞–Ω: #{bill_number or bill_id}", reply_markup=kb)

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bill: {str(e)}")

async def handle_smart_full_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–º–Ω—ã–π –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"""
    if not update.callback_query or not context.user_data:
        return

    query = update.callback_query
    result = context.user_data.get('smart_result')

    if not result:
        await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        full_report = generate_full_report(result)
        await query.edit_message_text(full_report)

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")


def generate_full_report(result) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        analysis = result.document_analysis
        report = "üìã –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –ü–û –î–û–ö–£–ú–ï–ù–¢–£\n\n"

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        report += f"üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {analysis.get('document_type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n"
        report += f"üìÑ –ù–æ–º–µ—Ä: {analysis.get('bill_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        report += f"üìÖ –î–∞—Ç–∞: {analysis.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        report += f"üí∞ –°—É–º–º–∞: {analysis.get('total_amount', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        report += f"üí± –í–∞–ª—é—Ç–∞: {analysis.get('currency', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
        supplier = analysis.get('supplier', {})
        if supplier:
            report += "üè¢ –ü–û–°–¢–ê–í–©–ò–ö:\n"
            report += f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {supplier.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            report += f"   VAT: {supplier.get('vat', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            report += f"   Email: {supplier.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            report += f"   –¢–µ–ª–µ—Ñ–æ–Ω: {supplier.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            report += f"   –ê–¥—Ä–µ—Å: {supplier.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        vin = analysis.get('vin')
        car_model = analysis.get('car_model')
        if vin or car_model:
            report += "üöó –ê–í–¢–û–ú–û–ë–ò–õ–¨:\n"
            report += f"   VIN: {vin or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            report += f"   –ú–æ–¥–µ–ª—å: {car_model or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            report += f"   –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {analysis.get('cost_price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"

        return report

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"


def generate_detailed_info(result) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    try:
        analysis = result.document_analysis
        info = "üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
        for key, value in analysis.items():
            if value and value != "–ù–µ —É–∫–∞–∑–∞–Ω" and value != "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
                info += f"{key}: {value}\n"

        return info

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if not update.message:
        return

    help_text = """
ü§ñ AI Invoice Bot - –ü–æ–º–æ—â—å

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ—Ç –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ ITEM

üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å—á–µ—Ç–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Zoho Books
‚Ä¢ –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
"""
    await update.message.reply_text(help_text)


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    if not update.message:
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π
        status_text = "üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´\n\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
            SmartDocumentProcessor()
            status_text += "‚úÖ SmartDocumentProcessor - –¥–æ—Å—Ç—É–ø–µ–Ω\n"
        except Exception:
            status_text += "‚ùå SmartDocumentProcessor - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
            create_supplier_from_document
            status_text += "‚úÖ ContactCreator - –¥–æ—Å—Ç—É–ø–µ–Ω\n"
        except Exception:
            status_text += "‚ùå ContactCreator - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"

        status_text += "\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"

        await update.message.reply_text(status_text)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")


def setup_handlers(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_pdf))
    # –í–≤–æ–¥ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è ITEM –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    application.add_handler(CallbackQueryHandler(handle_callback))

async def handle_smart_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–Ω–æ–ø–∫–∞: –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∫—Ä–∞—Ç–∫–∏–µ —Ç–µ–∑–∏—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º)."""
    if not update.callback_query or not context.user_data:
        return
    query = update.callback_query
    analysis = context.user_data.get('document_analysis') or {}

    try:
        # 1) –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ contract_risks –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        risks = analysis.get('contract_risks') or {}
        summary_lines = []
        if risks:
            # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤—ã–≤–æ–¥
            if risks.get('payment_terms'):
                summary_lines.append(f"–û–ø–ª–∞—Ç–∞: {risks.get('payment_terms')}")
            if risks.get('delivery_terms'):
                summary_lines.append(f"–ü–æ—Å—Ç–∞–≤–∫–∞: {risks.get('delivery_terms')}")
            if risks.get('jurisdiction'):
                summary_lines.append(f"–Æ—Ä–∏—Å–¥–∏–∫—Ü–∏—è: {risks.get('jurisdiction')}")
            if risks.get('warranty'):
                summary_lines.append(f"–ì–∞—Ä–∞–Ω—Ç–∏—è: {risks.get('warranty')}")
            if risks.get('taxes'):
                summary_lines.append(f"–ù–∞–ª–æ–≥–∏: {risks.get('taxes')}")
            if risks.get('penalties'):
                summary_lines.append(f"–®—Ç—Ä–∞—Ñ—ã/–Ω–µ—É—Å—Ç–æ–π–∫–∏: {risks.get('penalties')}")
            unusual = risks.get('unusual') or []
            if unusual:
                bullet = '; '.join(str(x) for x in unusual[:5])
                summary_lines.append(f"–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è: {bullet}")
            listed_risks = risks.get('risks') or []
            if listed_risks:
                bullet = '; '.join(str(x) for x in listed_risks[:5])
                summary_lines.append(f"–†–∏—Å–∫–∏: {bullet}")
        else:
            # 2) Fallback: –≤—ã–∑–æ–≤ LLM –¥–ª—è –∫—Ä–∞—Ç–∫–æ–π –≤—ã–∂–∏–º–∫–∏ –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
            text = analysis.get('extracted_text') or ''
            try:
                # –í—ã–∑–æ–≤ –Ω–∞–ø—Ä—è–º—É—é: –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤—ã–¥–µ—Ä–∂–∫–∞ (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫)
                llm = llm_analyze_contract_risks(text)  # type: ignore
                if llm:
                    if llm.get('payment_terms'):
                        summary_lines.append(f"–û–ø–ª–∞—Ç–∞: {llm.get('payment_terms')}")
                    if llm.get('delivery_terms'):
                        summary_lines.append(f"–ü–æ—Å—Ç–∞–≤–∫–∞: {llm.get('delivery_terms')}")
                    if llm.get('jurisdiction'):
                        summary_lines.append(f"–Æ—Ä–∏—Å–¥–∏–∫—Ü–∏—è: {llm.get('jurisdiction')}")
                    if llm.get('warranty'):
                        summary_lines.append(f"–ì–∞—Ä–∞–Ω—Ç–∏—è: {llm.get('warranty')}")
                    if llm.get('taxes'):
                        summary_lines.append(f"–ù–∞–ª–æ–≥–∏: {llm.get('taxes')}")
                    if llm.get('penalties'):
                        summary_lines.append(f"–®—Ç—Ä–∞—Ñ—ã/–Ω–µ—É—Å—Ç–æ–π–∫–∏: {llm.get('penalties')}")
                    unusual = llm.get('unusual') or []
                    if unusual:
                        bullet = '; '.join(str(x) for x in unusual[:5])
                        summary_lines.append(f"–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è: {bullet}")
                    listed_risks = llm.get('risks') or []
                    if listed_risks:
                        bullet = '; '.join(str(x) for x in listed_risks[:5])
                        summary_lines.append(f"–†–∏—Å–∫–∏: {bullet}")
            except Exception:
                pass

        # –û–±–æ–≥–∞—â–∞–µ–º –∞–≤—Ç–æ–∏–Ω—Ñ–æ
        try:
            if analysis.get('vin'):
                summary_lines.append(f"VIN: {analysis.get('vin')}")
            brand_model = ' '.join([p for p in [analysis.get('car_brand'), analysis.get('car_model')] if p])
            if brand_model.strip():
                summary_lines.append(f"–ê–≤—Ç–æ: {brand_model.strip()}")
        except Exception:
            pass

        if not summary_lines:
            summary_lines.append("–ù–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –∏–ª–∏ –æ–Ω–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã.")

        # –ì–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π —á–µ—Ä–µ–∑ LLM
        raw_summary = "üß† –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n" + "\n".join(f"‚Ä¢ {line}" for line in summary_lines)
        ru_summary = llm_translate_to_ru(raw_summary)

        # –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—á—Ç–æ–±—ã –Ω–µ —É–±–∏—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏) ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await query.answer()
        except Exception:
            pass
        await context.bot.send_message(chat_id=query.message.chat_id, text=ru_summary)
    except Exception as e:
        try:
            await query.answer()
        except Exception:
            pass
        await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–≤–æ–¥ —Ü–µ–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ITEM)."""
    if not update.message or not context.user_data:
        return
    try:
        if context.user_data.get('waiting_for_selling_price'):
            await handle_selling_price(update, context)
    except Exception:
        pass