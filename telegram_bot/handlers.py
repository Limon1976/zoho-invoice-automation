from functions.assistant_logic import zoho_create_quote
from functions.assistant_logic import is_outgoing_invoice, is_auto_proforma
import logging
logger = logging.getLogger(__name__)

import os
import json
from functions.agent_invoice_parser import analyze_proforma_via_agent
from telegram import Update
from telegram.ext import ContextTypes

INBOX_FOLDER = "inbox"
os.makedirs(INBOX_FOLDER, exist_ok=True)

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if message is None or message.document is None:
        if message:
            await message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")
        return

    document = message.document
    if document.mime_type != "application/pdf":
        await message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")
        return

    if not document.file_name:
        await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ —Ñ–∞–π–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    file = await document.get_file()
    file_path = os.path.join(INBOX_FOLDER, document.file_name)
    await file.download_to_drive(file_path)

    await message.reply_text(
        f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: {document.file_name}\n"
        f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º..."
    )

    try:
        result = analyze_proforma_via_agent(file_path)

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ VAT –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ ---
        our_vats = ["EE102288270", "PL5272956146"]  # –î—É–±–ª–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ agent_invoice_parser.py
        vat_found = False
        for vat in our_vats:
            if vat in str(result):
                vat_found = True
                break
        if not vat_found:
            await message.reply_text("‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ: VAT –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ!")

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—Ö–æ–¥—è—â–∏–π —Å—á–µ—Ç (–Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –∫–∞–∫ supplier) ---
        from functions.assistant_logic import is_outgoing_invoice, is_auto_proforma, zoho_create_quote
        if is_outgoing_invoice(result):
            await message.reply_text("üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏—Å—Ö–æ–¥—è—â–∏–π —Å—á–µ—Ç ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            return

        # --- –ï—Å–ª–∏ —ç—Ç–æ –≤—Ö–æ–¥—è—â–∞—è –ø—Ä–æ—Ñ–æ—Ä–º–∞ –Ω–∞ –∞–≤—Ç–æ ‚Äî —Å–æ–∑–¥–∞–µ–º Quote –≤ Zoho ---
        if is_auto_proforma(result):
            zoho_create_quote(result)
            await message.reply_text("üöó –°–æ–∑–¥–∞–Ω quote –≤ Zoho Books –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è!")

        try:
            result_json = json.dumps(result, indent=2, ensure_ascii=False)
        except Exception as json_err:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {json_err}")
            logger.error(f"üì¶ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
            return

        await message.reply_text(
            f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n<pre>{result_json}</pre>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –∂—É—Ä–Ω–∞–ª.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if message is None or not message.photo:
        if message:
            await message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return
    photo = message.photo[-1]
    file = await photo.get_file()
    file_path = os.path.join(INBOX_FOLDER, f"photo_{photo.file_id}.jpg")
    await file.download_to_drive(file_path)
    await message.reply_text("üì∑ –§–æ—Ç–æ –ø—Ä–æ—Ñ–æ—Ä–º—ã –ø–æ–ª—É—á–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∫–∞ VIN –±—É–¥–µ—Ç –ø–æ–∑–∂–µ.")