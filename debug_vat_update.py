#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è VAT –Ω–æ–º–µ—Ä–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã API
"""

import asyncio
import json
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from src.infrastructure.zoho_api import ZohoAPIClient
from src.infrastructure.config import get_config

async def debug_api_responses():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ Zoho API"""
    
    print('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ZOHO API:')
    print('='*60)
    
    config = get_config()
    api_client = ZohoAPIClient(
        client_id=config.zoho.client_id,
        client_secret=config.zoho.client_secret,
        refresh_token=config.zoho.refresh_token or ''
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
    org_id = '20082562863'
    contact_id = '281497000005903525'
    
    print(f'üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º Contact ID: {contact_id}')
    print(f'üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org_id}')
    print()
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        print('1Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–£–©–ò–• –î–ê–ù–ù–´–•:')
        print('-' * 40)
        
        current_response = await api_client.get_contact_details(org_id, contact_id)
        if current_response:
            current_vat = current_response.get('cf_tax_id', '')
            print(f'‚úÖ –¢–µ–∫—É—â–∏–π VAT: "{current_vat}"')
            print(f'‚úÖ –ò–º—è –∫–æ–º–ø–∞–Ω–∏–∏: {current_response.get("company_name", "Unknown")}')
        else:
            print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö')
            return
        
        print()
        
        # 2. –°–æ–∑–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        print('2Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø VAT:')
        print('-' * 40)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_data = {
            'cf_tax_id': 'PL9512598212'
        }
        
        print(f'üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: {json.dumps(update_data, ensure_ascii=False)}')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        url = f"{api_client.base_url}/contacts/{contact_id}"
        params = {"organization_id": org_id}
        
        print(f'üåê URL: {url}')
        print(f'üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if not api_client.access_token:
            await api_client._refresh_access_token()
        
        headers = {
            "Authorization": f"Zoho-oauthtoken {api_client.access_token}",
            "Content-Type": "application/json"
        }
        
        print(f'üîë –¢–æ–∫–µ–Ω: ...{api_client.access_token[-10:] if api_client.access_token else "None"}')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await api_client.client.request(
            method='PUT',
            url=url,
            params=params,
            json=update_data,
            headers=headers
        )
        
        print(f'üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}')
        print(f'üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
        try:
            response_data = response.json()
            print(f'üì• –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:')
            print(json.dumps(response_data, ensure_ascii=False, indent=2))
        except:
            response_text = response.text
            print(f'üì• –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text}')
        
        print()
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print('3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:')
        print('-' * 40)
        
        await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        updated_response = await api_client.get_contact_details(org_id, contact_id)
        if updated_response:
            updated_vat = updated_response.get('cf_tax_id', '')
            updated_vat_unformatted = updated_response.get('cf_tax_id_unformatted', '')
            
            print(f'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:')
            print(f'   cf_tax_id: "{updated_vat}"')
            print(f'   cf_tax_id_unformatted: "{updated_vat_unformatted}"')
            
            if updated_vat == 'PL9512598212':
                print('‚úÖ –£–°–ü–ï–•! VAT –Ω–æ–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω')
            else:
                print('‚ùå VAT –Ω–æ–º–µ—Ä –ù–ï –∏–∑–º–µ–Ω–∏–ª—Å—è')
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
                print()
                print('üîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:')
                print('   ‚Ä¢ –ü–æ–ª–µ cf_tax_id –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è')
                print('   ‚Ä¢ –ù—É–∂–Ω—ã –æ—Å–æ–±—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è VAT')
                print('   ‚Ä¢ Zoho Books –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å VAT –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è')
                print('   ‚Ä¢ –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π API endpoint')
                print('   ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Zoho')
        
        print()
        
        # 4. –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è
        print('4Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –ü–û–õ–ï–ô:')
        print('-' * 40)
        
        alternative_updates = [
            {'tax_id': 'PL9512598212'},
            {'vat_number': 'PL9512598212'},
            {'tax_number': 'PL9512598212'},
            {'cf_vat_id': 'PL9512598212'},  # –ö–∞–∫ –≤ —ç—Å—Ç–æ–Ω—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        ]
        
        for i, alt_data in enumerate(alternative_updates, 1):
            print(f'–¢–µ—Å—Ç {i}: {list(alt_data.keys())[0]} = {list(alt_data.values())[0]}')
            
            alt_response = await api_client.client.request(
                method='PUT',
                url=url,
                params=params,
                json=alt_data,
                headers=headers
            )
            
            print(f'   –°—Ç–∞—Ç—É—Å: {alt_response.status_code}')
            
            try:
                alt_data_response = alt_response.json()
                if 'message' in alt_data_response:
                    print(f'   –°–æ–æ–±—â–µ–Ω–∏–µ: {alt_data_response["message"]}')
                if 'errors' in alt_data_response:
                    print(f'   –û—à–∏–±–∫–∏: {alt_data_response["errors"]}')
            except:
                print(f'   –û—Ç–≤–µ—Ç: {alt_response.text[:100]}...')
            
            await asyncio.sleep(1)
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    
    finally:
        await api_client.client.aclose()

if __name__ == "__main__":
    asyncio.run(debug_api_responses()) 