import logging
from mcp_connector.ocr_utils import ocr_pdf_google


def _try_native_pdf_text(pdf_path: str) -> str:
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π –∏–∑ PDF (–µ—Å–ª–∏ –µ—Å—Ç—å) –±–µ–∑ OCR.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ.
    """
    # –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ pdfminer.six
    try:
        from pdfminer.high_level import extract_text as pdfminer_extract
        logging.info("üß™ –ü—Ä–æ–±—É—é –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π —á–µ—Ä–µ–∑ pdfminer...")
        native_text = pdfminer_extract(pdf_path) or ""
        if native_text and len(native_text.strip()) >= 300:
            logging.info("‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π (pdfminer), –¥–ª–∏–Ω–∞=%d", len(native_text))
            return native_text
    except Exception as e:
        logging.info(f"‚ÑπÔ∏è pdfminer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω/–æ—à–∏–±–∫–∞: {e}")

    # –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ PyPDF2 –∫–∞–∫ –ª—ë–≥–∫–∏–π —Ñ–æ–ª–±—ç–∫
    try:
        import PyPDF2  # type: ignore
        logging.info("üß™ –ü—Ä–æ–±—É—é –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π —á–µ—Ä–µ–∑ PyPDF2...")
        txt_parts = []
        with open(pdf_path, "rb") as f:
            reader = PyPDF2.PdfReader(f)
            for page in reader.pages:
                t = page.extract_text() or ""
                if t:
                    txt_parts.append(t)
        native_text = "\n".join(txt_parts)
        if native_text and len(native_text.strip()) >= 300:
            logging.info("‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π (PyPDF2), –¥–ª–∏–Ω–∞=%d", len(native_text))
            return native_text
    except Exception as e:
        logging.info(f"‚ÑπÔ∏è PyPDF2 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω/–æ—à–∏–±–∫–∞: {e}")

    return ""


def extract_text_from_pdf(pdf_path):
    """
    –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π, –ø–æ—Ç–æ–º OCR —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∫–∞–Ω–æ–≤.
    1. –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
    2. –ï—Å–ª–∏ —Å–∫–∞–Ω –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º Google Vision OCR
    """
    # üéØ –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π
    logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è –≤ PDF...")
    native_text = _try_native_pdf_text(pdf_path)
    
    if native_text:
        logging.info(f"‚úÖ –¢–ï–ö–°–¢–û–í–´–ô –°–õ–û–ô –ù–ê–ô–î–ï–ù! –î–ª–∏–Ω–∞: {len(native_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logging.info("üìÑ NATIVE TEXT (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):\n%s", native_text[:1000])
        return native_text.strip()
    else:
        # üéØ –®–ê–ì 2: –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º OCR –¥–ª—è —Å–∫–∞–Ω–∞
        logging.info("‚ùå –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫–∞—é Google Vision OCR –¥–ª—è —Å–∫–∞–Ω–∞...")
        text = ocr_pdf_google(pdf_path)
        logging.info("üìÑ OCR RAW (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):\n%s", text[:1000])
        return text.strip()