import logging
from google.cloud import vision
import io

def ocr_pdf_google(pdf_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ü–û–õ–ù–´–ô —Ç–µ–∫—Å—Ç –∏–∑ PDF —Å –ø–æ–º–æ—â—å—é Google Vision OCR.
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–µ–∑–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞.
    """
    client = vision.ImageAnnotatorClient()
    
    logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é PDF –≤ Google Vision OCR: {pdf_path}")
    
    try:
        # –ß–∏—Ç–∞–µ–º PDF —Ñ–∞–π–ª
        with open(pdf_path, "rb") as pdf_file:
            content = pdf_file.read()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        input_config = vision.InputConfig(
            content=content,
            mime_type="application/pdf"
        )
        
        feature = vision.Feature(
            type_=vision.Feature.Type.DOCUMENT_TEXT_DETECTION
        )

        # –ó–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        request = vision.AnnotateFileRequest(
            input_config=input_config,
            features=[feature],
            # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = client.batch_annotate_files(requests=[request])
        
        if response.responses[0].error.message:
            logging.error(f"Google Vision API –æ—à–∏–±–∫–∞: {response.responses[0].error.message}")
            return ""

        # –°–æ–±–∏—Ä–∞–µ–º –í–ï–°–¨ —Ç–µ–∫—Å—Ç —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        full_text = ""
        page_count = 0
        
        for file_response in response.responses:
            for page_response in file_response.responses:
                page_count += 1
                if page_response.full_text_annotation:
                    page_text = page_response.full_text_annotation.text
                    if page_text:
                        full_text += page_text + "\n"
                        logging.info(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count}: –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(page_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        logging.info(f"‚úÖ Google Vision OCR –∑–∞–≤–µ—Ä—à–µ–Ω: {len(full_text)} —Å–∏–º–≤–æ–ª–æ–≤, {page_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
        logging.info(f"üìÑ OCR RAW (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):\n{full_text[:1000]}")
        
        return full_text.strip()
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ Google Vision OCR: {e}")
        return ""


def ocr_pdf_google_enhanced(pdf_path):
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è OCR —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    """
    client = vision.ImageAnnotatorClient()
    
    logging.info(f"üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ PDF: {pdf_path}")
    
    try:
        with open(pdf_path, "rb") as pdf_file:
            content = pdf_file.read()

        input_config = vision.InputConfig(
            content=content,
            mime_type="application/pdf"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        features = [
            vision.Feature(type_=vision.Feature.Type.DOCUMENT_TEXT_DETECTION),
            vision.Feature(type_=vision.Feature.Type.TEXT_DETECTION),
        ]

        request = vision.AnnotateFileRequest(
            input_config=input_config,
            features=features,
        )

        response = client.batch_annotate_files(requests=[request])
        
        result = {
            "full_text": "",
            "structured_data": [],
            "page_count": 0,
            "confidence": 0.0
        }
        
        total_confidence = 0
        confidence_count = 0
        
        for file_response in response.responses:
            for page_response in file_response.responses:
                result["page_count"] += 1
                
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
                if page_response.full_text_annotation:
                    page_text = page_response.full_text_annotation.text
                    if page_text:
                        result["full_text"] += page_text + "\n"
                
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                for text_annotation in page_response.text_annotations:
                    if text_annotation.description and text_annotation.bounding_poly:
                        result["structured_data"].append({
                            "text": text_annotation.description,
                            "confidence": text_annotation.score if hasattr(text_annotation, 'score') else 1.0,
                            "bounds": {
                                "vertices": [
                                    {"x": vertex.x, "y": vertex.y} 
                                    for vertex in text_annotation.bounding_poly.vertices
                                ]
                            }
                        })
                        
                        if hasattr(text_annotation, 'score'):
                            total_confidence += text_annotation.score
                            confidence_count += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if confidence_count > 0:
            result["confidence"] = total_confidence / confidence_count
        
        result["full_text"] = result["full_text"].strip()
        
        logging.info(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π OCR: {len(result['full_text'])} —Å–∏–º–≤–æ–ª–æ–≤, "
                    f"{len(result['structured_data'])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, "
                    f"—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
        
        return result
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ OCR: {e}")
        return {
            "full_text": "",
            "structured_data": [],
            "page_count": 0,
            "confidence": 0.0
        }