"""
Branch Manager - –ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç–∫–∞–º–∏ Zoho Books.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ç–æ–∫
- –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ç–æ–∫ —á–µ—Ä–µ–∑ API (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
- –£–º–Ω—ã–π fallback –∫ Head Office
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å TTL
- –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import json
import os
import requests
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Tuple
from dataclasses import dataclass
import logging

logger = logging.getLogger(__name__)

@dataclass
class BranchInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ç–∫–µ Zoho Books"""
    branch_id: str
    name: str
    is_active: bool
    status: str
    address: str
    email: str
    is_primary: bool = False

class BranchManager:
    """
    –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–µ—Ç–æ–∫ –¥–ª—è Zoho Books.
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ—Ç–∫–∏
    - –ü—ã—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ—Ç–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç fallback –∫ Head Office
    - –ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å TTL 24 —á–∞—Å–∞
    """
    
    def __init__(self, access_token: str, cache_dir: str = "data/optimized_cache"):
        self.access_token = access_token
        self.cache_dir = cache_dir
        self.cache_ttl_hours = 24
        self.api_base_url = "https://www.zohoapis.eu/books/v3"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞
        os.makedirs(cache_dir, exist_ok=True)
    
    def _get_cache_path(self, org_id: str) -> str:
        """–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞ –≤–µ—Ç–æ–∫"""
        return os.path.join(self.cache_dir, f"branches_manager_{org_id}.json")
    
    def _is_cache_valid(self, cache_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—ç—à–∞ –ø–æ TTL"""
        if not os.path.exists(cache_path):
            return False
        
        try:
            with open(cache_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            cached_at = datetime.fromisoformat(data.get('cached_at', ''))
            return datetime.now() - cached_at < timedelta(hours=self.cache_ttl_hours)
        except Exception:
            return False
    
    def _load_cache(self, org_id: str) -> Optional[List[BranchInfo]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–µ—Ç–∫–∏ –∏–∑ –∫—ç—à–∞ –µ—Å–ª–∏ –æ–Ω –≤–∞–ª–∏–¥–µ–Ω"""
        cache_path = self._get_cache_path(org_id)
        
        if not self._is_cache_valid(cache_path):
            return None
        
        try:
            with open(cache_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            branches = []
            for branch_data in data.get('branches', []):
                branches.append(BranchInfo(**branch_data))
            
            logger.info(f"üè¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(branches)} –≤–µ—Ç–æ–∫ –∏–∑ –∫—ç—à–∞ –¥–ª—è org {org_id}")
            return branches
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –≤–µ—Ç–æ–∫: {e}")
            return None
    
    def _save_cache(self, org_id: str, branches: List[BranchInfo]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Ç–∫–∏ –≤ –∫—ç—à"""
        cache_path = self._get_cache_path(org_id)
        
        try:
            data = {
                'cached_at': datetime.now().isoformat(),
                'org_id': org_id,
                'branches': [
                    {
                        'branch_id': b.branch_id,
                        'name': b.name,
                        'is_active': b.is_active,
                        'status': b.status,
                        'address': b.address,
                        'email': b.email,
                        'is_primary': b.is_primary
                    }
                    for b in branches
                ]
            }
            
            with open(cache_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üíæ –ö—ç—à –≤–µ—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {len(branches)} –≤–µ—Ç–æ–∫ –¥–ª—è org {org_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –≤–µ—Ç–æ–∫: {e}")
    
    def _fetch_branches_from_api(self, org_id: str) -> List[BranchInfo]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–µ—Ç–∫–∏ –∏–∑ Zoho API"""
        url = f"{self.api_base_url}/branches"
        headers = {"Authorization": f"Zoho-oauthtoken {self.access_token}"}
        params = {"organization_id": org_id, "per_page": 200}
        
        try:
            response = requests.get(url, headers=headers, params=params)
            response.raise_for_status()
            
            data = response.json()
            raw_branches = data.get('branches', [])
            
            branches = []
            for branch in raw_branches:
                branch_info = BranchInfo(
                    branch_id=branch.get('branch_id', ''),
                    name=branch.get('branch_name', ''),
                    is_active=branch.get('is_branch_active', False),
                    status=branch.get('branch_status', 'unknown'),
                    address=branch.get('address_formatted', ''),
                    email=branch.get('email', ''),
                    is_primary=branch.get('is_primary_branch', False)
                )
                branches.append(branch_info)
            
            logger.info(f"üåê –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(branches)} –≤–µ—Ç–æ–∫ –∏–∑ Zoho API –¥–ª—è org {org_id}")
            return branches
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Ç–æ–∫ –∏–∑ API: {e}")
            return []
    
    def get_active_branches(self, org_id: str, force_refresh: bool = False) -> List[BranchInfo]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ—Ç–∫–∏.
        
        Args:
            org_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ Zoho
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ç–æ–∫
        """
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
        if not force_refresh:
            cached_branches = self._load_cache(org_id)
            if cached_branches is not None:
                active_branches = [b for b in cached_branches if b.is_active]
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(active_branches)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ç–æ–∫ –≤ –∫—ç—à–µ")
                return active_branches
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
        logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫ –∏–∑ Zoho API...")
        all_branches = self._fetch_branches_from_api(org_id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
        active_branches = [b for b in all_branches if b.is_active]
        inactive_branches = [b for b in all_branches if not b.is_active]
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Ç–æ–∫:")
        logger.info(f"  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_branches)}")
        logger.info(f"  ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(inactive_branches)}")
        
        if inactive_branches:
            logger.warning("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ—Ç–∫–∏:")
            for branch in inactive_branches:
                logger.warning(f"  - {branch.name} (ID: {branch.branch_id}, Status: {branch.status})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ—Ç–∫–∏
        self._save_cache(org_id, active_branches)
        
        return active_branches
    
    def find_branch_by_names(self, org_id: str, preferred_names: List[str]) -> Optional[BranchInfo]:
        """
        –ò—â–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ç–∫—É –ø–æ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π.
        
        Args:
            org_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            preferred_names: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        
        Returns:
            –ù–∞–π–¥–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ç–∫–∞ –∏–ª–∏ None
        """
        import unicodedata
        
        def normalize(text: str) -> str:
            """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞"""
            if not text:
                return ""
            normalized = unicodedata.normalize('NFKD', text)
            ascii_text = normalized.encode('ascii', 'ignore').decode('ascii')
            return ascii_text.strip().lower()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏—Å–∫–æ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        normalized_targets = [normalize(name) for name in preferred_names if name]
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ—Ç–∫–∏
        active_branches = self.get_active_branches(org_id)
        
        # –ò—â–µ–º –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        for branch in active_branches:
            normalized_branch = normalize(branch.name)
            if normalized_branch in normalized_targets:
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ç–∫–∞ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é: {branch.name}")
                return branch
        
        # –ò—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        for branch in active_branches:
            normalized_branch = normalize(branch.name)
            for target in normalized_targets:
                if target in normalized_branch or normalized_branch in target:
                    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ç–∫–∞ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é: {branch.name}")
                    return branch
        
        logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ç–∫–∞ —Å—Ä–µ–¥–∏: {preferred_names}")
        return None
    
    def get_head_office(self, org_id: str) -> Optional[BranchInfo]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Head Office (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω—ã–π fallback)"""
        active_branches = self.get_active_branches(org_id)
        
        # –ò—â–µ–º primary branch
        for branch in active_branches:
            if branch.is_primary:
                logger.info(f"üè¢ –ù–∞–π–¥–µ–Ω Head Office (primary): {branch.name}")
                return branch
        
        # –ò—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        head_office = self.find_branch_by_names(org_id, ["head office", "–≥–æ–ª–æ–≤–Ω–æ–π –æ—Ñ–∏—Å"])
        if head_office:
            return head_office
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ç–∫—É
        if active_branches:
            fallback = active_branches[0]
            logger.warning(f"‚ö†Ô∏è Head Office –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {fallback.name}")
            return fallback
        
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ç–∫–∏!")
        return None
    
    def try_activate_branch(self, org_id: str, branch_id: str) -> bool:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ API.
        
        Args:
            org_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            branch_id: ID –≤–µ—Ç–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        
        Returns:
            True –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        url = f"{self.api_base_url}/branches/{branch_id}"
        headers = {"Authorization": f"Zoho-oauthtoken {self.access_token}"}
        params = {"organization_id": org_id}
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        data = {
            "is_branch_active": True,
            "branch_status": "active"
        }
        
        try:
            response = requests.put(url, headers=headers, params=params, json=data)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –í–µ—Ç–∫–∞ {branch_id} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                self.get_active_branches(org_id, force_refresh=True)
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ç–∫—É {branch_id}: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–µ—Ç–∫–∏ {branch_id}: {e}")
            return False
    
    def get_branch_for_flower_document(self, org_id: str, supplier_name: str, document_text: str) -> Tuple[Optional[str], str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ç–∫—É –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
        
        Args:
            org_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            supplier_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            document_text: –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
        
        Returns:
            Tuple[branch_id –∏–ª–∏ None, reason - –ø—Ä–∏—á–∏–Ω–∞ –≤—ã–±–æ—Ä–∞]
        """
        if org_id != '20082562863':  # PARKENTERTAINMENT
            return None, "–ù–µ PARKENTERTAINMENT –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"
        
        doc_text_lower = document_text.lower()
        supplier_lower = supplier_name.lower()
        
        # –î–ï–¢–ê–õ–¨–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
        logger.info(f"üîç BRANCH DEBUG: supplier='{supplier_name}', hibispol={'hibispol' in supplier_lower}")
        logger.info(f"üîç BRANCH DEBUG: –∏—â–µ–º –º–∞—Ä–∫–µ—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): {document_text[:500]}")
        
        wilenska_found = 'wile≈Ñska' in doc_text_lower
        praga_found = 'praga' in doc_text_lower
        logger.info(f"üîç BRANCH DEBUG: –º–∞—Ä–∫–µ—Ä 'wile≈Ñska' –Ω–∞–π–¥–µ–Ω = {wilenska_found}")
        logger.info(f"üîç BRANCH DEBUG: –º–∞—Ä–∫–µ—Ä 'praga' –Ω–∞–π–¥–µ–Ω = {praga_found}")
        
        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–µ—Ç–∫–∏ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –∏ –º–∞—Ä–∫–µ—Ä–∞–º
        if 'hibispol' in supplier_lower:
            if wilenska_found or praga_found:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º Wile≈Ñska –ü–ï–†–í–û–ô, Head Office —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ –∫–∞–∫ fallback
                preferred_names = ["Wile≈Ñska"]
                reason = f"HIBISPOL + –º–∞—Ä–∫–µ—Ä {('Wile≈Ñska' if wilenska_found else '') + (' Praga' if praga_found else '').strip()}"
                logger.info(f"üå∏ BRANCH: HIBISPOL —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ ‚Üí –∏—â–µ–º Wile≈Ñska –ø–µ—Ä–≤–æ–π")
            else:
                preferred_names = ["Iris flowers atelier"]
                reason = "HIBISPOL –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤"
                logger.info(f"üå∏ BRANCH: HIBISPOL –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤ ‚Üí Iris flowers atelier")
        elif 'browary' in doc_text_lower:
            preferred_names = ["Iris flowers atelier"]
            reason = "–ú–∞—Ä–∫–µ—Ä 'browary' –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"
        else:
            preferred_names = ["Iris flowers atelier"]
            reason = "–¶–≤–µ—Ç–æ—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ç–∫—É
        logger.info(f"üîç BRANCH SEARCH: –ø–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ {preferred_names}")
        branch = self.find_branch_by_names(org_id, preferred_names)
        
        if branch:
            logger.info(f"üå∏ –í—ã–±—Ä–∞–Ω–∞ –≤–µ—Ç–∫–∞ –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {branch.name} ({reason})")
            return branch.branch_id, reason
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ç–∫–∞ —Å—Ä–µ–¥–∏ {preferred_names}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
            
            # FALLBACK: –ø—Ä–æ–±—É–µ–º Iris flowers atelier, –ø–æ—Ç–æ–º Head Office
            fallback_names = ["Iris flowers atelier", "Head Office"]
            logger.info(f"üîÑ FALLBACK: –ø—Ä–æ–±—É–µ–º {fallback_names}")
            fallback_branch = self.find_branch_by_names(org_id, fallback_names)
            
            if fallback_branch:
                return fallback_branch.branch_id, f"Fallback –∫ {fallback_branch.name} (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {preferred_names})"
            else:
                return None, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ç–æ–∫"
    
    def clear_cache(self, org_id: str = None) -> None:
        """
        –û—á–∏—â–∞–µ—Ç –∫—ç—à –≤–µ—Ç–æ–∫.
        
        Args:
            org_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ None, –æ—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à)
        """
        if org_id:
            cache_path = self._get_cache_path(org_id)
            if os.path.exists(cache_path):
                os.remove(cache_path)
                logger.info(f"üóëÔ∏è –ö—ç—à –≤–µ—Ç–æ–∫ –æ—á–∏—â–µ–Ω –¥–ª—è org {org_id}")
        else:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∫—ç—à–∞ –≤–µ—Ç–æ–∫
            for filename in os.listdir(self.cache_dir):
                if filename.startswith('branches_manager_'):
                    os.remove(os.path.join(self.cache_dir, filename))
            logger.info("üóëÔ∏è –í–µ—Å—å –∫—ç—à –≤–µ—Ç–æ–∫ –æ—á–∏—â–µ–Ω")
