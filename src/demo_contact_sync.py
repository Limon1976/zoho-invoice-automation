"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
=========================================================

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ContactCache –∏ ContactSyncService –¥–ª—è:
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ Zoho Books
- –ü–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ VAT –∏ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
"""

import asyncio
import os
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
import sys
sys.path.append(str(Path(__file__).parent.parent))

from src.domain.services.contact_cache import ContactCache, ContactCacheEntry
from src.domain.services.contact_sync import ContactSyncService, SyncConfig


def demo_contact_cache():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    print("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–≠–®–ê –ö–û–ù–¢–ê–ö–¢–û–í")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫—ç—à
    cache = ContactCache(Path("data/demo_contact_cache.json"))
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–∏–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Zoho)
    test_contacts = [
        {
            "contact_id": "445379000000107171",
            "contact_name": "CAR BEST SALLER Sp. z o. o.",
            "company_name": "CAR BEST SALLER Sp. z o. o.",
            "contact_type": "vendor",
            "custom_fields": [
                {"api_name": "cf_vat_id", "value": "PL9512495127"}
            ],
            "contact_persons": [
                {
                    "is_primary_contact": True,
                    "email": "office@carbestsaller.pl",
                    "phone": "+48 123 456 789"
                }
            ],
            "last_modified_time": "2024-01-15T10:30:00+0200"
        },
        {
            "contact_id": "445379000000107172",
            "contact_name": "TaVie Europe O√ú",
            "company_name": "TaVie Europe O√ú",
            "contact_type": "customer",
            "custom_fields": [
                {"api_name": "cf_vat_id", "value": "EE102288270"}
            ],
            "contact_persons": [
                {
                    "is_primary_contact": True,
                    "email": "info@tavie.eu",
                    "phone": "+372 123 4567"
                }
            ],
            "last_modified_time": "2024-01-15T09:15:00+0200"
        },
        {
            "contact_id": "445379000000107173",
            "contact_name": "PARKENTERTAINMENT Sp. z o. o.",
            "company_name": "PARKENTERTAINMENT Sp. z o. o.",
            "contact_type": "customer",
            "custom_fields": [
                {"api_name": "cf_vat_id", "value": "PL5272956146"}
            ],
            "contact_persons": [
                {
                    "is_primary_contact": True,
                    "email": "office@parkentertainment.pl",
                    "phone": "+48 987 654 321"
                }
            ],
            "last_modified_time": "2024-01-15T11:45:00+0200"
        }
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –∫—ç—à
    org_id = "20082562863"  # TaVie Europe O√ú
    added_count = cache.add_contacts(test_contacts, org_id)
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –∫—ç—à")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –ö–û–ù–¢–ê–ö–¢–û–í:")
    print("-" * 40)
    
    # 1. –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É VAT –Ω–æ–º–µ—Ä—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    print("\n1Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ VAT –Ω–æ–º–µ—Ä—É: PL9512495127")
    result = cache.find_contact(vat_number="PL9512495127")
    if result:
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω: {result.contact.contact_name}")
        print(f"   üìä –¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {result.match_type}")
        print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.2f}")
    else:
        print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
    
    # 2. –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
    print("\n2Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: TaVie Europe O√ú")
    result = cache.find_contact(company_name="TaVie Europe O√ú")
    if result:
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω: {result.contact.contact_name}")
        print(f"   üìä –¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {result.match_type}")
        print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.2f}")
    
    # 3. –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    print("\n3Ô∏è‚É£ –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫: Car Best Seller")
    result = cache.find_contact(company_name="Car Best Seller", min_confidence=0.6)
    if result:
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω: {result.contact.contact_name}")
        print(f"   üìä –¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {result.match_type}")
        print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.2f}")
    
    # 4. –ü–æ–∏—Å–∫ –ø–æ email
    print("\n4Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ email: info@tavie.eu")
    result = cache.find_contact(email="info@tavie.eu")
    if result:
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω: {result.contact.contact_name}")
        print(f"   üìä –¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {result.match_type}")
        print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.2f}")
    
    # 5. –ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    print("\n5Ô∏è‚É£ –ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ: Random Company Ltd")
    result = cache.find_contact(company_name="Random Company Ltd")
    if result:
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω: {result.contact.contact_name}")
    else:
        print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–≠–®–ê:")
    print("-" * 30)
    stats = cache.get_cache_stats()
    print(f"   –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {stats['total_contacts']}")
    print(f"   –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å VAT: {stats['contacts_with_vat']}")
    print(f"   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {stats['organizations']}")
    
    for key, value in stats.items():
        if key.startswith("org_"):
            org_stats = value
            print(f"   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è {key[4:]}:")
            print(f"     - –í—Å–µ–≥–æ: {org_stats['total']}")
            print(f"     - –ö–ª–∏–µ–Ω—Ç—ã: {org_stats['customers']}")
            print(f"     - –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: {org_stats['vendors']}")
            print(f"     - –° VAT: {org_stats['with_vat']}")
    
    return cache


def demo_document_matching(cache: ContactCache):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    print("\n\nüìÑ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø –° –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò")
    print("=" * 55)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    test_documents = [
        {
            "name": "–í—Ö–æ–¥—è—â–∏–π —Å—á–µ—Ç —Å —Ç–æ—á–Ω—ã–º VAT",
            "supplier": {
                "name": "CAR BEST SALLER Sp. z o. o.",
                "vat": "PL9512495127",
                "address": "Warsaw, Poland"
            }
        },
        {
            "name": "–í—Ö–æ–¥—è—â–∏–π —Å—á–µ—Ç —Å –ø–æ—Ö–æ–∂–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º",
            "supplier": {
                "name": "Car Best Seller",  # –°–ª–µ–≥–∫–∞ –¥—Ä—É–≥–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ
                "vat": "",  # –ù–µ—Ç VAT
                "address": "Poland"
            }
        },
        {
            "name": "–°—á–µ—Ç –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏",
            "supplier": {
                "name": "TaVie Europe OU",  # –°–ª–µ–≥–∫–∞ –¥—Ä—É–≥–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ
                "vat": "EE102288270",
                "email": "info@tavie.eu"
            }
        },
        {
            "name": "–ù–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫",
            "supplier": {
                "name": "Unknown Supplier Ltd",
                "vat": "GB123456789",
                "address": "London, UK"
            }
        }
    ]
    
    for i, doc in enumerate(test_documents, 1):
        print(f"\n{i}Ô∏è‚É£ {doc['name']}")
        print(f"   –ü–æ—Å—Ç–∞–≤—â–∏–∫: {doc['supplier']['name']}")
        print(f"   VAT: {doc['supplier']['vat'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
        
        # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
        result = cache.find_contact(
            vat_number=doc['supplier']['vat'],
            company_name=doc['supplier']['name'],
            email=doc['supplier'].get('email'),
            min_confidence=0.7
        )
        
        if result:
            print(f"   ‚úÖ –ù–ê–ô–î–ï–ù: {result.contact.contact_name}")
            print(f"   üìä –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {result.match_type}")
            print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.2f}")
            print(f"   üè¢ –¢–∏–ø: {result.contact.contact_type}")
            if result.contact.vat_number:
                print(f"   üÜî VAT –≤ –±–∞–∑–µ: {result.contact.vat_number}")
        else:
            print("   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞")


async def demo_sync_service():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print("\n\nüîÑ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ï–†–í–ò–°–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫—ç—à –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    cache = ContactCache(Path("data/demo_sync_cache.json"))
    
    config = SyncConfig(
        webhook_enabled=True,
        sync_interval_hours=6,
        organizations={
            "20092948714": "TaVie Europe O√ú",
            "20082562863": "PARKENTERTAINMENT Sp. z o. o."
        }
    )
    
    # –ú–æ–∫ Zoho API –∫–ª–∏–µ–Ω—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª–∏–µ–Ω—Ç)
    class MockZohoAPI:
        async def get_contacts(self, organization_id, page=1, per_page=200):
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç API
            return {
                "contacts": [
                    {"contact_id": "test_001", "contact_name": "Test Contact 1"},
                    {"contact_id": "test_002", "contact_name": "Test Contact 2"}
                ],
                "page_context": {"has_more_page": False}
            }
        
        async def get_contact_details(self, organization_id, contact_id):
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            return {
                "contact_id": contact_id,
                "contact_name": f"Detailed Contact {contact_id}",
                "company_name": f"Company {contact_id}",
                "contact_type": "vendor",
                "custom_fields": [
                    {"api_name": "cf_vat_id", "value": f"VAT{contact_id}"}
                ]
            }
        
        async def create_contact(self, contact_data, organization_id):
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            new_contact_id = f"new_{datetime.now().strftime('%H%M%S')}"
            return {
                "contact": {
                    "contact_id": new_contact_id,
                    **contact_data
                }
            }
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    sync_service = ContactSyncService(
        contact_cache=cache,
        zoho_api_client=MockZohoAPI(),
        config=config
    )
    
    print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
    print(f"   Webhook –≤–∫–ª—é—á–µ–Ω: {config.webhook_enabled}")
    print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {config.sync_interval_hours} —á–∞—Å–æ–≤")
    print(f"   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {len(config.organizations)}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    print("\nüîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    results = await sync_service.sync_all_organizations()
    
    for org_id, result in results.items():
        org_name = config.organizations[org_id]
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {org_name}:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {result.success}")
        print(f"   üì• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.contacts_processed}")
        print(f"   ‚ûï –°–æ–∑–¥–∞–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {result.contacts_created}")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {result.duration_seconds:.1f}—Å")
        if result.errors:
            print(f"   ‚ùå –û—à–∏–±–∫–∏: {', '.join(result.errors)}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    print("\nüîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    supplier_data = {
        "name": "Test Supplier Ltd",
        "vat": "VATtest_001",
        "email": "test@supplier.com"
    }
    
    match_result = sync_service.find_contact_for_document(supplier_data, "20082562863")
    if match_result:
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {match_result.contact.contact_name}")
        print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {match_result.confidence:.2f}")
    else:
        print("   ‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        print("\n‚ûï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞...")
        new_contact_id = await sync_service.auto_create_contact_from_document(
            supplier_data, "20082562863"
        )
        if new_contact_id:
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {new_contact_id}")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
    stats = sync_service.get_sync_statistics()
    print(f"   –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –∫—ç—à–µ: {stats['total_contacts']}")
    print(f"   –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å–æ–±—ã—Ç–∏–π: {stats['queue_size']}")
    print(f"   Webhook –≤–∫–ª—é—á–µ–Ω: {stats['sync_config']['webhook_enabled']}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø –ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ö–û–ù–¢–ê–ö–¢–û–í")
    print("=" * 70)
    print("–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ —Ä–µ—à–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:")
    print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ 500+ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å 119 –ø–æ–ª—è–º–∏")
    print("‚úÖ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ VAT –Ω–æ–º–µ—Ä—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)")
    print("‚úÖ –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏")
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
    print("‚úÖ –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Zoho ‚Üî –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞")
    print("‚úÖ Webhook –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
    print("")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—ç—à–∞
    cache = demo_contact_cache()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    demo_document_matching(cache)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
    asyncio.run(demo_sync_service())
    
    print("\n\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 30)
    print("üí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å:")
    print("   üì± Telegram Bot (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)")
    print("   üåê Zoho Books API (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)")
    print("   üìä FastAPI (–¥–ª—è webhook endpoints)")
    print("   üóÑÔ∏è –õ–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")


if __name__ == "__main__":
    main() 