#!/usr/bin/env python3
"""
–≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∞ –∏–∑ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
=======================================================

–ß–∏—Ç–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ data/full_contacts/ –∏ —Å–æ–∑–¥–∞–µ—Ç
–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—ç—à–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ (—Ç–æ–ª—å–∫–æ 10 –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π).

–†–µ–∑—É–ª—å—Ç–∞—Ç:
- data/optimized_cache/all_contacts_optimized.json (–æ–±—â–∏–π –∫—ç—à –¥–ª—è –ø–æ–∏—Å–∫–∞)
- data/optimized_cache/TaVie_Europe_optimized.json (–∫—ç—à –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏)
- data/optimized_cache/PARKENTERTAINMENT_optimized.json (–∫—ç—à –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏)
"""

import asyncio
import logging
import json
import time
from datetime import datetime
from pathlib import Path
import sys
from typing import Dict, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.domain.services.contact_cache import OptimizedContactCache

# –õ–æ–≥–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ; –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


class OptimizedCacheCreator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—ç—à–µ–π –∏–∑ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.setup_organizations()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–µ–π
        self.stats = {
            "start_time": datetime.now(),
            "organizations": {},
            "total_contacts": 0,
            "caches_created": 0,
            "errors": []
        }
    
    def setup_organizations(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.organizations = {
            "20092948714": {
                "name": "TaVie Europe O√ú",
                "full_data_file": "data/full_contacts/TaVie_Europe_20092948714_full.json",
                "cache_file": "data/optimized_cache/TaVie_Europe_optimized.json"
            },
            "20082562863": {
                "name": "PARKENTERTAINMENT Sp. z o. o.",
                "full_data_file": "data/full_contacts/PARKENTERTAINMENT_20082562863_full.json",
                "cache_file": "data/optimized_cache/PARKENTERTAINMENT_optimized.json"
            }
        }
        
        logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
        for org_id, org_info in self.organizations.items():
            logger.info(f"   {org_id}: {org_info['name']}")
    
    def load_full_contacts(self, org_id: str, org_info: dict) -> Optional[List[dict]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            file_path = Path(org_info["full_data_file"])
            
            if not file_path.exists():
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return None
            
            with open(file_path, 'r', encoding='utf-8') as f:
                contacts = json.load(f)
            
            file_size = file_path.stat().st_size
            logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ {file_path} ({file_size:,} –±–∞–π—Ç)")
            
            return contacts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {org_info['full_data_file']}: {e}")
            self.stats["errors"].append(f"Load {org_id}: {str(e)}")
            return None
    
    def create_organization_cache(self, org_id: str, org_info: dict) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∞ –¥–ª—è –æ–¥–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
        logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è {org_info['name']} ({org_id})")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            contacts = self.load_full_contacts(org_id, org_info)
            
            if not contacts:
                return False
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à
            cache = OptimizedContactCache(org_info["cache_file"])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –∫—ç—à
            cache.add_contacts(contacts)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à
            cache.save_cache()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
            stats = cache.get_statistics()
            
            logger.info(f"‚úÖ –ö—ç—à —Å–æ–∑–¥–∞–Ω –¥–ª—è {org_info['name']}:")
            logger.info(f"   üìä –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {stats['total_contacts']}")
            logger.info(f"   üè∑Ô∏è –° VAT –Ω–æ–º–µ—Ä–∞–º–∏: {stats['contacts_with_vat']}")
            logger.info(f"   üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {stats['customers']}")
            logger.info(f"   üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {stats['vendors']}")
            logger.info(f"   üíæ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {stats['cache_file_size']:,} –±–∞–π—Ç")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats["organizations"][org_id] = {
                "name": org_info["name"],
                "cache_file": org_info["cache_file"],
                "total": stats['total_contacts'],
                "customers": stats['customers'],
                "vendors": stats['vendors'],
                "with_vat": stats['contacts_with_vat'],
                "cache_size": stats['cache_file_size']
            }
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞ –¥–ª—è {org_info['name']}: {e}")
            self.stats["errors"].append(f"Cache {org_id}: {str(e)}")
            return False
    
    def create_combined_cache(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"""
        logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
        
        try:
            all_contacts = []
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
            for org_id, org_info in self.organizations.items():
                contacts = self.load_full_contacts(org_id, org_info)
                if contacts:
                    all_contacts.extend(contacts)
            
            if not all_contacts:
                logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É optimized_cache –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            cache_dir = Path("data/optimized_cache")
            cache_dir.mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫—ç—à
            combined_cache_file = "data/optimized_cache/all_contacts_optimized.json"
            cache = OptimizedContactCache(combined_cache_file)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –∫—ç—à
            cache.add_contacts(all_contacts)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à
            cache.save_cache()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
            stats = cache.get_statistics()
            
            logger.info(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫—ç—à —Å–æ–∑–¥–∞–Ω:")
            logger.info(f"   üìä –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {stats['total_contacts']}")
            logger.info(f"   üè∑Ô∏è –° VAT –Ω–æ–º–µ—Ä–∞–º–∏: {stats['contacts_with_vat']}")
            logger.info(f"   üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {stats['customers']}")
            logger.info(f"   üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {stats['vendors']}")
            logger.info(f"   üíæ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {stats['cache_file_size']:,} –±–∞–π—Ç")
            logger.info(f"   üìÑ –§–∞–π–ª: {combined_cache_file}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞
            self.stats["combined_cache"] = {
                "file": combined_cache_file,
                "total": stats['total_contacts'],
                "customers": stats['customers'],
                "vendors": stats['vendors'],
                "with_vat": stats['contacts_with_vat'],
                "cache_size": stats['cache_file_size']
            }
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞: {e}")
            self.stats["errors"].append(f"Combined cache: {str(e)}")
            return False
    
    def create_all_caches(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∫—ç—à–µ–π"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—ç—à–µ–π")
        
        success_count = 0
        
        # –°–æ–∑–¥–∞–µ–º –∫—ç—à–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        for org_id, org_info in self.organizations.items():
            success = self.create_organization_cache(org_id, org_info)
            if success:
                success_count += 1
                self.stats["caches_created"] += 1
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫—ç—à
        combined_success = self.create_combined_cache()
        if combined_success:
            self.stats["caches_created"] += 1
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        self.stats["total_contacts"] = sum(
            org_stats["total"] for org_stats in self.stats["organizations"].values()
        )
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.print_final_statistics()
        
        return success_count == len(self.organizations) and combined_success
    
    def print_final_statistics(self) -> None:
        """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        end_time = datetime.now()
        duration = end_time - self.stats["start_time"]
        
        logger.info("="*60)
        logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ö–≠–®–ï–ô")
        logger.info("="*60)
        
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        logger.info(f"üë• –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {self.stats['total_contacts']}")
        logger.info(f"üîÑ –ö—ç—à–µ–π —Å–æ–∑–¥–∞–Ω–æ: {self.stats['caches_created']}")
        logger.info(f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(self.stats['organizations'])}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
        logger.info(f"\nüìà –ö—ç—à–∏ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º:")
        for org_id, org_stats in self.stats["organizations"].items():
            logger.info(f"   {org_stats['name']} ({org_id}):")
            logger.info(f"      üìÑ –§–∞–π–ª: {org_stats['cache_file']}")
            logger.info(f"      üë• –í—Å–µ–≥–æ: {org_stats['total']}")
            logger.info(f"      üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {org_stats['customers']}")
            logger.info(f"      üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {org_stats['vendors']}")
            logger.info(f"      üè∑Ô∏è –° VAT: {org_stats['with_vat']}")
            logger.info(f"      üíæ –†–∞–∑–º–µ—Ä: {org_stats['cache_size']:,} –±–∞–π—Ç")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞
        if "combined_cache" in self.stats:
            combined = self.stats["combined_cache"]
            logger.info(f"\nüìà –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫—ç—à:")
            logger.info(f"   üìÑ –§–∞–π–ª: {combined['file']}")
            logger.info(f"   üë• –í—Å–µ–≥–æ: {combined['total']}")
            logger.info(f"   üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {combined['customers']}")
            logger.info(f"   üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {combined['vendors']}")
            logger.info(f"   üè∑Ô∏è –° VAT: {combined['with_vat']}")
            logger.info(f"   üíæ –†–∞–∑–º–µ—Ä: {combined['cache_size']:,} –±–∞–π—Ç")
        
        if self.stats["errors"]:
            logger.warning(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∏ ({len(self.stats['errors'])}):")
            for error in self.stats["errors"]:
                logger.warning(f"   ‚Ä¢ {error}")
        
        logger.info("="*60)
        logger.info("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –≠–¢–ê–ü–ê 2:")
        logger.info("üìÇ data/optimized_cache/ - –∫—ç—à–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞")
        logger.info("üîç all_contacts_optimized.json - –≥–ª–∞–≤–Ω—ã–π –∫—ç—à –¥–ª—è –ø–æ–∏—Å–∫–∞")
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        logger.info("="*60)
    
    def demonstrate_cache_usage(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞"""
        logger.info("üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞:")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫—ç—à
            cache = OptimizedContactCache("data/optimized_cache/all_contacts_optimized.json")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = cache.get_statistics()
            logger.info(f"   üìä –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à: {stats['total_contacts']} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            
            # –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞
            logger.info("   üîç –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:")
            
            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å VAT –Ω–æ–º–µ—Ä–∞–º–∏
            vat_contacts = cache.get_contacts_with_vat()
            logger.info(f"      ‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å VAT: {len(vat_contacts)}")
            
            # –ü–æ–∏—Å–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
            customers = cache.get_contacts_by_type('customer')
            logger.info(f"      ‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏: {len(customers)}")
            
            # –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            vendors = cache.get_contacts_by_type('vendor')
            logger.info(f"      ‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: {len(vendors)}")
            
            # –ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ VAT (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å VAT)
            if vat_contacts:
                example_vat = vat_contacts[0].vat_number
                if example_vat:
                    found_contact = cache.search_by_vat(example_vat)
                    if found_contact:
                        logger.info(f"      ‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ VAT '{example_vat}': {found_contact.company_name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–• –ö–≠–®–ï–ô")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫—ç—à–µ–π
    creator = OptimizedCacheCreator()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    missing_files = []
    
    for org_id, org_info in creator.organizations.items():
        file_path = Path(org_info["full_data_file"])
        if file_path.exists():
            file_size = file_path.stat().st_size
            print(f"   ‚úÖ {org_info['name']}: {file_path} ({file_size:,} –±–∞–π—Ç)")
        else:
            print(f"   ‚ùå {org_info['name']}: {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
        for file_path in missing_files:
            print(f"   ‚Ä¢ {file_path}")
        print("‚û°Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python src/scripts/step1_download_full_contacts.py")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\nüí° –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ:")
    print("   üìÇ data/optimized_cache/ - –∫—ç—à–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞")
    print("   üîç all_contacts_optimized.json - –≥–ª–∞–≤–Ω—ã–π –∫—ç—à (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π)")
    print("   üìÑ –û—Ç–¥–µ–ª—å–Ω—ã–µ –∫—ç—à–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
    
    confirm = input("\n–°–æ–∑–¥–∞—Ç—å –∫—ç—à–∏? (y/N): ").lower()
    if confirm != 'y':
        print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–µ–π –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–µ–π...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–µ–π
    success = creator.create_all_caches()
    
    if success:
        print("\n‚úÖ –≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üìÇ –ö—ç—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ data/optimized_cache/")
        print("üîç –ì–ª–∞–≤–Ω—ã–π –∫—ç—à: data/optimized_cache/all_contacts_optimized.json")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        creator.demonstrate_cache_usage()
        
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\n‚ùå –≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏!")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π")


if __name__ == "__main__":
    main() 