#!/usr/bin/env python3
"""
Full Contact Import Script
==========================

–ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ Zoho Books —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import asyncio
import logging
import sys
from pathlib import Path
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.domain.services.contact_cache import OptimizedContactCache
from src.domain.services.contact_sync import ContactSyncService, SyncConfig
from src.infrastructure.zoho_api import ZohoAPIClient
from src.infrastructure.config import get_config

# –õ–æ–≥–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ; –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


class ContactImporter:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    
    def __init__(self):
        self.config = get_config()
        self.setup_services()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
        self.stats = {
            "start_time": datetime.now(),
            "organizations_processed": 0,
            "total_contacts_imported": 0,
            "total_api_calls": 0,
            "errors": []
        }
    
    def setup_services(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
        Path("data").mkdir(exist_ok=True)
        Path("logs").mkdir(exist_ok=True)
        
        # –ö—ç—à –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        self.cache = OptimizedContactCache(Path("data/production_contact_cache.json"))
        
        # Zoho API –∫–ª–∏–µ–Ω—Ç
        self.zoho_api = ZohoAPIClient(
            client_id=self.config.zoho.client_id,
            client_secret=self.config.zoho.client_secret,
            refresh_token=self.config.zoho.refresh_token or ""
        )
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        sync_config = SyncConfig(
            webhook_enabled=True,
            webhook_url=f"http://{self.config.api.host}:{self.config.api.port}/api/contacts/webhook/zoho",
            sync_interval_hours=6,
            organizations={
                "20092948714": "TaVie Europe O√ú",
                "20082562863": "PARKENTERTAINMENT Sp. z o. o."
            }
        )
        
        # –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.sync_service = ContactSyncService(
            contact_cache=self.cache,
            zoho_api_client=self.zoho_api,
            config=sync_config
        )
    
    async def import_all_contacts(self, force_refresh: bool = False) -> bool:
        """
        –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        
        Args:
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —Å–≤–µ–∂–∏–π
            
        Returns:
            True –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ Zoho Books")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –∫—ç—à
            current_stats = self.cache.get_cache_stats()
            logger.info(f"üìä –¢–µ–∫—É—â–∏–π –∫—ç—à: {current_stats['total_contacts']} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
            for org_id, org_name in self.sync_service.config.organizations.items():
                await self.import_organization_contacts(org_id, org_name, force_refresh)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            await self.print_final_stats()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            self.stats["errors"].append(f"Critical error: {str(e)}")
            return False
    
    async def import_organization_contacts(self, org_id: str, org_name: str, force_refresh: bool):
        """–ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            logger.info(f"\nüè¢ –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {org_name} ({org_id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å
            if not force_refresh and not self.cache.is_cache_stale(org_id, max_age_hours=24):
                logger.info(f"‚úÖ –ö—ç—à –¥–ª—è {org_name} —Å–≤–µ–∂–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            old_count = self.cache.clear_org_cache(org_id)
            if old_count > 0:
                logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω —Å—Ç–∞—Ä—ã–π –∫—ç—à: {old_count} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ Zoho API...")
            all_contacts = await self.fetch_all_contacts_optimized(org_id)
            
            if not all_contacts:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è {org_name}")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
            added_count = self.cache.add_contacts(all_contacts, org_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats["organizations_processed"] += 1
            self.stats["total_contacts_imported"] += added_count
            
            logger.info(f"‚úÖ {org_name}: {added_count} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {org_name}: {e}")
            self.stats["errors"].append(f"{org_name}: {str(e)}")
    
    async def fetch_all_contacts_optimized(self, org_id: str) -> list:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
        1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–º–∏–Ω–∏–º—É–º –ø–æ–ª–µ–π)
        2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        3. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—É–∑—ã –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
        """
        all_contacts = []
        page = 1
        per_page = 200
        
        logger.info(f"üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
        
        # –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        contact_ids = []
        while True:
            try:
                response = await self.zoho_api.get_contacts(
                    organization_id=org_id,
                    page=page,
                    per_page=per_page
                )
                
                self.stats["total_api_calls"] += 1
                
                if not response or "contacts" not in response:
                    break
                
                contacts = response["contacts"]
                if not contacts:
                    break
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ ID –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                for contact in contacts:
                    if contact.get("contact_id"):
                        contact_ids.append(contact["contact_id"])
                
                logger.info(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                page_context = response.get("page_context", {})
                if not page_context.get("has_more_page", False):
                    break
                
                page += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å–ø–∏—Å–∫–∞
                await asyncio.sleep(0.2)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}): {e}")
                break
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contact_ids)}")
        
        # –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        
        for i, contact_id in enumerate(contact_ids, 1):
            try:
                details = await self.zoho_api.get_contact_details(org_id, contact_id)
                self.stats["total_api_calls"] += 1
                
                if details:
                    all_contacts.append(details)
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å
                if i % 50 == 0:
                    logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{len(contact_ids)} ({i/len(contact_ids)*100:.1f}%)")
                
                # –ü–∞—É–∑–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit (–≤–∞–∂–Ω–æ!)
                await asyncio.sleep(0.3)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id}: {e}")
                self.stats["errors"].append(f"Contact {contact_id}: {str(e)}")
                continue
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {len(all_contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        return all_contacts
    
    async def print_final_stats(self):
        """–ü–µ—á–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        duration = datetime.now() - self.stats["start_time"]
        
        logger.info("\n" + "="*60)
        logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–ê")
        logger.info("="*60)
        logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        logger.info(f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['organizations_processed']}")
        logger.info(f"üë• –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {self.stats['total_contacts_imported']}")
        logger.info(f"üîå –í—Å–µ–≥–æ API –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['total_api_calls']}")
        
        if self.stats["errors"]:
            logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∏: {len(self.stats['errors'])}")
            for error in self.stats["errors"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                logger.warning(f"   - {error}")
            if len(self.stats["errors"]) > 5:
                logger.warning(f"   ... –∏ –µ—â–µ {len(self.stats['errors']) - 5} –æ—à–∏–±–æ–∫")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        final_stats = self.cache.get_cache_stats()
        logger.info(f"\nüíæ –§–ò–ù–ê–õ–¨–ù–´–ô –ö–≠–®–ê:")
        logger.info(f"   –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {final_stats['total_contacts']}")
        logger.info(f"   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {final_stats['organizations']}")
        logger.info(f"   –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å VAT: {final_stats['contacts_with_vat']}")
        
        for org_stat_key, org_stat_value in final_stats.items():
            if org_stat_key.startswith("org_"):
                org_id = org_stat_key.replace("org_", "")
                org_name = self.sync_service.config.organizations.get(org_id, org_id)
                logger.info(f"   {org_name}: {org_stat_value}")
        
        logger.info("="*60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢ –ö–û–ù–¢–ê–ö–¢–û–í –ò–ó ZOHO BOOKS")
    print("="*50)
    
    # –°–æ–∑–¥–∞–µ–º –∏–º–ø–æ—Ä—Ç–µ—Ä
    importer = ContactImporter()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    force = input("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à? (y/N): ").lower() == 'y'
    
    print(f"\nüì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç (force_refresh={force})...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
    success = await importer.import_all_contacts(force_refresh=force)
    
    if success:
        print("\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    else:
        print("\n‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏!")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π")


if __name__ == "__main__":
    asyncio.run(main()) 