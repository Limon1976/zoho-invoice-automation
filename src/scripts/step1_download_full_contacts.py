#!/usr/bin/env python3
"""
–≠—Ç–∞–ø 1: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
==========================================================

–°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ Zoho Books –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö
–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–≤—Å–µ 114 –ø–æ–ª–µ–π).

–†–µ–∑—É–ª—å—Ç–∞—Ç:
- data/full_contacts/TaVie_Europe_20092948714_full.json
- data/full_contacts/PARKENTERTAINMENT_20082562863_full.json
"""

import asyncio
import logging
import json
import time
from datetime import datetime
from pathlib import Path
import sys
from typing import Dict, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.infrastructure.zoho_api import ZohoAPIClient
from src.infrastructure.config import get_config

# –õ–æ–≥–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ; –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


class FullContactsDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º"""
    
    def __init__(self):
        self.config = get_config()
        self.setup_organizations()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        self.stats = {
            "start_time": datetime.now(),
            "organizations": {},
            "total_contacts": 0,
            "total_api_calls": 0,
            "errors": []
        }
    
    def setup_organizations(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        self.organizations = {
            "20092948714": {
                "name": "TaVie Europe O√ú",
                "file_name": "TaVie_Europe_20092948714_full.json",
                "client_id": self.config.zoho.client_id,
                "client_secret": self.config.zoho.client_secret,
                "refresh_token": self.config.zoho.refresh_token or ""
            },
            "20082562863": {
                "name": "PARKENTERTAINMENT Sp. z o. o.",
                "file_name": "PARKENTERTAINMENT_20082562863_full.json",
                "client_id": self.config.zoho.client_id,
                "client_secret": self.config.zoho.client_secret,
                "refresh_token": self.config.zoho.refresh_token or ""
            }
        }
        
        logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
        for org_id, org_info in self.organizations.items():
            logger.info(f"   {org_id}: {org_info['name']}")
    
    async def download_contacts_from_organization(self, org_id: str, org_info: dict) -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ –æ–¥–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
        logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ {org_info['name']} ({org_id})")
        
        # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
        api_client = ZohoAPIClient(
            client_id=org_info["client_id"],
            client_secret=org_info["client_secret"],
            refresh_token=org_info["refresh_token"]
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
            logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
            contacts_response = await api_client.get_contacts(org_id)
            contacts_list = contacts_response.get("contacts", []) if contacts_response else []
            
            if not contacts_list:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {org_info['name']}")
                return False
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(contacts_list)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            self.stats["total_api_calls"] += 1
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            detailed_contacts = []
            
            for i, contact in enumerate(contacts_list, 1):
                contact_id = contact.get("contact_id")
                
                if not contact_id:
                    logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç –±–µ–∑ ID: {contact}")
                    continue
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–≤—Å–µ 114 –ø–æ–ª–µ–π)
                    detailed_contact = await api_client.get_contact_details(org_id, contact_id)
                    
                    if detailed_contact:
                        # –î–æ–±–∞–≤–ª—è–µ–º organization_id –∫ –∫–∞–∂–¥–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É
                        detailed_contact["organization_id"] = org_id
                        detailed_contacts.append(detailed_contact)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                        if i % 50 == 0:
                            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(contacts_list)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
                    
                    self.stats["total_api_calls"] += 1
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
                    await asyncio.sleep(0.3)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id}: {e}")
                    self.stats["errors"].append(f"Contact {contact_id}: {str(e)}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            success = await self.save_full_contacts(org_id, org_info, detailed_contacts)
            
            if success:
                logger.info(f"‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(detailed_contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ {org_info['name']}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                customers = [c for c in detailed_contacts if c.get("contact_type") == "customer"]
                vendors = [c for c in detailed_contacts if c.get("contact_type") == "vendor"]
                with_vat = [c for c in detailed_contacts if c.get("cf_vat_id")]
                
                self.stats["organizations"][org_id] = {
                    "name": org_info["name"],
                    "file_name": org_info["file_name"],
                    "total": len(detailed_contacts),
                    "customers": len(customers),
                    "vendors": len(vendors),
                    "with_vat": len(with_vat)
                }
                
                return True
            else:
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ {org_info['name']}: {e}")
            self.stats["errors"].append(f"Organization {org_id}: {str(e)}")
            return False
    
    async def save_full_contacts(self, org_id: str, org_info: dict, contacts: List[dict]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É full_contacts –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            full_contacts_dir = Path("data/full_contacts")
            full_contacts_dir.mkdir(parents=True, exist_ok=True)
            
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            file_path = full_contacts_dir / org_info["file_name"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(contacts, f, ensure_ascii=False, indent=2)
            
            file_size = file_path.stat().st_size
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {file_path} ({file_size:,} –±–∞–π—Ç)")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è {org_info['name']}: {e}")
            self.stats["errors"].append(f"Save {org_id}: {str(e)}")
            return False
    
    async def download_all_organizations(self) -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        
        success_count = 0
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑ –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        for org_id, org_info in self.organizations.items():
            success = await self.download_contacts_from_organization(org_id, org_info)
            if success:
                success_count += 1
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        self.stats["total_contacts"] = sum(
            org_stats["total"] for org_stats in self.stats["organizations"].values()
        )
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.print_final_statistics()
        
        return success_count == len(self.organizations)
    
    def print_final_statistics(self) -> None:
        """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        end_time = datetime.now()
        duration = end_time - self.stats["start_time"]
        
        logger.info("="*60)
        logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ö–ê–ß–ò–í–ê–ù–ò–Ø")
        logger.info("="*60)
        
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        logger.info(f"üìû –í—Å–µ–≥–æ API –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['total_api_calls']}")
        logger.info(f"üë• –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {self.stats['total_contacts']}")
        logger.info(f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(self.stats['organizations'])}")
        
        logger.info(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º:")
        for org_id, org_stats in self.stats["organizations"].items():
            logger.info(f"   {org_stats['name']} ({org_id}):")
            logger.info(f"      üìÑ –§–∞–π–ª: {org_stats['file_name']}")
            logger.info(f"      üë• –í—Å–µ–≥–æ: {org_stats['total']}")
            logger.info(f"      üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {org_stats['customers']}")
            logger.info(f"      üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {org_stats['vendors']}")
            logger.info(f"      üè∑Ô∏è –° VAT: {org_stats['with_vat']}")
        
        if self.stats["errors"]:
            logger.warning(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∏ ({len(self.stats['errors'])}):")
            for error in self.stats["errors"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                logger.warning(f"   ‚Ä¢ {error}")
            if len(self.stats["errors"]) > 5:
                logger.warning(f"   ... –∏ –µ—â–µ {len(self.stats['errors']) - 5} –æ—à–∏–±–æ–∫")
        
        logger.info("="*60)
        logger.info("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –≠–¢–ê–ü–ê 1:")
        logger.info("üìÇ data/full_contacts/ - –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º")
        logger.info("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø: python src/scripts/step2_create_optimized_cache.py")
        logger.info("="*60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –≠–¢–ê–ü 1: –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ü–û–õ–ù–´–• –î–ê–ù–ù–´–• –ö–û–ù–¢–ê–ö–¢–û–í")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
    downloader = FullContactsDownloader()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("üìä –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑:")
    for org_id, org_info in downloader.organizations.items():
        print(f"   ‚Ä¢ {org_info['name']} ({org_id})")
        print(f"     üìÑ –§–∞–π–ª: data/full_contacts/{org_info['file_name']}")
    
    print("\nüí° –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ:")
    print("   üìÇ data/full_contacts/ - –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤—Å–µ 114 –ø–æ–ª–µ–π)")
    print("   üìù –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
    
    confirm = input("\n–ù–∞—á–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ? (y/N): ").lower()
    if confirm != 'y':
        print("‚ùå –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    print(f"\nüì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    success = await downloader.download_all_organizations()
    
    if success:
        print("\n‚úÖ –≠—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üìÇ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ data/full_contacts/")
        print("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: python src/scripts/step2_create_optimized_cache.py")
    else:
        print("\n‚ùå –≠—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏!")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π")


if __name__ == "__main__":
    asyncio.run(main()) 