"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhooks –≤ Zoho Books
===============================

–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhooks –≤ Zoho Books
–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.
"""

import asyncio
import logging
import sys
from pathlib import Path
from typing import Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
sys.path.append(str(Path(__file__).parent.parent.parent))

from src.infrastructure.zoho_api import ZohoAPIClient
from src.infrastructure.config import get_config

# –õ–æ–≥–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ; –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


class ZohoWebhookManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Zoho Webhooks"""
    
    def __init__(self):
        self.config = get_config()
        self.zoho_api = ZohoAPIClient(
            client_id=self.config.zoho.client_id,
            client_secret=self.config.zoho.client_secret,
            refresh_token=self.config.zoho.refresh_token or ""
        )
        
        # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.organizations = {
            "20092948714": "TaVie Europe O√ú",
            "20082562863": "PARKENTERTAINMENT Sp. z o. o."
        }
    
    async def setup_all_webhooks(self, webhook_url: str) -> Dict[str, bool]:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhooks –¥–ª—è –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        
        Args:
            webhook_url: URL –¥–ª—è webhook endpoint
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        """
        results = {}
        
        logger.info("üîó –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É webhooks –¥–ª—è –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
        logger.info(f"üì° Webhook URL: {webhook_url}")
        
        for org_id, org_name in self.organizations.items():
            logger.info(f"\nüè¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è {org_name} ({org_id})")
            
            try:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ webhooks
                await self.cleanup_old_webhooks(org_id)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π webhook
                success = await self.create_webhook(org_id, webhook_url)
                results[org_id] = success
                
                if success:
                    logger.info(f"‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {org_name}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –¥–ª—è {org_name}")
                    
            except Exception as e:
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ {org_name}: {e}")
                results[org_id] = False
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful = sum(1 for success in results.values() if success)
        total = len(results)
        
        logger.info(f"\nüìä –ò–¢–û–ì–ò –ù–ê–°–¢–†–û–ô–ö–ò WEBHOOKS:")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}/{total}")
        logger.info(f"‚ùå –û—à–∏–±–∫–∏: {total - successful}/{total}")
        
        return results
    
    async def create_webhook(self, organization_id: str, webhook_url: str) -> bool:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ webhook –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        
        Args:
            organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ Zoho
            webhook_url: URL webhook endpoint
            
        Returns:
            True –µ—Å–ª–∏ webhook —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            webhook_data = {
                "webhook_url": webhook_url,
                "events": [
                    "contact.created",
                    "contact.updated", 
                    "contact.deleted"
                ],
                "description": "Contact sync webhook for invoice automation system",
                "enabled": True
            }
            
            logger.info(f"üì§ –°–æ–∑–¥–∞–µ–º webhook —Å —Å–æ–±—ã—Ç–∏—è–º–∏: {webhook_data['events']}")
            
            success = await self.zoho_api.create_webhook(webhook_data, organization_id)
            
            if success:
                logger.info(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è webhook")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ webhook: {e}")
            return False
    
    async def cleanup_old_webhooks(self, organization_id: str):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö webhooks (–µ—Å–ª–∏ –µ—Å—Ç—å API –¥–ª—è —ç—Ç–æ–≥–æ)"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º API –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ webhook'–æ–≤
            # –∏ –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è. –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É.
            logger.info("üßπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ webhooks...")
            # await self.zoho_api.list_webhooks(organization_id)
            # await self.zoho_api.delete_webhook(webhook_id, organization_id)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö webhooks: {e}")
    
    async def test_webhook_endpoint(self, webhook_url: str) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook endpoint
        
        Args:
            webhook_url: URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ endpoint –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        try:
            import httpx
            
            logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å endpoint: {webhook_url}")
            
            async with httpx.AsyncClient() as client:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                response = await client.post(
                    webhook_url,
                    json={
                        "event_type": "test.webhook",
                        "test": True,
                        "message": "Test webhook from setup script"
                    },
                    timeout=10.0
                )
                
                if response.status_code == 200:
                    logger.info("‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è Endpoint –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoint: {e}")
            return False
    
    def generate_webhook_url(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è webhook –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        host = self.config.api.host
        port = self.config.api.port
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
        if host in ["localhost", "127.0.0.1"] or host.startswith("192.168."):
            protocol = "http"
        else:
            protocol = "https"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL
        if port in [80, 443]:
            webhook_url = f"{protocol}://{host}/api/contacts/webhook/zoho"
        else:
            webhook_url = f"{protocol}://{host}:{port}/api/contacts/webhook/zoho"
        
        return webhook_url
    
    def get_webhook_instructions(self) -> str:
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook"""
        instructions = """
üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û WEBHOOK:

1. üåê –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–∞—à —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
   - –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–π —Ç—É–Ω–Ω–µ–ª—å
   - –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–º–µ–Ω —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º

2. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∞—à FastAPI —Å–µ—Ä–≤–µ—Ä:
   python -m uvicorn src.api.main:app --host 0.0.0.0 --port 8000

3. üîó Webhook endpoint –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:
   {webhook_url}

4. ‚úÖ –°–æ–±—ã—Ç–∏—è –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è:
   - contact.created - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
   - contact.updated - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞  
   - contact.deleted - —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞

5. üîí –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS
   - –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å webhook (X-Zoho-Webhook-Signature)
   - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è
        """
        
        return instructions.format(
            webhook_url=self.generate_webhook_url()
        )


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîó –ù–ê–°–¢–†–û–ô–ö–ê ZOHO BOOKS WEBHOOKS")
    print("=" * 50)
    
    manager = ZohoWebhookManager()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print(manager.get_webhook_instructions())
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º URL
    suggested_url = manager.generate_webhook_url()
    print(f"\nüí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π URL: {suggested_url}")
    
    webhook_url = input("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è webhook (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–≥–æ): ").strip()
    if not webhook_url:
        webhook_url = suggested_url
    
    print(f"\nüéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º URL: {webhook_url}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    test_endpoint = input("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å endpoint? (y/N): ").lower() == 'y'
    
    if test_endpoint:
        endpoint_ok = await manager.test_webhook_endpoint(webhook_url)
        if not endpoint_ok:
            continue_anyway = input("Endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É? (y/N): ").lower() == 'y'
            if not continue_anyway:
                print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhooks
    print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É webhooks...")
    results = await manager.setup_all_webhooks(webhook_url)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    successful_orgs = [org_id for org_id, success in results.items() if success]
    
    if successful_orgs:
        print(f"\n‚úÖ Webhooks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üì± –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ Zoho Books –≤–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞")
        print("   –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        print("\nüîç –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.")
    else:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhooks")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π")
        print("üîë –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ webhooks –≤ Zoho")


if __name__ == "__main__":
    asyncio.run(main()) 