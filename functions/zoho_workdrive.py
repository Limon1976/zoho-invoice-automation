"""
Zoho WorkDrive API integration
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ WorkDrive OAuth —Ç–æ–∫–µ–Ω—ã –∏–∑ .env
"""

import os
import sys
import requests
import json
from datetime import datetime, timezone, timedelta
from typing import List, Dict, Optional, Any
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# WorkDrive OAuth —Ç–æ–∫–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞
ZOHO_WORKDRIVE_CLIENT_ID = os.getenv("WORKDRIVE_CLIENT_ID")
ZOHO_WORKDRIVE_CLIENT_SECRET = os.getenv("WORKDRIVE_CLIENT_SECRET")
ZOHO_WORKDRIVE_REFRESH_TOKEN = os.getenv("WORKDRIVE_REFRESH_TOKEN")

# –ö—ç—à–∏—Ä—É–µ–º WorkDrive —Ç–æ–∫–µ–Ω –≤ –ø–∞–º—è—Ç–∏
_workdrive_access_token_cache = None

logger = logging.getLogger(__name__)

def get_workdrive_access_token(force_refresh=False):
    """–ü–æ–ª—É—á–∞–µ—Ç access_token –¥–ª—è WorkDrive API"""
    global _workdrive_access_token_cache
    if _workdrive_access_token_cache and not force_refresh:
        return _workdrive_access_token_cache
    
    url = "https://accounts.zoho.eu/oauth/v2/token"
    payload = {
        "refresh_token": ZOHO_WORKDRIVE_REFRESH_TOKEN,
        "client_id": ZOHO_WORKDRIVE_CLIENT_ID,
        "client_secret": ZOHO_WORKDRIVE_CLIENT_SECRET,
        "grant_type": "refresh_token"
    }
    
    response = requests.post(url, data=payload)
    data = response.json()
    
    if "access_token" in data:
        _workdrive_access_token_cache = data["access_token"]
        logger.info("‚úÖ WorkDrive access_token –æ–±–Ω–æ–≤–ª—ë–Ω!")
        return _workdrive_access_token_cache
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è WorkDrive —Ç–æ–∫–µ–Ω–∞: {data}")
        return None

class ZohoWorkDriveAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Zoho WorkDrive API"""
    
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º EU –¥–∞—Ç–∞—Ü–µ–Ω—Ç—Ä –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        self.base_url = "https://workdrive.zoho.eu/api/v1"
        # –í–ê–ñ–ù–û: WorkDrive —Ç–æ–ª—å–∫–æ –≤ PARKENTERTAINMENT –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ 
        # –Ω–æ –ø–∞–ø–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω–≤–æ–π—Å—ã –¥–ª—è –æ–±–µ–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        self.august_folder_id = "1zqms56fb76bbe95e469bacc06a33e010fb84"
        self.org_mapping = {
            # –§–∞–π–ª—ã –≤ WorkDrive –º–æ–≥—É—Ç –±—ã—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö Zoho Books –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
            "PARKENTERTAINMENT": "20082562863",
            "TaVie_Europe": "772348639"
        }
    
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–ø–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        self.folder_config = {
            "PARKENTERTAINMENT": {
                "root_folder_id": "ce7tm86c3e04ff97b4e889488b99e19e225a8",  # –ò–∑ URL
                "current_year_direct": True,  # –¢–µ–∫—É—â–∏–π –≥–æ–¥ - –º–µ—Å—è—Ü—ã –ø—Ä—è–º–æ –≤ –∫–æ—Ä–Ω–µ
                "month_names": "english"  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
            },
            "TaVie_Europe": {
                "invoices_folder_id": "cj6069aca8a3cf37d4722a606b5749aa95283",  # Invoices folder
                "year_2025_folder_id": "etttvb47c5de227e044428d286ba9e5492073",  # 2025 folder
                "current_year_direct": False,  # –¢–µ–∫—É—â–∏–π –≥–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–ø–∫–µ
                "month_names": "russian"  # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
            }
        }
    
    def _get_headers(self, content_type: str = "application/json") -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        access_token = get_workdrive_access_token()
        if not access_token:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_token –¥–ª—è WorkDrive")
            return {}
            
        headers = {
            "Authorization": f"Zoho-oauthtoken {access_token}",
        }
        if content_type:
            headers["Content-Type"] = content_type
        return headers
    
    def mark_file_as_final(self, file_id: str, bill_number: str = "", bill_id: str = "") -> bool:
        """
        –ü–æ–º–µ—á–∞–µ—Ç —Ñ–∞–π–ª –≤ WorkDrive –∫–∞–∫ Final (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π)
        
        Args:
            file_id: ID —Ñ–∞–π–ª–∞ –≤ WorkDrive
            bill_number: –ù–æ–º–µ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ Bill (–¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
            bill_id: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ Bill –≤ Zoho Books
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω
        """
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            file_url = f"{self.base_url}/files/{file_id}"
            headers = self._get_headers()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –æ—Ç–º–µ—Ç–∫–æ–π –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
            description = f"PROCESSED ‚úÖ"
            if bill_number:
                description += f" Bill: {bill_number}"
            if bill_id:
                description += f" (Zoho ID: {bill_id})"
            description += f" | {datetime.now().strftime('%Y-%m-%d %H:%M')}"
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_marked_final = True + –æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            update_data = {
                "data": {
                    "type": "files",
                    "attributes": {
                        "is_marked_final": True,
                        "description": description
                    }
                }
            }
            
            logger.info(f"üè∑Ô∏è –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_id}: {description}")
            
            response = requests.patch(file_url, headers=headers, json=update_data)
            
            if response.status_code in [200, 204]:
                logger.info(f"‚úÖ –§–∞–π–ª {file_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ Final —á–µ—Ä–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–µ")
                return True
            else:
                # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                if response.status_code in [401, 500] and "Invalid OAuth token" in response.text:
                    logger.info("üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –≤ mark_file_as_final, –æ–±–Ω–æ–≤–ª—è—é...")
                    new_token = get_workdrive_access_token(force_refresh=True)
                    if new_token:
                        headers = self._get_headers()
                        response = requests.patch(file_url, headers=headers, json=update_data)
                        logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å mark_file_as_final: {response.status_code}")
                        
                        if response.status_code in [200, 204]:
                            logger.info(f"‚úÖ –§–∞–π–ª {file_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ Final —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
                            return True
                
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {response.status_code} - {response.text}")
                
                # Fallback: –ø—Ä–æ—Å—Ç–∞—è –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∏ (–±–µ–∑ API)
                logger.info(f"üìù FALLBACK: –§–∞–π–ª {file_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω - {description}")
                return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ Final: {e}")
            return False
    
    def check_file_final_status(self, file_id: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ - –ø–æ–º–µ—á–µ–Ω –ª–∏ –∫–∞–∫ Final
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ —Ñ–∞–π–ª–∞
        """
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–º–µ—Å—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            file_url = f"{self.base_url}/files/{file_id}"
            headers = self._get_headers()
            
            response = requests.get(file_url, headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                attributes = data.get('data', {}).get('attributes', {})
                description = attributes.get('description', '')
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ is_marked_final (–∑–µ–ª–µ–Ω–∞—è –≥–∞–ª–æ—á–∫–∞)
                is_final = attributes.get('is_marked_final', False) or 'PROCESSED ‚úÖ' in description
                
                if is_final:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                    bill_number = ""
                    bill_id = ""
                    
                    import re
                    bill_match = re.search(r'Bill: ([^\s\(]+)', description)
                    if bill_match:
                        bill_number = bill_match.group(1)
                    
                    id_match = re.search(r'Zoho ID: ([^\)]+)', description)
                    if id_match:
                        bill_id = id_match.group(1)
                    
                    return {
                        'is_final': True,
                        'description': description,
                        'bill_number': bill_number,
                        'bill_id': bill_id,
                        'file_name': attributes.get('name', 'unknown')
                    }
                else:
                    return {
                        'is_final': False, 
                        'description': description,
                        'file_name': attributes.get('name', 'unknown')
                    }
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ: {response.status_code}")
                return {'is_final': False, 'error': f'API error {response.status_code}'}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–∞: {e}")
            return {'is_final': False, 'error': str(e)}
    
    def create_folder(self, parent_folder_id: str, folder_name: str) -> Optional[str]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –≤ WorkDrive
        
        Args:
            parent_folder_id: ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏
            folder_name: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏
            
        Returns:
            str: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –¥–æ–º–µ–Ω —á—Ç–æ –∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        url = f"https://workdrive.zoho.eu/api/v1/folders"
        headers = self._get_headers()
        
        payload = {
            "data": {
                "attributes": {
                    "name": folder_name,
                    "parent_id": parent_folder_id
                }
            }
        }
        
        try:
            logger.info(f"üìÅ API —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: POST {url}")
            response = requests.post(url, headers=headers, json=payload)
            logger.info(f"üìÅ Create folder response: {response.status_code}")
            
            if response.status_code == 201:
                data = response.json()
                folder_id = data.get('data', {}).get('id')
                logger.info(f"‚úÖ –ü–∞–ø–∫–∞ '{folder_name}' —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {folder_id}")
                return folder_id
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {response.status_code} {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")
            return None
    
    def upload_file(self, folder_id: str, file_path: str, filename: str = None) -> Optional[str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ WorkDrive –ø–∞–ø–∫—É
        
        Args:
            folder_id: ID –ø–∞–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ –¥–∏—Å–∫–µ
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ file_path)
            
        Returns:
            str: ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not os.path.exists(file_path):
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return None
            
        if not filename:
            filename = os.path.basename(file_path)
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ WorkDrive (EU –¥–∞—Ç–∞—Ü–µ–Ω—Ç—Ä)
        url = f"https://workdrive.zoho.eu/api/v1/upload"
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        logger.info("üîÑ –û–±–Ω–æ–≤–ª—è—é WorkDrive —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π...")
        fresh_token = get_workdrive_access_token(force_refresh=True)
        if not fresh_token:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å WorkDrive —Ç–æ–∫–µ–Ω")
            return None
            
        headers = self._get_headers(content_type=None)  # –î–ª—è multipart/form-data –Ω–µ –Ω—É–∂–µ–Ω Content-Type
        
        try:
            with open(file_path, 'rb') as file_content:
                # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è WorkDrive upload API
                files = {
                    'content': (filename, file_content, 'application/pdf')
                }
                data = {
                    'parent_id': folder_id,
                    'filename': filename,
                    'override-name-exist': 'true'
                }
                
                response = requests.post(url, headers=headers, files=files, data=data)
                logger.info(f"üì§ Upload file response: {response.status_code}")
                
                # WorkDrive –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                if response.status_code == 200:
                    try:
                        response_data = response.json()
                        data_list = response_data.get('data', [])
                        
                        if data_list and len(data_list) > 0:
                            file_info = data_list[0]
                            file_id = file_info.get('attributes', {}).get('resource_id')
                            permalink = file_info.get('attributes', {}).get('Permalink')
                            uploaded_filename = file_info.get('attributes', {}).get('FileName', filename)
                            
                            logger.info(f"‚úÖ –§–∞–π–ª '{uploaded_filename}' –∑–∞–≥—Ä—É–∂–µ–Ω —Å ID: {file_id}")
                            return file_id
                        else:
                            logger.error(f"‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç data: {response_data}")
                            return None
                    except Exception as json_error:
                        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –Ω–æ —Å—Ç–∞—Ç—É—Å 200 - —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON (—Å—Ç–∞—Ç—É—Å 200): {json_error}")
                        logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω (—Å—Ç–∞—Ç—É—Å 200), –Ω–æ JSON –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è - —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º")
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
                        import time
                        temp_id = f"upload_{int(time.time())}"
                        return temp_id
                else:
                    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (401 –∏–ª–∏ 500 Invalid OAuth token) - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
                    if response.status_code in [401, 500] and "Invalid OAuth token" in response.text:
                        logger.info("üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è—é...")
                        new_token = get_workdrive_access_token(force_refresh=True)
                        if new_token:
                            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                            headers = self._get_headers(content_type=None)
                            with open(file_path, 'rb') as file_content:
                                files = {
                                    'content': (filename, file_content, 'application/pdf')
                                }
                                data = {
                                    'parent_id': folder_id,
                                    'filename': filename,
                                    'override-name-exist': 'true'
                                }
                                response = requests.post(url, headers=headers, files=files, data=data)
                                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {response.status_code}")
                                
                                if response.status_code == 200:
                                    try:
                                        response_data = response.json()
                                        data_list = response_data.get('data', [])
                                        if data_list and len(data_list) > 0:
                                            file_info = data_list[0]
                                            file_id = file_info.get('attributes', {}).get('resource_id')
                                            logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º, ID: {file_id}")
                                            return file_id
                                    except Exception:
                                        import time
                                        return f"upload_{int(time.time())}"
                    
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {response.status_code} {response.text}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def find_or_create_folder(self, parent_folder_id: str, folder_name: str) -> Optional[str]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–∞–ø–∫—É –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é
        
        Args:
            parent_folder_id: ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏
            folder_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
            
        Returns:
            str: ID –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É
        try:
            url = f"{self.base_url}/files/{parent_folder_id}/files"
            headers = self._get_headers()
            
            logger.info(f"üîç –ò—â–µ–º –ø–∞–ø–∫—É '{folder_name}' –≤ {parent_folder_id}")
            response = requests.get(url, headers=headers)
            logger.info(f"üîç API response: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                files = data.get('data', [])
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ: {len(files)}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                folders_found = []
                for item in files:
                    item_name = item.get('attributes', {}).get('name', '')
                    item_type = item.get('attributes', {}).get('type', '')
                    if item_type == 'folder':
                        folders_found.append(item_name)
                        if item_name == folder_name:
                            folder_id = item.get('id')
                            logger.info(f"‚úÖ –ù–ê–ô–î–ï–ù–ê –ø–∞–ø–∫–∞ '{folder_name}' —Å ID: {folder_id}")
                            return folder_id
                
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏: {folders_found}")
                logger.info(f"üîç –ò—â–µ–º –ø–∞–ø–∫—É: '{folder_name}'")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –ø–æ–∏—Å–∫–∞ –ø–∞–ø–∫–∏: {response.status_code} {response.text}")
            
            # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            logger.info(f"üìÅ –ü–∞–ø–∫–∞ '{folder_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ {len(folders_found) if 'folders_found' in locals() else 0} –ø–∞–ø–æ–∫, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é")
            return self.create_folder(parent_folder_id, folder_name)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞/—Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
            return None
    
    def auto_upload_document(self, org_name: str, document_date: str, file_path: str, filename: str = None, analysis: Dict = None) -> Dict[str, Any]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –¥–∞—Ç–µ
        
        Args:
            org_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (PARKENTERTAINMENT –∏–ª–∏ TaVie Europe O√ú)
            document_date: –î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (YYYY-MM-DD, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–∞—Ç–µ –ø—Ä–æ–¥–∞–∂–∏)
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            analysis: –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–¥–ª—è TaVie Europe)
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–ø–∫–µ –∏ —Ñ–∞–π–ª–µ
        """
        try:
            # –£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            from datetime import datetime
            doc_date = None
            
            if isinstance(document_date, str) and document_date.strip():
                date_formats = [
                    "%Y-%m-%d", "%d/%m/%Y", "%Y.%m.%d", "%d.%m.%Y", 
                    "%d-%m-%Y", "%Y/%m/%d", "%m/%d/%Y", "%d %m %Y",
                    "%Y-%m-%d %H:%M:%S", "%d.%m.%Y %H:%M"
                ]
                
                for fmt in date_formats:
                    try:
                        doc_date = datetime.strptime(document_date.strip(), fmt)
                        logger.info(f"üìÖ –î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {doc_date.strftime('%Y-%m-%d')} (—Ñ–æ—Ä–º–∞—Ç: {fmt})")
                        break
                    except:
                        continue
            
            if not doc_date:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É '{document_date}', –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é")
                doc_date = datetime.now()
            
            current_year = datetime.now().year
            current_month = datetime.now().month
            doc_year = doc_date.year
            doc_month = doc_date.month
            
            # –ü–†–û–í–ï–†–ö–ê –ì–û–î–ê - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –≥–æ–¥ –Ω–µ —Ç–µ–∫—É—â–∏–π
            year_warning = ""
            if doc_year != current_year:
                if abs(doc_year - current_year) > 1:  # –ë–æ–ª—å—à–µ —á–µ–º –Ω–∞ 1 –≥–æ–¥ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
                    year_warning = f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç {doc_year} –≥–æ–¥–∞, –∞ —Å–µ–π—á–∞—Å {current_year}! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞—Ç—ã."
                    logger.warning(year_warning)
                else:
                    year_warning = f"‚ÑπÔ∏è –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç {doc_year} –≥–æ–¥–∞ (—Å–µ–π—á–∞—Å {current_year})"
                    logger.info(year_warning)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            if 'PARKENTERTAINMENT' in org_name:
                config = self.folder_config["PARKENTERTAINMENT"]
                month_names = [
                    '', 'January', 'February', 'March', 'April', 'May', 'June',
                    'July', 'August', 'September', 'October', 'November', 'December'
                ]
                month_name = month_names[doc_month]
                
                # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø INVOICE PARK:
                # 1. –¢–µ–∫—É—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü - –≤ –∫–æ—Ä–Ω–µ Invoice PARK
                # 2. –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Å—è—Ü—ã - –≤ –ø–∞–ø–∫–∞—Ö –≥–æ–¥–∞
                if doc_year == current_year:
                    # –¢–µ–∫—É—â–∏–π –≥–æ–¥
                    if doc_month == current_month:
                        # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü - —Å–æ–∑–¥–∞–µ–º/–Ω–∞—Ö–æ–¥–∏–º –ø–∞–ø–∫—É –≤ –∫–æ—Ä–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä "September")
                        month_folder_id = self.find_or_create_folder(config["root_folder_id"], month_name)
                        if not month_folder_id:
                            return {"success": False, "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –º–µ—Å—è—Ü–∞ {month_name}"}
                        parent_folder_id = month_folder_id
                        folder_name = month_name
                        logger.info(f"üìÅ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü {month_name} - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–ø–∫—É {month_name}")
                    elif doc_month == current_month - 1 or (current_month == 1 and doc_month == 12):
                        # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü - —Å–æ–∑–¥–∞–µ–º/–Ω–∞—Ö–æ–¥–∏–º –ø–∞–ø–∫—É –≤ –∫–æ—Ä–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä "August")
                        month_folder_id = self.find_or_create_folder(config["root_folder_id"], month_name)
                        if not month_folder_id:
                            return {"success": False, "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –º–µ—Å—è—Ü–∞ {month_name}"}
                        parent_folder_id = month_folder_id
                        folder_name = month_name
                        logger.info(f"üìÅ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü {month_name} - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–ø–∫—É {month_name}")
                    else:
                        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Å—è—Ü—ã —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ - –≤ –ø–∞–ø–∫–µ –≥–æ–¥–∞
                        year_folder_id = self.find_or_create_folder(config["root_folder_id"], str(doc_year))
                        if not year_folder_id:
                            return {"success": False, "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –≥–æ–¥–∞ {doc_year}"}
                        parent_folder_id = year_folder_id
                        folder_name = month_name
                        logger.info(f"üìÅ –ú–µ—Å—è—Ü {month_name} {doc_year} - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–ø–∫—É –≥–æ–¥–∞ {doc_year}")
                else:
                    # –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≥–æ–¥—ã - –≤ –ø–∞–ø–∫–µ –≥–æ–¥–∞
                    year_folder_id = self.find_or_create_folder(config["root_folder_id"], str(doc_year))
                    if not year_folder_id:
                        return {"success": False, "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –≥–æ–¥–∞ {doc_year}"}
                    parent_folder_id = year_folder_id
                    folder_name = month_name
                    logger.info(f"üìÅ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ–¥ {doc_year} - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–ø–∫—É –≥–æ–¥–∞ {doc_year}")
                    
            else:  # TaVie Europe O√ú - –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–ê–ü–û–ö
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É TaVie Europe –∏–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                tavie_root_folder_id = "cfmqld8f0733e97bc497b83599cc8ab21b21f"
                
                # –ú–µ—Å—è—Ü—ã –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏ –¥–ª—è TaVie Europe
                month_names = [
                    '', 'January', 'February', 'March', 'April', 'May', 'June',
                    'July', 'August', 'September', 'October', 'November', 'December'
                ]
                month_name = month_names[doc_month]
                
                logger.info(f"üìÅ TaVie Europe: —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Sales Car ‚Üí {doc_year} ‚Üí {month_name}")
                
                # 1. –°–æ–∑–¥–∞–µ–º/–Ω–∞—Ö–æ–¥–∏–º –ø–∞–ø–∫—É "Sales Car"
                sales_car_folder_id = self.find_or_create_folder(tavie_root_folder_id, "Sales Car")
                if not sales_car_folder_id:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É 'Sales Car'")
                    return {"success": False, "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É 'Sales Car'"}
                
                # 2. –°–æ–∑–¥–∞–µ–º/–Ω–∞—Ö–æ–¥–∏–º –ø–∞–ø–∫—É –≥–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "2025")
                year_folder_id = self.find_or_create_folder(sales_car_folder_id, str(doc_year))
                if not year_folder_id:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –≥–æ–¥–∞ {doc_year}")
                    return {"success": False, "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –≥–æ–¥–∞ {doc_year}"}
                
                # 3. –°–æ–∑–¥–∞–µ–º/–Ω–∞—Ö–æ–¥–∏–º –ø–∞–ø–∫—É –º–µ—Å—è—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "September")
                month_folder_id = self.find_or_create_folder(year_folder_id, month_name)
                if not month_folder_id:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –º–µ—Å—è—Ü–∞ {month_name}")
                    return {"success": False, "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –º–µ—Å—è—Ü–∞ {month_name}"}
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–ø–∫—É –º–µ—Å—è—Ü–∞
                logger.info(f"üöó TaVie Europe: –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ Sales Car/{doc_year}/{month_name}")
                parent_folder_id = month_folder_id
                folder_name = f"Sales Car/{doc_year}/{month_name}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤ –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                if analysis and self._is_car_document(analysis):
                    car_info = self._create_car_folder_name(analysis)
                    if car_info and filename:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤ –∏–º—è —Ñ–∞–π–ª–∞
                        import os
                        base_name, ext = os.path.splitext(filename)
                        filename = f"{car_info}_{base_name}{ext}"
                        logger.info(f"üöó –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤ –∏–º—è —Ñ–∞–π–ª–∞: {filename}")
            
            # –õ–æ–≥–∏–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤—ã—à–µ, parent_folder_id –∏ folder_name –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            if not filename:
                filename = os.path.basename(file_path)
            
            upload_result = self.upload_file(parent_folder_id, file_path, filename)
            if upload_result:
                logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–ø–∫—É '{folder_name}'")
                result = {
                    "success": True,
                    "file_id": upload_result,
                    "folder_id": parent_folder_id,
                    "folder_path": folder_name,
                    "filename": filename,
                    "organization": org_name,
                    "document_date": doc_date.strftime('%Y-%m-%d'),
                    "document_year": doc_year,
                    "current_year": current_year
                }
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≥–æ–¥–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if year_warning:
                    result["year_warning"] = year_warning
                return result
            else:
                logger.error(f"‚ùå upload_file –≤–µ—Ä–Ω—É–ª None –¥–ª—è —Ñ–∞–π–ª–∞ {filename}")
                return {"success": False, "error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ WorkDrive API", "year_warning": year_warning}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return {"success": False, "error": str(e)}
    
    def _is_car_document(self, analysis: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º"""
        # 1. –ï—Å—Ç—å VIN –Ω–æ–º–µ—Ä
        vin = analysis.get('vin', '')
        if vin and len(vin) == 17:
            return True
        
        # 2. LLM –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        category = (analysis.get('product_category') or '').upper()
        if category == 'CARS':
            return True
        
        # 3. –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        text = (analysis.get('extracted_text') or '').lower()
        car_keywords = ['bmw', 'mercedes', 'audi', 'vehicle', 'car', 'auto']
        
        return any(kw in text for kw in car_keywords)
    
    def _create_car_folder_name(self, analysis: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è: –ú–∞—Ä–∫–∞ - –ú–æ–¥–µ–ª—å - VIN"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            car_brand = analysis.get('car_brand', '').strip()
            car_model = analysis.get('car_model', '').strip()
            vin = analysis.get('vin', '').strip()
            
            if not vin:
                logger.warning("‚ö†Ô∏è VIN –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
                return None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ: BMW X6 WBA11EY0909Y29631
            if car_brand and car_model:
                folder_name = f"{car_brand} {car_model} {vin}"
            elif car_brand:
                folder_name = f"{car_brand} {vin}"
            else:
                folder_name = f"Car {vin}"
            
            # –û—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            folder_name = folder_name.replace('/', '-').replace('\\', '-').replace(':', '-')
            
            logger.info(f"üöó –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: '{folder_name}'")
            return folder_name
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}")
            return None
    
    def get_folder_files(self, folder_id: str = None) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
        
        Args:
            folder_id: ID –ø–∞–ø–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é August –ø–∞–ø–∫–∞)
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        if not folder_id:
            folder_id = self.august_folder_id
            
        # –ü–†–ê–í–ò–õ–¨–ù–´–ô endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –í–ù–£–¢–†–ò –ø–∞–ø–∫–∏
        url = f"{self.base_url}/files/{folder_id}/files"
        headers = self._get_headers()
        
        try:
            response = requests.get(url, headers=headers)
            logger.info(f"üìÅ WorkDrive API response: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"üîç DEBUG: API response structure: {type(data)}")
                logger.info(f"üîç DEBUG: API response keys: {list(data.keys()) if isinstance(data, dict) else 'Not a dict'}")
                
                # WorkDrive –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {"data": [{"id": "...", "attributes": {...}}, ...]}
                files = []
                if isinstance(data, dict) and 'data' in data:
                    raw_files = data['data']
                    if isinstance(raw_files, list):
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        for item in raw_files:
                            if isinstance(item, dict) and 'attributes' in item:
                                file_info = {
                                    'id': item.get('id', ''),
                                    'name': item['attributes'].get('name', ''),
                                    'display_name': item['attributes'].get('display_attr_name', ''),
                                    'created_time': item['attributes'].get('created_time', ''),
                                    'modified_time': item['attributes'].get('modified_time', ''),
                                    'size': item['attributes'].get('storage_info', {}).get('size_in_bytes', 0),
                                    'type': item['attributes'].get('type', ''),
                                    'is_folder': item['attributes'].get('is_folder', False)
                                }
                                files.append(file_info)
                
                logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {len(files)}")
                if files and len(files) > 0:
                    logger.info(f"üîç DEBUG: First file: {files[0].get('name', 'No name')} (ID: {files[0].get('id', 'No ID')})")
                
                return files
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {response.status_code} - {response.text}")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return []
    
    def get_files_by_date(self, target_date: str, folder_id: str = None) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–π–ª—ã, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É (Warsaw timezone)
        
        Args:
            target_date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2025-08-19" 
            folder_id: ID –ø–∞–ø–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é August –ø–∞–ø–∫–∞)
            
        Returns:
            List[Dict]: –§–∞–π–ª—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        """
        all_files = self.get_folder_files(folder_id)
        
        # –ü–∞—Ä—Å–∏–º —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É
        target_dt = datetime.strptime(target_date, "%Y-%m-%d").date()
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –≤ —Ä—É—Å—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç Zoho
        def parse_zoho_date(date_str: str) -> datetime:
            """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–∞–≤–≥ 19, 9:38 PM'"""
            import locale
            try:
                # –†—É—Å—Å–∫–∏–µ –º–µ—Å—è—Ü—ã –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏
                months_ru = {
                    '—è–Ω–≤': 'Jan', '—Ñ–µ–≤': 'Feb', '–º–∞—Ä': 'Mar', '–∞–ø—Ä': 'Apr',
                    '–º–∞–π': 'May', '–∏—é–Ω': 'Jun', '–∏—é–ª': 'Jul', '–∞–≤–≥': 'Aug',
                    '—Å–µ–Ω': 'Sep', '–æ–∫—Ç': 'Oct', '–Ω–æ—è': 'Nov', '–¥–µ–∫': 'Dec'
                }
                
                # –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–π –º–µ—Å—è—Ü –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                date_en = date_str
                for ru_month, en_month in months_ru.items():
                    if ru_month in date_str:
                        date_en = date_str.replace(ru_month, en_month)
                        break
                
                # –ü–∞—Ä—Å–∏–º –∫–∞–∫ –∞–Ω–≥–ª–∏–π—Å–∫—É—é –¥–∞—Ç—É
                # –§–æ—Ä–º–∞—Ç: "Aug 19, 9:38 PM" -> –¥–æ–±–∞–≤–ª—è–µ–º 2025 –≥–æ–¥
                if ',' in date_en and not any(char.isdigit() and len([c for c in date_en.split() if c.isdigit() and len(c) == 4]) > 0 for char in date_en):
                    date_en = date_en.replace(',', ', 2025,')
                
                return datetime.strptime(date_en, "%b %d, %Y, %I:%M %p")
            except:
                # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–∞—Ä—Å–∏—Ç—å
                return datetime.now()
        
        filtered_files = []
        for file in all_files:
            try:
                created_time = file.get('created_time', '')
                if created_time:
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É Zoho –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
                    file_dt = parse_zoho_date(created_time).date()
                    
                    if file_dt == target_dt:
                        filtered_files.append(file)
                        logger.info(f"üìÖ –§–∞–π–ª –∑–∞ {target_date}: {file.get('name', 'Unnamed')} (–¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_time})")
                        
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –¥–ª—è —Ñ–∞–π–ª–∞ {file.get('name', 'Unknown')}: {e}")
                continue
        
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∑–∞ {target_date}: {len(filtered_files)}")
        return filtered_files
    
    def download_file(self, file_id: str, save_path: str, original_filename: str = None) -> bool:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ WorkDrive —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏
        
        Args:
            file_id: ID —Ñ–∞–π–ª–∞ –≤ WorkDrive
            save_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (—Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º)
            original_filename: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω
        """
        url = f"{self.base_url}/download/{file_id}"
        headers = self._get_headers()
        
        try:
            display_name = original_filename or file_id
            logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª '{display_name}' (ID: {file_id})")
            
            response = requests.get(url, headers=headers, stream=True)
            
            if response.status_code == 200:
                # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                os.makedirs(os.path.dirname(save_path), exist_ok=True)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                with open(save_path, 'wb') as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        f.write(chunk)
                
                file_size = os.path.getsize(save_path)
                logger.info(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {save_path} ({file_size} –±–∞–π—Ç)")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è '{display_name}': {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ '{display_name}': {e}")
            return False
    
    def get_processable_files_by_date(self, target_date: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ JPEG –¥–æ–±–∞–≤–ª–µ–Ω–∞)
        
        Args:
            target_date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2025-08-19"
            
        Returns:
            List[Dict]: PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        """
        all_files = self.get_files_by_date(target_date)
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        supported_extensions = ('.pdf', '.jpeg', '.jpg', '.png', '.tiff')
        
        processable_files = []
        pdf_count = 0
        image_count = 0
        
        for file in all_files:
            file_name = file.get('name', '').lower()
            if file_name.endswith(supported_extensions):
                processable_files.append(file)
                
                if file_name.endswith('.pdf'):
                    pdf_count += 1
                    logger.info(f"üìÑ PDF —Ñ–∞–π–ª: {file.get('name')}")
                else:
                    image_count += 1
                    logger.info(f"üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file.get('name')}")
        
        logger.info(f"üìä PDF —Ñ–∞–π–ª–æ–≤ –∑–∞ {target_date}: {pdf_count}")
        logger.info(f"üìä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ {target_date}: {image_count}")
        logger.info(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(processable_files)}")
        
        return processable_files
    
    def get_pdf_files_by_date(self, target_date: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        
        Args:
            target_date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2025-08-19"
            
        Returns:
            List[Dict]: PDF —Ñ–∞–π–ª—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        """
        all_files = self.get_processable_files_by_date(target_date)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ PDF
        pdf_files = [f for f in all_files if f.get('name', '').lower().endswith('.pdf')]
        
        return pdf_files

def test_workdrive_access():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ WorkDrive API —Å –Ω–æ–≤—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WORKDRIVE API –° –ù–û–í–´–ú–ò –¢–û–ö–ï–ù–ê–ú–ò")
    
    drive = ZohoWorkDriveAPI()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã
    if not all([ZOHO_WORKDRIVE_CLIENT_ID, ZOHO_WORKDRIVE_CLIENT_SECRET, ZOHO_WORKDRIVE_REFRESH_TOKEN]):
        print("‚ùå –ù–µ –≤—Å–µ WorkDrive —Ç–æ–∫–µ–Ω—ã –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
        return False
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ August –ø–∞–ø–∫–∏
    print("\nüìÅ –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ August")
    files = drive.get_folder_files()
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
    
    if files:
        print("üìÑ –ü–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤:")
        files_list = list(files) if not isinstance(files, list) else files
        for i, file in enumerate(files_list[:5]):
            name = file.get('name', 'Unnamed')
            file_id = file.get('id', 'No ID')
            created = file.get('created_time', 'Unknown date')
            print(f"  {i+1}. {name} (ID: {file_id}, Created: {created})")
    
    # –¢–µ—Å—Ç 2: –§–∞–π–ª—ã –∑–∞ 19 –∞–≤–≥—É—Å—Ç–∞ 2025 (Warsaw timezone)
    print("\nüìÖ –¢–µ—Å—Ç 2: –§–∞–π–ª—ã –∑–∞ 19 –∞–≤–≥—É—Å—Ç–∞ 2025 (Warsaw time)")
    august_19_files = drive.get_files_by_date("2025-08-19")
    print(f"–§–∞–π–ª–æ–≤ –∑–∞ 19.08.2025: {len(august_19_files)}")
    
    for i, file in enumerate(august_19_files):
        print(f"  {i+1}. {file.get('name')} (ID: {file.get('id')})")
    
    # –¢–µ—Å—Ç 3: –¢–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã –∑–∞ 19 –∞–≤–≥—É—Å—Ç–∞
    print("\nüìÑ –¢–µ—Å—Ç 3: PDF —Ñ–∞–π–ª—ã –∑–∞ 19 –∞–≤–≥—É—Å—Ç–∞")
    pdf_files = drive.get_pdf_files_by_date("2025-08-19")
    print(f"PDF —Ñ–∞–π–ª–æ–≤: {len(pdf_files)}")
    
    # –¢–µ—Å—Ç 4: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ PDF (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if pdf_files:
        first_pdf = pdf_files[0]
        test_filename = first_pdf.get('name', 'test.pdf')
        test_path = f"data/workdrive_test/{test_filename}"
        print(f"\nüì• –¢–µ—Å—Ç 4: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ '{test_filename}'")
        
        success = drive.download_file(
            file_id=first_pdf.get('id'),
            save_path=test_path,
            original_filename=test_filename
        )
        
        if success:
            print(f"‚úÖ –¢–µ—Å—Ç —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω: {test_path}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ—Å—Ç —Ñ–∞–π–ª–∞")
    
    return len(files) > 0

def test_august_19_processing():
    """–ì–õ–ê–í–ù–´–ô –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞ 19 –∞–≤–≥—É—Å—Ç–∞ 2025"""
    print("üéØ –ì–õ–ê–í–ù–´–ô –¢–ï–°–¢: –§–ê–ô–õ–´ –ó–ê 19 –ê–í–ì–£–°–¢–ê 2025")
    print("=" * 50)
    
    drive = ZohoWorkDriveAPI()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ PDF —Ñ–∞–π–ª—ã –∑–∞ 19 –∞–≤–≥—É—Å—Ç–∞
    pdf_files = drive.get_pdf_files_by_date("2025-08-19")
    
    if not pdf_files:
        print("‚ùå –§–∞–π–ª—ã –∑–∞ 19 –∞–≤–≥—É—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    print(f"üìä –ù–ê–ô–î–ï–ù–û PDF –§–ê–ô–õ–û–í: {len(pdf_files)}")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    for i, file in enumerate(pdf_files, 1):
        name = file.get('name', 'Unnamed')
        file_id = file.get('id', 'No ID')
        created = file.get('created_time', 'Unknown')
        size = file.get('size', 'Unknown size')
        
        print(f"üìÑ {i}. {name}")
        print(f"   ID: {file_id}")
        print(f"   Created: {created}")
        print(f"   Size: {size}")
        print(f"   –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚Üí —Å–æ–∑–¥–∞–Ω Bill –≤ Zoho Books")
        print("-" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    download_dir = "data/workdrive_august_19"
    os.makedirs(download_dir, exist_ok=True)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    print(f"\nüì• –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í –ü–ê–ü–ö–£: {download_dir}")
    downloaded = 0
    
    for file in pdf_files:
        filename = file.get('name', f"file_{file.get('id')}.pdf")
        file_path = os.path.join(download_dir, filename)
        
        if drive.download_file(file.get('id'), file_path, filename):
            downloaded += 1
    
    print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ: {downloaded}/{len(pdf_files)} —Ñ–∞–π–ª–æ–≤")
    print(f"üìÅ –ü–∞–ø–∫–∞: {download_dir}")
    
    return downloaded > 0

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è 19 –∞–≤–≥—É—Å—Ç–∞
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø WORKDRIVE API")
    print("üéØ –¶–µ–ª—å: –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –∑–∞ 19 –∞–≤–≥—É—Å—Ç–∞ 2025 –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print()
    
    # –°–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞
    basic_success = test_workdrive_access()
    
    if basic_success:
        print("\n" + "="*60)
        # –ó–∞—Ç–µ–º –≥–ª–∞–≤–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è 19 –∞–≤–≥—É—Å—Ç–∞
        august_success = test_august_19_processing()
        
        if august_success:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–´!")
            print("‚úÖ WorkDrive API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("‚úÖ –§–∞–π–ª—ã –∑–∞ 19 –∞–≤–≥—É—Å—Ç–∞ –Ω–∞–π–¥–µ–Ω—ã –∏ —Å–∫–∞—á–∞–Ω—ã") 
            print("üöÄ –ì–æ—Ç–æ–≤–æ –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ batch processor!")
        else:
            print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∑–∞ 19 –∞–≤–≥—É—Å—Ç–∞")
    else:
        print("\n‚ùå –ë–ê–ó–û–í–´–ô –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ WorkDrive —Ç–æ–∫–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
