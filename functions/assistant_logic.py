def ensure_document_type_field(data: dict, ocr_text: str = "") -> dict:
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è document_type –≤ JSON. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    """
    if "document_type" not in data or not data["document_type"]:
        doc_type = guess_document_type(data, ocr_text)
        data["document_type"] = doc_type
        print(f"‚ö†Ô∏è WARNING: –ù–µ –Ω–∞–π–¥–µ–Ω document_type! –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∫: {doc_type}")
    return data

def log_doc_type_and_number(data: dict, ocr_text: str = ""):
    doc_type = data.get("document_type", "").strip().lower()
    bill_no = data.get("bill_number") or data.get("proforma_number") or ""
    if not doc_type or doc_type == "unknown":
        doc_type = guess_document_type(data, ocr_text)
        data["document_type"] = doc_type
        if doc_type == "unknown":
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞! OCR (—Ñ—Ä–∞–≥–º–µ–Ω—Ç): {ocr_text[:300]}")
            return False
    print(f"üìù –û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}, –Ω–æ–º–µ—Ä: {bill_no}")
    return True

# --- –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –Ω–∞—à–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π (OUR_COMPANIES) ---
OUR_COMPANIES = [
    {
        "name": "TaVie Europe O√ú",
        "vat": "EE102288270",
        "address": "Harju maakond, Tallinn, Kesklinna lin–Ω–∞–æ—Å–∞, Pirita tee 26f-11, 12011",
        "country": "–≠—Å—Ç–æ–Ω–∏—è",
    },
    {
        "name": "Parkentertainment Sp. z o.o.",
        "vat": "PL5272956146",
        "address": "UL. KROCHMALNA 54 /U6, 00-864, Warszawa",
        "country": "–ü–æ–ª—å—à–∞",
    },
    # --- –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏–π ---
    {
        "name": "TaVie Europe OU",
        "vat": "EE102288270",
        "address": "",
        "country": "",
    },
]

def guess_document_type(data: dict, ocr_text: str) -> str:
    ocr = ocr_text.lower()
    ocr_top = ocr_text[:300].lower()

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Å–ª–æ–≤–∞–º –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ OCR
    if any(word in ocr_top for word in ["proforma"]):
        return "Proforma"
    if any(word in ocr_top for word in ["credit note", "gutschrift"]):
        return "Credit Note"
    if any(word in ocr_top for word in ["invoice", "rechnung", "facture", "fattura", "factura", "faktura", "—Å—á–µ—Ç", "bill", "retainer"]):
        # –ï—Å–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –µ—Å—Ç—å –∏ invoice –∏ proforma –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏, –æ—Ç–¥–∞—ë–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç proforma
        if "proforma" in ocr_top:
            return "Proforma"
        return "Invoice"

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏, –∏—â–µ–º –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É
    has_proforma = "proforma" in ocr
    has_invoice = any(word in ocr for word in ["invoice", "rechnung", "facture", "fattura", "factura", "faktura", "—Å—á–µ—Ç", "bill", "retainer"])
    has_credit_note = "credit note" in ocr or "gutschrift" in ocr

    if has_proforma and has_invoice:
        return "Proforma"
    if has_proforma:
        return "Proforma"
    if has_invoice:
        return "Invoice"
    if has_credit_note:
        return "Credit Note"

    return "unknown"

def update_country_by_address(data: dict) -> None:
    supplier = data.get("supplier", {})
    if isinstance(supplier, dict):
        address = supplier.get("address", "").lower()
        country = supplier.get("country", "").lower()
        if "berlin" in address or "deutschland" in address:
            supplier["country"] = "Germany"
        elif "warszawa" in address or "polska" in address:
            supplier["country"] = "Poland"
        elif "tallinn" in address or "eesti" in address:
            supplier["country"] = "Estonia"
        else:
            supplier["country"] = supplier.get("country", "")
        data["supplier"] = supplier

def normalize_currency(value: str) -> str:
    if not value:
        return ""
    if "‚Ç¨" in value:
        return "EUR"
    if "$" in value:
        return "USD"
    return value

def normalize_currencies(data: dict) -> None:
    # Normalize currency at root level
    if "currency" in data:
        data["currency"] = normalize_currency(data.get("currency", ""))
    # Normalize supplier country and currency if present
    supplier = data.get("supplier", {})
    if isinstance(supplier, dict):
        if "country" in supplier:
            country_val = supplier.get("country", "")
            if "‚Ç¨" in country_val:
                supplier["country"] = "EUR"
            elif "$" in country_val:
                supplier["country"] = "USD"
        if "currency" in supplier:
            supplier["currency"] = normalize_currency(supplier.get("currency", ""))
        data["supplier"] = supplier

def is_our_supplier(supplier: dict) -> bool:
    if not supplier or not isinstance(supplier, dict):
        return False
    supplier_name = (supplier.get("name") or "").lower().strip()
    supplier_vat = (supplier.get("vat") or "").replace(" ", "")
    for our in OUR_COMPANIES:
        if supplier_name == our["name"].lower().strip() or supplier_vat == our["vat"]:
            return True
    return False

def should_skip_invoice(data: dict) -> bool:
    """
    –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ supplier ‚Äî –Ω–∞—à–∞ —Ñ–∏—Ä–º–∞ (–∏—Å—Ö–æ–¥—è—â–∏–π —Å—á–µ—Ç).
    """
    supplier = data.get("supplier", {})
    return is_our_supplier(supplier)

def fix_supplier_and_our_company(data: dict, ocr_text: str = "") -> None:
    supplier = data.get("supplier", {})
    supplier_name = supplier.get("name", "") if isinstance(supplier, dict) else ""
    supplier_vat = supplier.get("vat", "") if isinstance(supplier, dict) else ""
    our_company = data.get("our_company", "")

    # –ï—Å–ª–∏ supplier ‚Äî —ç—Ç–æ –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –∏—Å—Ö–æ–¥—è—â–∏–π —Å—á–µ—Ç, our_company –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º
    if should_skip_invoice(data):
        data["our_company"] = ""
        return

    # –ï—Å–ª–∏ our_company –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å—Ç–∞–≤—â–∏–∫), –∏—â–µ–º –Ω–∞—à—É —Ñ–∏—Ä–º—É –ø–æ OCR
    ocr_l = ocr_text.lower()
    found = None
    for our in OUR_COMPANIES:
        if our["name"].lower() in ocr_l or our["vat"].lower() in ocr_l:
            found = our["name"]
            break
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–≤–æ—é –∫–æ–º–ø–∞–Ω–∏—é —Å—Ä–µ–¥–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º
    if found:
        data["our_company"] = found
    else:
        # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤–∞—è –∏–∑ —Å–ø–∏—Å–∫–∞ (–∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç)
        data["our_company"] = OUR_COMPANIES[0]["name"]

import json
from datetime import datetime
import re
def extract_vin_from_item_details(item_details: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç VIN (17 —Å–∏–º–≤–æ–ª–æ–≤) –∏–∑ item_details, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
    """
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    if isinstance(item_details, list):
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫, –æ–±—ä–µ–¥–∏–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
        item_details = " ".join(str(item) for item in item_details)
    elif not isinstance(item_details, str):
        # –ï—Å–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        item_details = str(item_details) if item_details is not None else ""
    
    if not item_details:
        return ""
    match = re.search(r'\b([A-HJ-NPR-Z0-9]{17})\b', item_details.replace(" ", ""))
    if match:
        return match.group(1)
    return ""


SYSTEM_PROMPT = """
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (Proforma/Invoice) –¥–ª—è Zoho Books. –ù–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç PDF (OCR).

1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (Invoice, Proforma, Credit Note –∏ —Ç.–¥.) –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏–ª–∏ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–æ–≤–∞ 'Rechnung', 'Invoice', 'Proforma Invoice' –∏ —Ç.–¥.).
2. –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–π –ø–æ–ª–µ "document_type" –≤ JSON —Å –æ–¥–Ω–∏–º –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π: "Invoice", "Proforma", "Credit Note" –∏ —Ç.–¥.
3. –ò–∑–≤–ª–µ–∫–∞–π –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –ø–æ —Ç–µ–∫—Å—Ç—É.
4. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON (—Å–º. –Ω–∏–∂–µ), –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –≤–µ—Ä–Ω–∏ "", –¥–ª—è —á–∏—Å–ª–∞ –∏–ª–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî null.

–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–ª—è –ø–æ–ª—è "item_details" –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü—Ä–∏–º–µ—Ä—ã:
    - –î–ª—è —É—Å–ª—É–≥: "Automobili≈≥ perve≈æimo paslauga", "Car transportation service", "–†–µ–º–æ–Ω—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è"
    - –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: "Mercedes Benz G63 AMG" –∏–ª–∏ VIN –Ω–æ–º–µ—Ä
- –ï—Å–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –µ—Å—Ç—å VIN (17 —Å–∏–º–≤–æ–ª–æ–≤, –ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã) –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª—è "vin" –∏ "car_model".
- –ü–æ–ª–µ "car_item_name" —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π –∫–∞–∫ "{car_model}_{5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ñ—Ä VIN}".
- –î–ª—è –ø–æ–ª—è "total_amount" ‚Äî –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∏—Å–ø–æ–ª—å–∑—É–π –ü–û–õ–ù–£–Æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ –≤—ã—á–µ—Ç–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç, –∞ –Ω–µ –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∫ –¥–æ–ø–ª–∞—Ç–µ. –ò—â–∏ "Total", "Amount", "Gesamtbetrag" –ø–µ—Ä–µ–¥ –≤—ã—á–µ—Ç–∞–º–∏.
- –î–ª—è –ø–æ–ª—è "account" ‚Äî –ù–ò–ö–û–ì–î–ê –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (IBAN, SWIFT, BIC, –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞, –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏ —Ç.–¥.), –∞ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∏–ª–∏ –ø–æ —Ç–µ–∫—Å—Ç—É —É—Å–ª—É–≥–∏.
- –ï—Å–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –ª–∏—Ü–æ–º (–æ–±—ã—á–Ω–æ –ø–µ—Ä–µ–¥ —Å—Ç—Ä–æ–∫–æ–π —Å VAT/EIN/NIP), supplier –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–∏–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –ª–∏—Ü–æ–º, –∞ –Ω–µ –±—Ä–µ–Ω–¥–æ–º/–ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π. –ë—Ä–µ–Ω–¥/–ø–ª–∞—Ç—Ñ–æ—Ä–º—É –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'brand' –∏–ª–∏ 'service_name'), –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
- –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –µ—Å—Ç—å 'Anysphere, Inc.' –ø–µ—Ä–µ–¥ 'US EIN 87-4436547', supplier = 'Anysphere, Inc.', supplier.vat = '87-4436547'.

–ü—Ä–∏–º–µ—Ä –¥–ª—è Invoice:
{"document_type": "Invoice", "bill_number": "", "supplier": {"name": "", "vat": "", "address": "", "country": ""}, "date": "", "currency": "", "total_amount": null, "item_details": "", "account": "", "our_company": ""}

–ü—Ä–∏–º–µ—Ä –¥–ª—è Proforma:
{"document_type": "Proforma", "vin": "", "cost_price": null, "supplier": {"name": "", "vat": "", "address": "", "phone": "", "country": ""}, "car_model": "", "car_item_name": "", "is_valid_for_us": null, "our_company": "", "tax_rate": "", "currency": "", "payment_terms": ""}

–í–°–ï–ì–î–ê –≤—ã–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ –ø–æ–ª–µ. –ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–µ–∫—Å—Ç–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ JSON!
"""


DESCRIPTION_TO_ACCOUNT = {
    "accounting": "Accounting fees",
    "transport": "Transportation services",
    "shipping": "Transportation services",
    "perve≈æimo": "Transportation services",
    "delivery": "Transportation services",
    "–¥–æ—Å—Ç–∞–≤–∫–∞": "Transportation services",
    "–ø–µ—Ä–µ–≤–æ–∑–∫–∞": "Transportation services",
    "przew√≥z": "Transportation services",
    "dostawa": "Transportation services",
    "consulting": "Consultant Expense",
    "internet": "IT and Internet Expenses",
    "software": "IT and Internet Expenses",
    "rent": "Rent Expense",
    "commission": "Consultant Expense",
    "service": "Other Expenses",
    "plan": "Accounting fees",
    "entertainment": "Meals and Entertainment",
    "advertising": "Advertising And Marketing",
    "stationery": "Printing and Stationery",
    "cleaning": "Janitorial Expense",
    "maintenance": "Repairs and Maintenance",
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    "ferrari": "Vehicle Purchase",
    "mercedes": "Vehicle Purchase", 
    "bmw": "Vehicle Purchase",
    "audi": "Vehicle Purchase",
    "porsche": "Vehicle Purchase",
    "lamborghini": "Vehicle Purchase",
    "bentley": "Vehicle Purchase",
    "rolls royce": "Vehicle Purchase",
    "maserati": "Vehicle Purchase",
    "aston martin": "Vehicle Purchase",
    "car": "Vehicle Purchase",
    "vehicle": "Vehicle Purchase",
    "automobile": "Vehicle Purchase",
    "coupe": "Vehicle Purchase",
    "sedan": "Vehicle Purchase",
    "suv": "Vehicle Purchase",
    "cabriolet": "Vehicle Purchase",
    "convertible": "Vehicle Purchase",
}

def force_clean_item_details_and_account(data):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç car_item_name = "{car_model}_{5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ñ—Ä VIN}" —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    –î–ª—è account –∑–∞–ø—Ä–µ—â–∞–µ—Ç IBAN, SWIFT, –±–∞–Ω–∫ –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É.
    –ù–ï –∏–∑–º–µ–Ω—è–µ—Ç item_details - –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ –∫–∞–∫ –µ—Å—Ç—å.
    """
    # --- car_item_name —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å VIN –∏ car_model ---
    vin = data.get("vin", "")
    car_model = data.get("car_model", "")
    if vin and car_model:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¶–ò–§–† –∏–∑ VIN
        last_5_digits = re.sub(r'[^0-9]', '', vin)[-5:] if re.sub(r'[^0-9]', '', vin) else ""
        if last_5_digits and len(last_5_digits) == 5:
            data["car_item_name"] = f"{car_model}_{last_5_digits}"

    # --- account ---
    account = data.get("account", "")
    forbidden_words = ["iban", "swift", "bic", "bank", "konto", "—Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç", "acc.", "acc:", "–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞"]
    if any(word in account.lower() for word in forbidden_words):
        data["account"] = detect_account(data.get("item_details", ""))

def detect_account(item_details: str) -> str:
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    if isinstance(item_details, list):
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫, –æ–±—ä–µ–¥–∏–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
        item_details = " ".join(str(item) for item in item_details)
    elif not isinstance(item_details, str):
        # –ï—Å–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        item_details = str(item_details) if item_details is not None else ""
    
    item_lower = item_details.lower()
    # –î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ –¥–ª—è consulting/consultant
    if "consulting" in item_lower or "consultant" in item_lower:
        return "Consultant Expense"
    for keyword, account in DESCRIPTION_TO_ACCOUNT.items():
        if keyword in item_lower:
            return account
    return "Other Expenses"

def process_invoice_json(data: dict, existing_bills: list[tuple[str, str]], ocr_text: str = "") -> dict:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON –∏–∑ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è Invoice (—É—Å–ª—É–≥–∏ –∏ –ø—Ä–æ—á–µ–µ):
    - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã bill_number
    - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç account –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é
    - –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏–µ —Å—á–µ—Ç–∞
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏—Ö —Å—á–µ—Ç–æ–≤; –∏—Å—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è
    """
    data = ensure_document_type_field(data, ocr_text)
    if not log_doc_type_and_number(data, ocr_text):
        return {"skip_processing": True}
    if data.get("document_type", "").lower() == "unknown":
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return {"skip_processing": True}
    fix_supplier_and_our_company(data, ocr_text)
    update_country_by_address(data)
    normalize_currencies(data)
    # --- –ì–∞—Ä–∞–Ω—Ç–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è VIN –∏ car_item_name –¥–ª—è –∏–Ω–≤–æ–π—Å–æ–≤ –ø–æ –∞–≤—Ç–æ ---
    if not data.get("vin"):
        data["vin"] = extract_vin_from_item_details(data.get("item_details", ""))
    if not data.get("car_item_name") and data.get("car_model") and data.get("vin"):
        vin = data["vin"]
        last5 = vin[-5:] if len(vin) >= 5 else vin
        data["car_item_name"] = f"{data['car_model']}_{last5}"
    if should_skip_invoice(data):
        print("üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏—Å—Ö–æ–¥—è—â–∏–π —Å—á–µ—Ç ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return {"skip_processing": True}
    bill_no = data.get("bill_number")
    supplier_name = data.get("supplier", {}).get("name", "")
    if bill_no is not None and any(
        b[0] == bill_no and supplier_name != b[1]
        for b in existing_bills
    ):
        data["bill_number"] = f"{bill_no} (the same)"
    item_details = data.get("item_details", "")
    data["account"] = detect_account(item_details)
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è document_type —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    if "document_type" not in data or not data["document_type"]:
        data["document_type"] = guess_document_type(data, ocr_text)
    force_clean_item_details_and_account(data)
    return data

def process_proforma_json(data: dict, ocr_text: str = "") -> dict:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON –∏–∑ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è Proforma (–º–∞—à–∏–Ω—ã):
    - —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç car_item_name
    - –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç is_valid_for_us = True
    - –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏–µ —Å—á–µ—Ç–∞
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ñ–æ—Ä–º; –∏—Å—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è
    """
    data = ensure_document_type_field(data, ocr_text)
    if not log_doc_type_and_number(data, ocr_text):
        return {"skip_processing": True}
    if data.get("document_type", "").lower() == "unknown":
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return {"skip_processing": True}
    fix_supplier_and_our_company(data, ocr_text)
    update_country_by_address(data)
    normalize_currencies(data)
    if should_skip_invoice(data):
        print("üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏—Å—Ö–æ–¥—è—â–∏–π —Å—á–µ—Ç ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return {"skip_processing": True}
    model = data.get("car_model", "")
    vin = data.get("vin", "")
    last5 = vin[-5:] if len(vin) >= 5 else vin
    data["car_item_name"] = f"{model}_{last5}"
    data["is_valid_for_us"] = True
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è document_type —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    if "document_type" not in data or not data["document_type"]:
        data["document_type"] = guess_document_type(data, ocr_text)
    force_clean_item_details_and_account(data)
    return data

def is_outgoing_invoice(data: dict) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ invoice/–ø—Ä–æ—Ñ–æ—Ä–º–∞ –∏—Å—Ö–æ–¥—è—â–∏–π ‚Äî supplier —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–¥–Ω–æ–π –∏–∑ –Ω–∞—à–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π.
    """
    supplier = data.get("supplier", {})
    return is_our_supplier(supplier)

def is_auto_proforma(data: dict) -> bool:
    """
    True –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Ñ–æ—Ä–º–∞ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é (VIN –∏ car_model –Ω–µ –ø—É—Å—Ç—ã–µ).
    """
    return bool(data.get("vin")) and bool(data.get("car_model"))

def zoho_create_quote(data: dict, ocr_text: str = ""):
    """
    –°–æ–∑–¥–∞—ë–º quote –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Ñ–æ—Ä–º–∞ –ø–æ –∞–≤—Ç–æ (document_type == Proforma –∏ –µ—Å—Ç—å vin –∏ car_model).
    –î–ª—è Invoice –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ‚Äî –Ω–µ —Å–æ–∑–¥–∞—ë–º quote!
    """
    doc_type = data.get("document_type", "").strip().lower()
    vin = data.get("vin", "")
    car_model = data.get("car_model", "")
    bill_no = data.get("bill_number") or data.get("proforma_number") or ""
    if doc_type == "unknown":
        print(f"‚ùå –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω! Quote –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è. OCR (—Ñ—Ä–∞–≥–º–µ–Ω—Ç): {ocr_text[:300]}")
        print("‚ùå Quote –Ω–µ —Å–æ–∑–¥–∞–Ω, —Ç–∞–∫ –∫–∞–∫ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
        return False
    if doc_type != "proforma":
        print(f"‚ùå Quote –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{doc_type}' –Ω–µ 'proforma'.")
        return False
    if not vin or not car_model:
        print("‚ùå Quote –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç VIN –∏–ª–∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")
        return False
    print(f"[ZOHO] üöó –ë—ã–ª –±—ã —Å–æ–∑–¥–∞–Ω quote –ø–æ —Ç–∏–ø—É –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}, VIN: {vin}, –ú–æ–¥–µ–ª—å: {car_model}, –ù–æ–º–µ—Ä: {bill_no}")
    return True