#!/usr/bin/env python3
"""
Smart Document Processor
========================

–£–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
"""

import sys
import json
import asyncio
import shutil
from typing import Dict, List, Any, Optional, Union
from pathlib import Path
from dataclasses import dataclass, field
from datetime import datetime
import re

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

# Optional import of service analyzer to avoid runtime errors when module is absent
try:
    from functions.ai_invoice_analyzer_enhanced import (
        enhanced_car_document_analysis,
        enhanced_service_document_analysis,
    )
    _HAS_SERVICE_ANALYZER = True
except Exception:  # ImportError or attribute error
    from functions.ai_invoice_analyzer_enhanced import enhanced_car_document_analysis
    _HAS_SERVICE_ANALYZER = False
from functions.agent_invoice_parser import extract_text_from_pdf
from src.domain.services.contact_cache import OptimizedContactCache

# –î–æ–±–∞–≤–ª—è–µ–º Pydantic –º–æ–¥–µ–ª–∏
from pydantic import BaseModel, Field, validator
from enum import Enum

class DocumentCategory(str, Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    CARS = "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏"
    FLOWERS = "üå∏ –¶–≤–µ—Ç—ã" 
    UTILITIES = "üíß –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏"
    SERVICES = "üõ†Ô∏è –£—Å–ª—É–≥–∏"
    FOOD = "üçé –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è"
    OTHER = "üì¶ –ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã"

class VATStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã VAT"""
    MATCH = "match"
    MISMATCH = "mismatch"
    MISSING_IN_CACHE = "missing_in_cache"
    MISSING_IN_DOCUMENT = "missing_in_document"
    BOTH_MISSING = "both_missing"
    NAME_MISMATCH = "name_mismatch"
    UNKNOWN = "unknown"

class ContactSearchResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    found_in_cache: bool = False
    found_in_zoho: bool = False
    contact_data: Optional[Dict[str, Any]] = None
    cache_updated: bool = False
    search_method: str = "none"  # cache, zoho_api, not_found
    
class SupplierAnalysis(BaseModel):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    name: str = Field(..., min_length=1, description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
    vat_number: Optional[str] = Field(None, description="VAT –Ω–æ–º–µ—Ä")
    email: Optional[str] = Field(None, description="Email")
    phone: Optional[str] = Field(None, description="–¢–µ–ª–µ—Ñ–æ–Ω")
    address: Optional[str] = Field(None, description="–ê–¥—Ä–µ—Å")
    country: Optional[str] = Field(None, description="–°—Ç—Ä–∞–Ω–∞")
    
    @validator('vat_number')
    def validate_vat(cls, v):
        if v and len(v.strip()) < 3:
            raise ValueError('VAT –Ω–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π')
        return v.strip() if v else None


@dataclass
class ContactComparison:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    supplier_name: str
    exists_in_cache: bool
    cached_contact: Optional[Dict[str, Any]] = None
    document_data: Optional[Dict[str, Any]] = None
    differences: Optional[List[Dict[str, str]]] = None
    confidence_match: float = 0.0
    recommended_action: str = "unknown"  # create, update, use_existing, update_vat_in_zoho, resolve_vat_conflict, resolve_name_conflict
    vat_status: str = "unknown"  # match, mismatch, missing_in_cache, missing_in_document, both_missing, name_mismatch

    def __post_init__(self):
        if self.differences is None:
            self.differences = []


@dataclass
class SKUCheckResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ SKU"""
    vin: str
    exists_in_sku_cache: bool
    car_name: str = ""
    recommended_action: str = "unknown"  # create_item, update_item, not_car
    message: str = ""


@dataclass
class ProcessingResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    success: bool
    document_analysis: Dict[str, Any]
    contact_comparison: ContactComparison
    sku_check: Optional[SKUCheckResult] = None
    suggested_actions: Optional[List[str]] = None
    errors: Optional[List[str]] = None

    def __post_init__(self):
        if self.suggested_actions is None:
            self.suggested_actions = []
        if self.errors is None:
            self.errors = []


class SmartDocumentProcessor:
    """–£–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""

    def __init__(self):
        self.cache_file = "data/optimized_cache/all_contacts_optimized.json"
        self.full_contacts_dir = Path("data/full_contacts")
        self.cached_contacts = self._load_cached_contacts()

    def _load_cached_contacts(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
        try:
            if Path(self.cache_file).exists():
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {"contacts": {}, "vat_index": {}, "company_index": {}}
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
            return {"contacts": {}, "vat_index": {}, "company_index": {}}

    async def process_document(self, file_path: str) -> ProcessingResult:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞

        Args:
            file_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        result = ProcessingResult(
            success=False,
            document_analysis={},
            contact_comparison=ContactComparison(supplier_name="Unknown", exists_in_cache=False),
            suggested_actions=[],
            errors=[]
        )

        try:
            print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {file_path}")

            # –®–∞–≥ 1: –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
            extracted_text = extract_text_from_pdf(file_path)
            if not extracted_text:
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF"
                if result.errors is None:
                    result.errors = []
                result.errors.append(error_msg)
                return result

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ _compare_supplier_with_cache
            self._last_extracted_text = extracted_text

            # –®–∞–≥ 2: AI –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑...")

            # –ü–æ–ø—ã—Ç–∫–∞ 1: –Ω–æ–≤—ã–π LLM-—ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä (–ø—Ä—è–º–æ–π JSON)
            try:
                from functions.llm_document_extractor import (
                    llm_extract_fields,
                    llm_analyze_contract_risks,
                    llm_generate_car_description_en,
                )
            except Exception:
                llm_extract_fields = None  # type: ignore
                llm_analyze_contract_risks = None  # type: ignore
                llm_generate_car_description_en = None  # type: ignore

            analysis = None
            llm_data = {}
            if callable(llm_extract_fields):
                try:
                    llm_data = llm_extract_fields(extracted_text) or {}
                except Exception:
                    llm_data = {}

            print(f"üîç DEBUG: LLM data status: {bool(llm_data)}, keys: {list(llm_data.keys()) if llm_data else 'None'}")
            if llm_data:
                # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π LLM ‚Üí analysis
                analysis = {
                    'ai_enhanced': True,
                    'supplier_name': llm_data.get('supplier_name') or '',
                    'supplier_vat': llm_data.get('vat') or '',
                    'supplier_email': llm_data.get('supplier_email') or '',
                    'supplier_phone': llm_data.get('supplier_phone') or '',
                    'supplier_country': llm_data.get('supplier_country') or '',
                    # supplier_address –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ + —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è
                    'supplier_address': llm_data.get('supplier_address') or '',
                    'supplier_street': llm_data.get('supplier_street') or '',
                    'supplier_city': llm_data.get('supplier_city') or '',
                    'supplier_zip_code': llm_data.get('supplier_zip_code') or '',
                    'bill_number': llm_data.get('bill_number') or '',
                    'document_date': llm_data.get('issue_date') or llm_data.get('date') or '',
                    'due_date': llm_data.get('due_date') or (llm_data.get('bank') or {}).get('payment_due_date') or '',
                    # –í—Å–µ–≥–¥–∞ —Ç—Ä–∞–∫—Ç—É–µ–º total_amount –∫–∞–∫ NET (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ net_amount ‚Äî –±–µ—Ä–µ–º –µ–≥–æ)
                    'total_amount': llm_data.get('net_amount') if (llm_data.get('net_amount') is not None) else llm_data.get('total_amount'),
                    'currency': llm_data.get('currency') or '',
                    'tax_rate': llm_data.get('tax_rate'),
                    'net_amount': llm_data.get('net_amount'),
                    'vat_amount': llm_data.get('vat_amount'),
                    'gross_amount': llm_data.get('gross_amount'),
                    'notes': llm_data.get('notes') or '',
                    'vin': llm_data.get('vin') or '',
                    'car_brand': llm_data.get('car_brand') or '',
                    'car_model': llm_data.get('car_model') or '',
                    'is_car_related': True if (llm_data.get('vin') or llm_data.get('car_brand') or llm_data.get('car_model')) else False,
                    'item_description': llm_data.get('item_description') or '',
                    'service_description': llm_data.get('service_description') or '',
                    'product_category': llm_data.get('product_category') or '',
                    'detected_flower_names': llm_data.get('detected_flower_names') or [],
                    'bank_name': (llm_data.get('bank') or {}).get('bank_name') or '',
                    'bank_address': (llm_data.get('bank') or {}).get('bank_address') or '',
                    'bank_account': (llm_data.get('bank') or {}).get('bank_account') or '',
                    'iban': (llm_data.get('bank') or {}).get('iban') or '',
                    'swift_bic': (llm_data.get('bank') or {}).get('swift') or '',
                    'payment_method': (llm_data.get('bank') or {}).get('payment_method') or '',
                    'issuer_name': llm_data.get('issuer_name') or llm_data.get('seller_name') or '',
                    'issuer_vat': llm_data.get('issuer_vat') or llm_data.get('seller_vat') or '',
                    'issuer_contact_person': llm_data.get('issuer_contact_person') or '',
                    # LLM –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Ü–≤–µ—Ç—ã –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                    'product_category': llm_data.get('product_category') or '',
                    'detected_flower_names': llm_data.get('detected_flower_names') or [],
                }

                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º issuer_contact_person, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    icp = (analysis.get('issuer_contact_person') or '').strip()
                    if icp and icp.lower() != 'pavel kaliadka':
                        analysis['contact_person'] = icp
                except Exception:
                    pass

                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º issuer, –µ—Å–ª–∏ –ø–æ –æ—à–∏–±–∫–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –Ω–∞—à–µ–π —Ñ–∏—Ä–º–æ–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º supplier
                try:
                    issuer_name = (analysis.get('issuer_name') or '').strip().lower()
                    issuer_vat = (analysis.get('issuer_vat') or '').upper().replace(' ', '')
                    our_markers = ['tavie europe', 'parkentertainment', 'ee102288270', 'pl5272956146']
                    if any(m in issuer_name for m in our_markers) or any(v in issuer_vat for v in ['EE102288270', 'PL5272956146']):
                        analysis['issuer_name'] = analysis.get('supplier_name') or analysis.get('issuer_name')
                        analysis['issuer_vat'] = analysis.get('supplier_vat') or analysis.get('issuer_vat')
                except Exception:
                    pass

                # –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
                doc_type_raw = (llm_data.get('document_type') or '').lower()
                doc_map = {
                    'contract_sale': '–î–æ–≥–æ–≤–æ—Ä –ø—Ä–æ–¥–∞–∂–∏',
                    'proforma_invoice': '–ü—Ä–æ—Ñ–æ—Ä–º–∞',
                    'invoice': '–ò–Ω–≤–æ–π—Å',
                    'service_invoice': '–ò–Ω–≤–æ–π—Å (—É—Å–ª—É–≥–∏)'
                }
                analysis['document_type'] = doc_type_raw
                analysis['document_type_readable'] = doc_map.get(doc_type_raw, '–î–æ–∫—É–º–µ–Ω—Ç')

                # car_item_name –ø–æ –ø—Ä–∞–≤–∏–ª—É: Brand Model + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ü–∏—Ñ—Ä VIN
                try:
                    import re as _re
                    vin = str(analysis.get('vin') or '')
                    last5 = _re.sub(r'[^0-9]', '', vin)[-5:] if vin else ''
                    if last5 and (analysis.get('car_brand') or analysis.get('car_model')):
                        name_parts = [p for p in [analysis.get('car_brand'), analysis.get('car_model')] if p]
                        analysis['car_item_name'] = f"{' '.join(name_parts)}_{last5}"
                except Exception:
                    pass

                # –ï—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ –∏ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ EN –æ–ø–∏—Å–∞–Ω–∏–µ —Å VIN
                try:
                    if analysis.get('is_car_related') and not (analysis.get('item_description') or '').strip():
                        if callable(llm_generate_car_description_en):
                            desc = llm_generate_car_description_en(
                                extracted_text,
                                analysis.get('car_brand') or '',
                                analysis.get('car_model') or '',
                                analysis.get('vin') or '',
                            )
                            if desc:
                                analysis['item_description'] = desc
                except Exception:
                    pass

                # –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç/–ø—Ä–æ–¥–∞–∂–∞ ‚Äî –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
                if callable(llm_analyze_contract_risks) and ('contract' in doc_type_raw or 'sale' in doc_type_raw or 'proforma' in doc_type_raw):
                    try:
                        risks = llm_analyze_contract_risks(extracted_text) or {}
                        if risks:
                            analysis['contract_risks'] = risks
                    except Exception:
                        pass
            else:
                # –ü–æ–ø—ã—Ç–∫–∞ 2: —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ (service/car)
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
                print("üîç DEBUG: LLM data –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É")
                document_text_lower = extracted_text.lower()
                service_keywords = ['delivery', 'transport', 'shipping', 'carriage', 'cmr', 'freight', 'logistics']
                is_service_document = any(keyword in document_text_lower for keyword in service_keywords)
                print(f"üîç DEBUG: is_service_document={is_service_document}, keywords={service_keywords}")

                if is_service_document and _HAS_SERVICE_ANALYZER:
                    print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ª—É–≥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º service analyzer")
                    analysis = await enhanced_service_document_analysis(extracted_text)
                    # –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥–∏ –∏ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞
                    if analysis and analysis.get('ai_enhanced'):
                        doc_type_map = {
                            'transport': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
                            'delivery': '–î–æ—Å—Ç–∞–≤–∫–∞',
                            'logistics': '–õ–æ–≥–∏—Å—Ç–∏–∫–∞',
                            'service': '–£—Å–ª—É–≥–∏',
                        }
                        readable = doc_type_map.get(str(analysis.get('document_type')).lower(), '–£—Å–ª—É–≥–∏')
                        if analysis.get('is_final_invoice'):
                            analysis['document_type_readable'] = '–ò–Ω–≤–æ–π—Å'
                        else:
                            analysis['document_type_readable'] = readable

                        service_desc = None
                        services = analysis.get('services') or []
                        if services:
                            first = services[0]
                            if isinstance(first, dict):
                                service_desc = first.get('description')
                            elif isinstance(first, str):
                                service_desc = first
                        if not service_desc:
                            vin = analysis.get('vin') or ''
                            car = analysis.get('car_model') or analysis.get('item_details') or ''
                            if 'transport' in str(analysis.get('document_type')).lower():
                                if vin:
                                    service_desc = f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ VIN {vin}"
                                elif car:
                                    service_desc = f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ {car}"
                                else:
                                    service_desc = "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏"
                            else:
                                service_desc = readable
                        analysis['service_description'] = service_desc
                else:
                    if is_service_document and not _HAS_SERVICE_ANALYZER:
                        print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ª—É–≥, –Ω–æ service analyzer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º car analyzer")
                    else:
                        print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º car analyzer")
                    analysis = await enhanced_car_document_analysis(extracted_text)

            if not analysis or not analysis.get("ai_enhanced"):
                error_msg = "AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è"
                if result.errors is None:
                    result.errors = []
                result.errors.append(error_msg)
                return result

            # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º extracted_text –≤ analysis –¥–ª—è –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            analysis['extracted_text'] = extracted_text

            # –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ AI –¥–∞–ª –Ω–µ–ø–æ–ª–Ω—ã–π/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
            def _extract_bill_number_from_text(text: str) -> Optional[str]:
                if not text:
                    return None
                candidates: list[str] = []
                # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤–∏–¥–∞ "TR serija Nr.0189" (–ª–∏—Ç–æ–≤—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
                pattern_lt = re.compile(r"\b([A-Z]{1,5}\s*serija\s*Nr\.?\s*\d{1,8})\b", re.IGNORECASE)
                candidates += [m.group(1) for m in pattern_lt.finditer(text)]
                # –û–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω: –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑ –±—É–∫–≤ + –Ω–æ–º–µ—Ä —Å —Ç–æ—á–∫–∞–º–∏/—Å–ª—ç—à–∞–º–∏
                pattern_generic = re.compile(r"\b([A-Z]{1,5}[\s.-]*\d{1,8}(?:/[\dA-Z]{1,6})?)\b")
                candidates += [m.group(1) for m in pattern_generic.finditer(text)]
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é —Ñ–æ—Ä–º—É
                if candidates:
                    candidates.sort(key=lambda s: len(s), reverse=True)
                    return candidates[0].strip()
                return None

            try:
                ocr_bill = _extract_bill_number_from_text(extracted_text)
                ai_bill = (analysis.get('bill_number') or '').strip()
                # –ü—Ä–∞–≤–∏–ª–æ: –µ—Å–ª–∏ AI –Ω–æ–º–µ—Ä –ø—É—Å—Ç–æ–π –∏–ª–∏ –≤—ã–≥–ª—è–¥–∏—Ç —É—Å–µ—á—ë–Ω–Ω–æ, –∞ OCR –¥–∞–ª —Ñ–æ—Ä–º—É —Å "serija"/"Nr" ‚Äî –±–µ—Ä—ë–º OCR
                def looks_informative(s: str) -> bool:
                    s_low = s.lower()
                    return ('serija' in s_low) or ('nr' in s_low)
                if ocr_bill and (not ai_bill or (looks_informative(ocr_bill) and not looks_informative(ai_bill))):
                    analysis['bill_number'] = ocr_bill
            except Exception:
                pass

            result.document_analysis = analysis

            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å US EIN / TAX ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ analysis –∫–∞–∫ supplier_vat (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ —Å—Ç—Ä–∞–Ω—ã)
            try:
                ein_match = re.search(r"\b(EIN|TAX)\s*[:#]?\s*(\d{2}-\d{7})\b", extracted_text, re.IGNORECASE)
                if ein_match and not analysis.get('supplier_vat'):
                    analysis['supplier_vat'] = ein_match.group(2)
            except Exception:
                pass

            # –ò–∑–≤–ª–µ—á—å –ø–æ–∑–∏—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å—Å–∫–∏—Ö/PLN –∏–Ω–≤–æ–π—Å–æ–≤)
            try:
                currency_hint = (analysis.get('currency') or '').upper()
                is_pln = currency_hint == 'PLN' or ' pln' in extracted_text.lower()
                supplier_country = (analysis.get('supplier_country') or analysis.get('supplier_address', {}).get('country') or '').lower()
                looks_flower = any(kw in extracted_text.lower() for kw in [
                    'kwiat', 'kwiaty', 'r√≥≈ºa', 'roza', 'tulip', 'peonia', 'piwonia', 'go≈∫dzik', 'gerbera', 'bukiet', 'flower', 'flowers'
                ])
                if is_pln or looks_flower:
                    flower_lines = []
                    # –†–µ–≥–µ–∫—Å: –∏–º—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞ –µ–¥–∏–Ω–∏—Ü—ã, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ PLN
                    pattern = re.compile(r"^(?P<name>[A-Za-z√Ä-√ø≈º≈∫ƒá≈Ñ√≥≈ÇƒôƒÖ≈õ≈ª≈πƒÜ≈É√ì≈ÅƒòƒÑ≈ö0-9\-\/\s]{3,}?)\s+(?P<qty>\d{1,4}(?:[.,]\d{1,2})?)\s+(?P<price>\d{1,6}(?:[.,]\d{2}))\s*(?:PLN|zl|z≈Ç)?\b", re.IGNORECASE | re.MULTILINE)
                    for m in pattern.finditer(extracted_text):
                        name = m.group('name').strip()
                        qty = m.group('qty').replace(',', '.')
                        price = m.group('price').replace(',', '.')
                        try:
                            qty_f = float(qty)
                            price_f = float(price)
                        except Exception:
                            continue
                        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Ü–≤–µ—Ç–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                        if not any(k in name.lower() for k in ['kwiat', 'r√≥≈º', 'roza', 'tulip', 'gerber', 'go≈∫dz', 'bukiet', 'flower']):
                            continue
                        flower_lines.append({
                            'name': name,
                            'quantity': qty_f,
                            'unit_price': price_f,
                        })
                    # –û–¢–ö–õ–Æ–ß–ï–ù–û: —Å—Ç–∞—Ä—ã–π regex parser –±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –≤ handlers.py
                    # if flower_lines:
                    #     analysis['flower_lines'] = flower_lines
            except Exception:
                pass

            # –ú–£–õ–¨–¢–ò–Ø–ó–´–ß–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï VAT (–≤ —Ç.—á. –ø–æ–ª—å—Å–∫–∏–π NIP): –µ—Å–ª–∏ VAT –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω
            try:
                def _clean_vat(s: str) -> str:
                    return ''.join(ch for ch in s.upper() if ch.isalnum())

                if not analysis.get('supplier_vat') and extracted_text:
                    # –°–Ω–∞—á–∞–ª–∞ ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å—Å–∫–æ–≥–æ NIP (10 —Ü–∏—Ñ—Ä)
                    nip_match = re.search(r"\bNIP\s*[:#]?\s*(\d{10})\b", extracted_text, re.IGNORECASE)
                    if nip_match:
                        analysis['supplier_vat'] = nip_match.group(1)
                    
                # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç VAT ‚Äî –ø—Ä–æ–±—É–µ–º –æ–±—â–∏–µ —à–∞–±–ª–æ–Ω—ã, –Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (BRUTTO/NETTO/% –∏ —Ç.–¥.)
                if not analysis.get('supplier_vat') and extracted_text:
                    patterns = [
                        r"\bVAT\s*(?:NO\.|NUMBER|NR|REG\.?\s*NO\.|REGISTRATION)?\s*[:#]?\s*([A-Z]{0,2}[\s-]?[A-Z0-9][A-Z0-9\s.-]{4,})\b",
                        r"\bNIP\s*[:#]?\s*([A-Z]{0,2}[\s-]?[0-9][0-9\s.-]{7,})\b",  # –ü–æ–ª—å—à–∞
                        r"\bUSt[- ]?(?:ID|IdNr\.?|Nr\.?|IDNR)\s*[:#]?\s*([A-Z]{0,2}[\s-]?[A-Z0-9][A-Z0-9\s.-]{4,})\b",  # –ì–µ—Ä–º–∞–Ω–∏—è
                        r"\bTVA\s*(?:INTRA)?\s*[:#]?\s*([A-Z]{0,2}[\s-]?[A-Z0-9][A-Z0-9\s.-]{4,})\b",  # –§—Ä–∞–Ω—Ü–∏—è/BE/RO
                        r"\bIVA\s*[:#]?\s*([A-Z]{0,2}[\s-]?[A-Z0-9][A-Z0-9\s.-]{4,})\b",  # –ò—Ç–∞–ª–∏—è/ES/PT
                        r"\bNIF\s*[:#]?\s*([A-Z]{0,2}[\s-]?[A-Z0-9][A-Z0-9\s.-]{4,})\b",  # ES/PT
                        r"\bCIF\s*[:#]?\s*([A-Z]{0,2}[\s-]?[A-Z0-9][A-Z0-9\s.-]{4,})\b",  # ES/RO
                        r"\bI[ƒåC]\s*DPH\s*[:#]?\s*([A-Z]{0,2}[\s-]?[A-Z0-9][A-Z0-9\s.-]{4,})\b",  # CZ/SK Iƒå DPH
                        r"\bDI[ƒåC]\s*[:#]?\s*([A-Z]{0,2}[\s-]?[A-Z0-9][A-Z0-9\s.-]{4,})\b",  # CZ/SK DIƒå
                    ]
                    found = None
                    for p in patterns:
                        m = re.search(p, extracted_text, re.IGNORECASE)
                        if m:
                            raw = m.group(1)
                            candidate = _clean_vat(raw)
                            # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º —è–≤–Ω—ã–µ –ª–æ–∂–Ω—ã–µ: —É–ø–æ–º–∏–Ω–∞–Ω–∏—è BRUTTO/NETTO/% –≤–æ–∫—Ä—É–≥
                            context_slice = extracted_text[max(0, m.start()-10): m.end()+10].upper()
                            if any(bad in context_slice for bad in ['BRUTTO', 'NETTO', '%']):
                                continue
                            # –§–∏–ª—å—Ç—Ä –ø—Ä–æ—Ç–∏–≤ EIN –∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏—Ö
                            if not re.fullmatch(r"\d{2}-\d{7}", raw) and len(candidate) >= 6:
                                found = candidate
                                break
                    if found:
                        analysis['supplier_vat'] = found
            except Exception:
                pass

            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –∫—ç—à–µ
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –∫—ç—à–µ...")
            contact_comparison = await self._compare_supplier_with_cache(analysis)
            result.contact_comparison = contact_comparison

            # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º SKU –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º SKU –∞–≤—Ç–æ–º–æ–±–∏–ª—è...")
            sku_check_result = await self._check_sku_in_cache(analysis)
            result.sku_check = sku_check_result

            # –®–∞–≥ 5: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
            suggested_actions = self._determine_smart_actions(contact_comparison, sku_check_result, analysis)
            result.suggested_actions = suggested_actions or []

            result.success = True

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            await self._save_processed_document(file_path, analysis)

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}"
            print(f"‚ùå {error_msg}")
            if result.errors is None:
                result.errors = []
            result.errors.append(error_msg)

        return result

    async def _compare_supplier_with_cache(self, document_data: Dict[str, Any]) -> ContactComparison:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∫—ç—à–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            supplier_name = (document_data.get('supplier_name') or '').strip()
            supplier_vat = (document_data.get('supplier_vat') or '').strip()
            our_company = (document_data.get('our_company') or '').strip()
            extracted_text = document_data.get('extracted_text', '')

            if not supplier_name:
                return ContactComparison(
                    supplier_name="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫",
                    exists_in_cache=False,
                    differences=[]
                )

            # –ï—Å–ª–∏ our_company –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω AI, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ VAT –Ω–æ–º–µ—Ä–∞–º –≤ —Ç–µ–∫—Å—Ç–µ
            if not our_company and extracted_text:
                print(f"üîç DEBUG: supplier_name={supplier_name}")
                print(f"üîç DEBUG: supplier_vat={supplier_vat}")
                print(f"üîç DEBUG: our_company (from AI)={our_company}")
                print(f"üîç DEBUG: document_text length={len(extracted_text)}")

                # –ò—â–µ–º VAT –Ω–æ–º–µ—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–µ (—Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –∏ –±–µ–∑)
                parkent_vat_patterns = [
                    'PL5272956146', 'PL 5272956146', '5272956146'
                ]
                tavie_vat_patterns = [
                    'EE102288270', 'EE 102288270', '102288270'
                ]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º PARKENTERTAINMENT VAT
                parkent_found = any(pattern in extracted_text for pattern in parkent_vat_patterns)
                print(f"üîç DEBUG: searching for PARKENTERTAINMENT VAT patterns: {parkent_found}")
                if parkent_found:
                    found_patterns = [p for p in parkent_vat_patterns if p in extracted_text]
                    print(f"üîç DEBUG: Found patterns: {found_patterns}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º TaVie Europe VAT  
                tavie_found = any(pattern in extracted_text for pattern in tavie_vat_patterns)
                print(f"üîç DEBUG: searching for TaVie Europe VAT patterns: {tavie_found}")

                if parkent_found:
                    our_company = 'PARKENTERTAINMENT'
                    print("üîç DEBUG: Found PARKENTERTAINMENT VAT, setting our_company to PARKENTERTAINMENT")
                elif tavie_found:
                    our_company = 'TaVie Europe O√ú'
                    print("üîç DEBUG: Found TaVie Europe VAT, setting our_company to TaVie Europe O√ú")

                print(f"üîç DEBUG: Final our_company={our_company}")

                # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ –≤ document_data
                document_data['our_company'] = our_company

            # –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø –¢–û–í–ê–†–û–í (—É—á–∏—Ç—ã–≤–∞–µ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∫–∞–∫ –ø–æ–¥—Å–∫–∞–∑–∫—É)
            combined_text_for_category = extracted_text
            try:
                if supplier_name:
                    combined_text_for_category = f"{extracted_text}\n{supplier_name}"
            except Exception:
                pass
            # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç LLM –¥–ª—è FLOWERS –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Ü–≤–µ—Ç–æ–≤, –∏–Ω–∞—á–µ CategoryDetector
            print(f"üå∏ DEBUG: Entering category detection, document_data keys: {list(document_data.keys())}")
            try:
                llm_cat = (document_data.get('product_category') or '').upper()
                flower_names = document_data.get('detected_flower_names') or []
                print(f"üå∏ DEBUG: llm_cat='{llm_cat}', flower_names={len(flower_names)} items")
                if llm_cat == 'FLOWERS' and flower_names:
                    document_category = DocumentCategory.FLOWERS
                    document_data['document_category'] = document_category
                    print(f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_category} (source: llm, flowers={len(flower_names)})")
                else:
                    from src.domain.services.category_detector import CategoryDetector
                    detector = CategoryDetector()
                    det = detector.detect(combined_text_for_category, supplier_name=supplier_name or "", product_description=document_data.get('service_description') or document_data.get('item_details') or "")
                    document_category = det.category
                    document_data['document_category'] = document_category
                    print(f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_category} (source: {det.source}, conf={det.confidence:.2f})")
            except Exception as _e:
                document_category = self._determine_document_category(combined_text_for_category)
                document_data['document_category'] = document_category
                print(f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (fallback): {document_category}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ our_company
            if our_company == 'PARKENTERTAINMENT':
                print("üè¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: PARKENTERTAINMENT")
                cache_file = "data/optimized_cache/PARKENTERTAINMENT_optimized.json"
            elif our_company == 'TaVie Europe O√ú':
                print("üè¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: TaVie Europe O√ú")
                cache_file = "data/optimized_cache/TaVie_Europe_optimized.json"
            else:
                print("üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∫—ç—à")
                cache_file = "data/optimized_cache/all_contacts_optimized.json"

            print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à: {cache_file}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫—ç—à
            cache = OptimizedContactCache(cache_file)

            # –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–û–ò–°–ö–ê –° PYDANTIC:
            # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∫—ç—à–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
            search_result = await self._search_supplier_comprehensive(supplier_name, supplier_vat, cache, our_company)

            if search_result.found_in_cache or search_result.found_in_zoho:
                cached_contact = search_result.contact_data
                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ VAT –∏–∑ –∑–∞–ø–∏—Å–∏ Zoho/–∫—ç—à–∞
                def _extract_vat(contact: Dict[str, Any]) -> str:
                    if not contact:
                        return ''
                    for key in ['vat_number', 'tax_id', 'cf_tax_id', 'cf_vat_id']:
                        val = contact.get(key)
                        if val:
                            return str(val).strip()
                    # –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å custom_fields
                    for cf in contact.get('custom_fields') or []:
                        v = (cf.get('value') or '').strip()
                        if v:
                            return v
                    return ''
                cached_vat = _extract_vat(cached_contact)
                document_vat = (supplier_vat or '').strip()

                # –ï—Å–ª–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ VAT –ø—É—Å—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π VAT –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Zoho
                if not cached_vat:
                    try:
                        zoho_contact = await self._search_in_zoho_api(supplier_name, supplier_vat, our_company)
                        if zoho_contact:
                            zoho_vat = _extract_vat(zoho_contact)
                            if zoho_vat:
                                cached_contact = zoho_contact
                                cached_vat = zoho_vat
                                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–∏–º –∫—ç—à, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—ã–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                                try:
                                    await self._update_cache_with_contact(zoho_contact, our_company)
                                except Exception:
                                    pass
                    except Exception:
                        pass

                print(f"   ‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑: {search_result.search_method}")
                print(f"   üìä VAT —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: –¥–æ–∫—É–º–µ–Ω—Ç='{document_vat}' vs —Å–∏—Å—Ç–µ–º–∞='{cached_vat}'")

                # 2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º VAT –Ω–æ–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É—è Pydantic Enum
                vat_status = self._compare_vat_numbers(document_vat, cached_vat)

                # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ VAT —Å—Ç–∞—Ç—É—Å–∞
                recommended_action, differences = self._determine_vat_actions(vat_status, document_vat, cached_vat, document_data, cached_contact)

                return ContactComparison(
                    supplier_name=supplier_name,
                    exists_in_cache=search_result.found_in_cache or search_result.found_in_zoho,  # –ù–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ –ò–õ–ò –≤ Zoho
                    cached_contact=cached_contact,
                    differences=differences,
                    document_data=document_data,
                    recommended_action=recommended_action,
                    vat_status=vat_status.value
                )

            # 5. –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
            print(f"   ‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {supplier_name}")
            return ContactComparison(
                supplier_name=supplier_name,
                exists_in_cache=False,
                differences=[],
                document_data=document_data,
                recommended_action="create"
            )

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∫—ç—à–µ–º: {e}")
            return ContactComparison(
                supplier_name=supplier_name,
                exists_in_cache=False,
                differences=[]
            )

    def _is_similar_company_name(self, name1: str, name2: str, threshold: float = 0.8) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–π"""
        from difflib import SequenceMatcher

        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_name1 = self._clean_company_name(name1)
        clean_name2 = self._clean_company_name(name2)

        similarity = SequenceMatcher(None, clean_name1.lower(), clean_name2.lower()).ratio()
        return similarity >= threshold

    def _clean_company_name(self, name: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –£–±–∏—Ä–∞–µ–º —Ç–∏–ø–æ–≤—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        suffixes = ['GmbH', 'Ltd', 'LLC', 'O√ú', 'Sp. z o.o.', 'S.A.', 'B.V.']
        cleaned = name.strip()

        for suffix in suffixes:
            if cleaned.endswith(suffix):
                cleaned = cleaned[:-len(suffix)].strip()

        return cleaned

    def _find_differences(self, document_data: Dict[str, Any], cached_contact: Dict[str, Any]) -> List[Dict[str, str]]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∫—ç—à–∞"""
        differences = []

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        fields_to_compare = {
            'name': 'contact_name',
            'vat': 'tax_id', 
            'country': 'country'
        }

        for doc_field, cache_field in fields_to_compare.items():
            doc_value = document_data.get(doc_field, '')
            cache_value = cached_contact.get(cache_field, '')

            if doc_value and cache_value and doc_value != cache_value:
                differences.append({
                    'field': doc_field,
                    'document_value': str(doc_value),
                    'cached_value': str(cache_value)
                })

        return differences

    async def _search_supplier_comprehensive(self, supplier_name: str, supplier_vat: str, cache: OptimizedContactCache, our_company: str) -> ContactSearchResult:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: –∫—ç—à ‚Üí Zoho API ‚Üí –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞"""
        
        # –®–∞–≥ 1: –ü–æ–∏—Å–∫ –≤ –∫—ç—à–µ
        found_contacts = []
        if supplier_name:
            found_contacts = cache.search_by_company(supplier_name)
            
        if found_contacts:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
            return ContactSearchResult(
                found_in_cache=True,
                contact_data=found_contacts[0].to_dict(),
                search_method="cache"
            )
            
        # –ü–æ–∏—Å–∫ –ø–æ VAT –≤ –∫—ç—à–µ
        if supplier_vat:
            found_by_vat = cache.search_by_vat(supplier_vat)
            if found_by_vat:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ –ø–æ VAT")
                return ContactSearchResult(
                    found_in_cache=True,
                    contact_data=found_by_vat.to_dict(),
                    search_method="cache_vat"
                )
        
        # –®–∞–≥ 2: –ü–æ–∏—Å–∫ –≤ Zoho API
        print(f"   üîç –ü–æ–∏—Å–∫ –≤ Zoho API: {supplier_name}")
        zoho_result = await self._search_in_zoho_api(supplier_name, supplier_vat, our_company)
        
        if zoho_result:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –≤ Zoho API - –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
            cache_updated = await self._update_cache_with_contact(zoho_result, our_company)
            
            return ContactSearchResult(
                found_in_zoho=True,
                contact_data=zoho_result,
                search_method="zoho_api",
                cache_updated=cache_updated
            )
            
        # –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ
        print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –∫—ç—à–µ, –Ω–∏ –≤ Zoho")
        return ContactSearchResult(search_method="not_found")
    
    async def _search_in_zoho_api(self, supplier_name: str, supplier_vat: str, our_company: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ Zoho Books API"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
            from functions.zoho_api import get_contact_by_name, get_contact_by_vat
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º organization_id
            organization_id = None
            if our_company == 'PARKENTERTAINMENT':
                organization_id = "20082562863"
            elif our_company == 'TaVie Europe O√ú':
                organization_id = "20092948714"
            else:
                print(f"   ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è Zoho API: {our_company}")
                return None
                
            # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            if supplier_name:
                print(f"   üîç –ò—â–µ–º –≤ Zoho –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {supplier_name}")
                contact = get_contact_by_name(supplier_name, organization_id)
                if contact:
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –≤ Zoho –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
                    return contact
                    
            # –ü–æ–∏—Å–∫ –ø–æ VAT
            if supplier_vat:
                print(f"   üîç –ò—â–µ–º –≤ Zoho –ø–æ VAT: {supplier_vat}")
                contact = get_contact_by_vat(supplier_vat, organization_id)
                if contact:
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –≤ Zoho –ø–æ VAT")
                    return contact
                    
            return None
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Zoho API: {e}")
            return None
    
    def _compare_vat_numbers(self, document_vat: str, cached_vat: str) -> VATStatus:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç VAT –Ω–æ–º–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Pydantic enum —Å—Ç–∞—Ç—É—Å"""
        
        if document_vat and cached_vat:
            # –û–±–∞ VAT –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
            if document_vat.upper() == cached_vat.upper():
                print(f"   ‚úÖ VAT —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                return VATStatus.MATCH
            else:
                print(f"   ‚ö†Ô∏è VAT –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
                return VATStatus.MISMATCH
        elif document_vat and not cached_vat:
            # VAT –µ—Å—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
            print(f"   ‚ö†Ô∏è VAT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –µ—Å—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
            return VATStatus.MISSING_IN_CACHE
        elif not document_vat and cached_vat:
            # VAT –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            print(f"   ‚ÑπÔ∏è VAT –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
            return VATStatus.MISSING_IN_DOCUMENT
        else:
            # VAT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±–æ–∏—Ö –º–µ—Å—Ç–∞—Ö
            print(f"   ‚ÑπÔ∏è VAT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±–æ–∏—Ö –º–µ—Å—Ç–∞—Ö")
            return VATStatus.BOTH_MISSING
            
    def _determine_vat_actions(self, vat_status: VATStatus, document_vat: str, cached_vat: str, 
                              document_data: Dict[str, Any], cached_contact: Dict[str, Any]) -> tuple:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ VAT —Å—Ç–∞—Ç—É—Å–∞"""
        
        if vat_status in [VATStatus.MATCH, VATStatus.BOTH_MISSING, VATStatus.MISSING_IN_DOCUMENT]:
            # –ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω, VAT –≤ –ø–æ—Ä—è–¥–∫–µ
            recommended_action = "found"
            differences = []
        elif vat_status == VATStatus.MISSING_IN_CACHE:
            # –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å VAT –≤ Zoho
            recommended_action = "update_vat_in_zoho"
            differences = [{"field": "vat_number", "document": document_vat, "cache": cached_vat}]
            print(f"   üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û–±–Ω–æ–≤–∏—Ç—å VAT –≤ Zoho ({document_vat})")
        elif vat_status == VATStatus.MISMATCH:
            # –ö–æ–Ω—Ñ–ª–∏–∫—Ç VAT - —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
            recommended_action = "resolve_vat_conflict"
            differences = [{"field": "vat_number", "document": document_vat, "cache": cached_vat}]
            print(f"   üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç VAT")
        else:
            recommended_action = "unknown"
            differences = []

        # –ù–∞—Ö–æ–¥–∏–º –¥—Ä—É–≥–∏–µ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∏ —Å–∏—Å—Ç–µ–º–æ–π
        other_differences = self._find_differences(document_data, cached_contact)
        differences.extend(other_differences)
        
        return recommended_action, differences

    async def _update_cache_with_contact(self, contact_data: Dict[str, Any], our_company: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º –≤ Zoho API"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
            from functions.refresh_zoho_cache import refresh_single_contact_cache
            
            contact_id = contact_data.get('contact_id')
            contact_name = contact_data.get('contact_name', 'Unknown')
            
            if not contact_id:
                print(f"   ‚ùå –ù–µ—Ç contact_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º organization_id
            organization_id = None
            if our_company == 'PARKENTERTAINMENT':
                organization_id = "20082562863"
            elif our_company == 'TaVie Europe O√ú':
                organization_id = "20092948714"
            else:
                print(f"   ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {our_company}")
                return False
            
            print(f"   üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {contact_name} (ID: {contact_id})")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            success = await refresh_single_contact_cache(contact_id, organization_id, our_company)
            
            if success:
                print(f"   ‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {contact_name}")
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –¥–ª—è {contact_name}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")
            return False

    def _determine_actions(self, comparison: ContactComparison, analysis: Dict[str, Any]) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        actions = []

        if not comparison.exists_in_cache:
            actions.append("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ Zoho")
            actions.append("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à")
        elif comparison.differences:
            actions.append("üìù –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç")
            actions.append("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à")

        if analysis.get('is_car_related'):
            actions.append("üöó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π item")
            actions.append("üìã –°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ SKU")

        return actions

    def _determine_document_category(self, extracted_text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Pydantic"""
        text_lower = extracted_text.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        car_keywords = [
            'vin', 'chassis', 'vehicle', 'auto', 'car', 'bmw', 'mercedes', 'audi', 'volkswagen',
            'toyota', 'honda', 'ford', 'engine', 'transmission', 'vehicle identification',
            'registration', 'license plate', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–º–∞—à–∏–Ω–∞', '–¥–≤–∏–≥–∞—Ç–µ–ª—å'
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ü–≤–µ—Ç–æ–≤  
        flower_keywords = [
            'rose', 'roses', 'r√≥≈ºa', 'flower', 'flowers', 'bouquet', 'petal', 'stem',
            'lily', 'tulip', 'orchid', 'carnation', 'chrysanthemum', 'dahlia', 'peony',
            'eustoma', 'delphinium', 'craspedia', 'dianthus', 'celosia', 'panicum',
            'kwiat', 'kwiaty', 'bukiet', 'p≈Çatki', '≈Çodyga'
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥
        utility_keywords = [
            'woda', 'water', 'gaz', 'gas', 'energia', 'energy', 'electricity', 'prƒÖd',
            'heating', 'ogrzewanie', 'waste', '≈õmieci', 'komunalne', 'utility', 'utilities',
            'sewage', 'kanalizacja', 'op≈Çata', 'fee', 'media', 'bills'
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±—â–∏—Ö —É—Å–ª—É–≥
        service_keywords = [
            'service', 'consulting', 'repair', 'maintenance', 'installation', 'support',
            'us≈Çuga', 'serwis', 'naprawa', 'konsultacja', 'instalacja', 'wsparcie',
            'parking', 'transport', 'delivery', 'dostawa'
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
        food_keywords = [
            'food', 'jedzenie', '≈ºywno≈õƒá', 'meal', 'breakfast', 'lunch', 'dinner',
            'restaurant', 'cafe', 'catering', 'pizza', 'burger', 'bread', 'chleb'
        ]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        car_score = sum(1 for keyword in car_keywords if keyword in text_lower)
        flower_score = sum(1 for keyword in flower_keywords if keyword in text_lower)
        utility_score = sum(1 for keyword in utility_keywords if keyword in text_lower)
        service_score = sum(1 for keyword in service_keywords if keyword in text_lower)
        food_score = sum(1 for keyword in food_keywords if keyword in text_lower)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∏–±–æ–ª—å—à–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        scores = {
            DocumentCategory.CARS: car_score,
            DocumentCategory.FLOWERS: flower_score,
            DocumentCategory.UTILITIES: utility_score,
            DocumentCategory.SERVICES: service_score,
            DocumentCategory.FOOD: food_score
        }
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—á–µ—Ç
        max_score = max(scores.values())
        if max_score == 0:
            return DocumentCategory.OTHER
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º
        for category, score in scores.items():
            if score == max_score:
                return category
                
        return DocumentCategory.OTHER

    async def _check_sku_in_cache(self, analysis: Dict[str, Any]) -> SKUCheckResult:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç SKU –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –∫—ç—à–µ"""
        print("   üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SKU...")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        is_car = analysis.get('is_car_related')
        print(f"   üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {is_car}")

        if not is_car:
            print("   ‚ùå –ù–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
            return SKUCheckResult(
                vin="",
                exists_in_sku_cache=False,
                recommended_action="not_car",
                message="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"
            )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º VIN
        vin = analysis.get('vin') or analysis.get('item_sku', '')
        car_name = analysis.get('car_item_name', '')
        print(f"   üî¢ VIN: {vin}")
        print(f"   üöó –ù–∞–∑–≤–∞–Ω–∏–µ: {car_name}")

        if not vin:
            print("   ‚ùå VIN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return SKUCheckResult(
                vin="",
                exists_in_sku_cache=False,
                car_name=car_name,
                recommended_action="error",
                message="VIN –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"
            )

        try:
            print("   üìã –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SKU –º–µ–Ω–µ–¥–∂–µ—Ä...")
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä SKU –∫—ç—à–∞
            sys.path.append(str(Path(__file__).parent))
            from sku_cache_manager import quick_sku_check

            print(f"   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º SKU {vin}...")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SKU
            sku_result = quick_sku_check(vin)
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç SKU: {sku_result}")

            if sku_result['exists']:
                print("   ‚úÖ SKU –Ω–∞–π–¥–µ–Ω - –¥—É–±–ª–∏–∫–∞—Ç")
                return SKUCheckResult(
                    vin=vin,
                    exists_in_sku_cache=True,
                    car_name=car_name,
                    recommended_action="update_item",
                    message=f"ITEM —Å VIN {vin} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å"
                )
            else:
                print("   üÜï SKU –Ω–µ –Ω–∞–π–¥–µ–Ω - –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å")
                return SKUCheckResult(
                    vin=vin,
                    exists_in_sku_cache=False,
                    car_name=car_name,
                    recommended_action="create_item",
                    message=f"VIN {vin} –Ω–µ –Ω–∞–π–¥–µ–Ω - –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å ITEM"
                )

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SKU: {e}")
            return SKUCheckResult(
                vin=vin,
                exists_in_sku_cache=False,
                car_name=car_name,
                recommended_action="error",
                message=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SKU: {str(e)}"
            )

    def _determine_smart_actions(self, contact_comparison: ContactComparison, sku_check: Optional[SKUCheckResult], analysis: Dict[str, Any]) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ SKU"""
        actions = []

        # –£–ú–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –ö–û–ù–¢–ê–ö–¢–ê –ù–ê –û–°–ù–û–í–ï VAT –õ–û–ì–ò–ö–ò
        if contact_comparison.exists_in_cache:
            vat_status = getattr(contact_comparison, 'vat_status', 'unknown')
            
            if vat_status == "match":
                actions.append("‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–π–¥–µ–Ω, VAT —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            elif vat_status == "missing_in_cache":
                actions.append("üîÑ –û–±–Ω–æ–≤–∏—Ç—å VAT –≤ Zoho Books")
                actions.append("üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            elif vat_status == "mismatch":
                actions.append("‚ö†Ô∏è –†–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç VAT –Ω–æ–º–µ—Ä–æ–≤")
                actions.append("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
            elif vat_status == "missing_in_document":
                actions.append("‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–π–¥–µ–Ω (VAT —Ç–æ–ª—å–∫–æ –≤ –∫—ç—à–µ)")
            elif vat_status == "both_missing":
                actions.append("‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–π–¥–µ–Ω (VAT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
            elif vat_status == "name_mismatch":
                actions.append("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
                actions.append("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ")
            else:
                actions.append("‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        else:
            actions.append("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
            if analysis.get('supplier_vat'):
                actions.append("üìù –î–æ–±–∞–≤–∏—Ç—å VAT –Ω–æ–º–µ—Ä –≤ –ø—Ä–æ—Ñ–∏–ª—å")

        # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è SKU (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å)
        if sku_check:
            if sku_check.recommended_action == "create_item":
                actions.append("üöó –°–æ–∑–¥–∞—Ç—å ITEM –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
            elif sku_check.recommended_action == "update_item":
                actions.append("üîÑ –û–±–Ω–æ–≤–∏—Ç—å ITEM –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
            elif sku_check.recommended_action == "error":
                error_msg = f"‚ùå {sku_check.message}"
                actions.append(error_msg)

        # –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –î–û–ö–£–ú–ï–ù–¢–û–í –£–°–õ–£–ì (Bill creation)
        if analysis.get('should_create_bill') and contact_comparison.exists_in_cache:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º
            if analysis.get('is_final_invoice', False):
                actions.append("üìã –°–æ–∑–¥–∞—Ç—å BILL –≤ Zoho")
                if analysis.get('suggested_account'):
                    actions.append(f"üíº Account: {analysis.get('suggested_account')}")
            else:
                actions.append("üìã –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º")
        elif analysis.get('document_type') in ['delivery_note', 'transport_document', 'cmr']:
            if contact_comparison.exists_in_cache:
                actions.append("üìã –°–æ–∑–¥–∞—Ç—å BILL –¥–ª—è —É—Å–ª—É–≥–∏ –¥–æ—Å—Ç–∞–≤–∫–∏")
            else:
                actions.append("‚ûï –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")

        return actions

    def generate_telegram_message(self, result: ProcessingResult) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞"""

        analysis = result.document_analysis
        comparison = result.contact_comparison
        sku_check = getattr(result, 'sku_check', None)

        print(f"üîç DEBUG generate_telegram_message: analysis keys = {list(analysis.keys()) if analysis else 'None'}")
        print(f"üîç DEBUG generate_telegram_message: comparison.exists_in_cache = {comparison.exists_in_cache if comparison else 'None'}")

        if not analysis:
            print("üîç DEBUG: analysis is None, returning error message")
            return "‚ùå –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è"

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        message = "üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–†–ê–ë–û–¢–ö–ò –î–û–ö–£–ú–ï–ù–¢–ê\n\n"
        message += f"üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {analysis.get('supplier_name', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥)
        if analysis.get('document_category'):
            raw_cat = analysis.get('document_category')
            cat_map = {
                'DocumentCategory.CARS': 'üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏', 'CARS': 'üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏',
                'DocumentCategory.FLOWERS': 'üå∏ –¶–≤–µ—Ç—ã', 'FLOWERS': 'üå∏ –¶–≤–µ—Ç—ã',
                'DocumentCategory.UTILITIES': 'üíß –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', 'UTILITIES': 'üíß –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
                'DocumentCategory.SERVICES': 'üõ†Ô∏è –£—Å–ª—É–≥–∏', 'SERVICES': 'üõ†Ô∏è –£—Å–ª—É–≥–∏',
                'DocumentCategory.FOOD': 'üçé –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', 'FOOD': 'üçé –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è',
                'DocumentCategory.OTHER': 'üì¶ –ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã', 'OTHER': 'üì¶ –ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã'
            }
            readable_cat = cat_map.get(str(raw_cat), str(raw_cat))
            message += f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {readable_cat}\n"

        print(f"üîç DEBUG: –ü–æ—Å—Ç–∞–≤—â–∏–∫ = {analysis.get('supplier_name', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")

        # Email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
        if analysis.get('supplier_email'):
            message += f"üìß Email: {analysis.get('supplier_email')}\n"
        if analysis.get('supplier_phone'):
            message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {analysis.get('supplier_phone')}\n"
        if analysis.get('contact_person'):
            message += f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: {analysis.get('contact_person')}\n"

        # –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if analysis.get('document_type_readable'):
            message += f"üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {analysis.get('document_type_readable')}\n"
        if analysis.get('service_description'):
            message += f"üßæ –ó–∞ —á—Ç–æ: {analysis.get('service_description')}\n"
        if analysis.get('tax_rate') is not None:
            try:
                tax = float(analysis.get('tax_rate'))
                message += f"üí∞ –ù–µ—Ç—Ç–æ/–ù–î–°: {analysis.get('total_amount', 0)} {analysis.get('currency', 'EUR')} ‚Ä¢ {tax}%\n"
            except Exception:
                message += f"üí∞ –ù–µ—Ç—Ç–æ: {analysis.get('total_amount', 0)} {analysis.get('currency', 'EUR')}\n"

        # Notes –¥–ª—è Bill (–≤–∫–ª—é—á–∞—è CMR)
        if analysis.get('notes') or analysis.get('notes_for_bill'):
            message += f"üìù Notes: {analysis.get('notes_for_bill') or analysis.get('notes')}\n"
        if analysis.get('additional_documents'):
            try:
                docs = ", ".join(analysis.get('additional_documents') or [])
                if docs:
                    message += f"üìé Docs: {docs}\n"
            except Exception:
                pass

        # –ù–æ–º–µ—Ä –∏ –¥–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if analysis.get('bill_number'):
            message += f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {analysis.get('bill_number')}\n"
        if analysis.get('document_date'):
            message += f"üìÖ –î–∞—Ç–∞: {analysis.get('document_date')}\n"
        if analysis.get('due_date'):
            message += f"‚è∞ –°—Ä–æ–∫ –ø–ª–∞—Ç–µ–∂–∞: {analysis.get('due_date')}\n"

        # –í—ã—Å—Ç–∞–≤–∏—Ç–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if analysis.get('issuer_name') or analysis.get('issuer_contact_person'):
            message += "üë§ –í—ã—Å—Ç–∞–≤–∏—Ç–µ–ª—å: "
            parts = []
            if analysis.get('issuer_name'):
                parts.append(str(analysis.get('issuer_name')))
            if analysis.get('issuer_contact_person'):
                parts.append(str(analysis.get('issuer_contact_person')))
            message += ", ".join(parts) + "\n"
        if analysis.get('issuer_vat'):
            message += f"   üè∑Ô∏è VAT –≤—ã—Å—Ç–∞–≤–∏—Ç–µ–ª—è: {analysis.get('issuer_vat')}\n"

        # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if comparison.exists_in_cache:
            message += "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç: –ù–ê–ô–î–ï–ù –≤ —Å–∏—Å—Ç–µ–º–µ\n"
        else:
            message += "üÜï –ö–æ–Ω—Ç–∞–∫—Ç: –ù–ï –ù–ê–ô–î–ï–ù - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ\n"

        # –ï—Å–ª–∏ tax_rate —É–∂–µ –±—ã–ª –≤—ã–≤–µ–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å—É–º–º—É –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
        if not analysis.get('tax_rate'):
            message += f"üí∞ –°—É–º–º–∞: {analysis.get('total_amount', 0)} {analysis.get('currency', 'EUR')}\n"

        print(f"üîç DEBUG: Generated message length = {len(message)}")
        print(f"üîç DEBUG: Generated message first 200 chars = {message[:200]}")

        # –ê–¥—Ä–µ—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ Zoho Books)
        if analysis.get('supplier_address'):
            # –ê–¥—Ä–µ—Å –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
            message += "üìç –ê–¥—Ä–µ—Å: " + str(analysis.get('supplier_address')) + "\n"
        elif analysis.get('supplier_street') or analysis.get('supplier_city'):
            addr_parts = []
            if analysis.get('supplier_street'):
                addr_parts.append(analysis.get('supplier_street'))
            if analysis.get('supplier_zip_code') and analysis.get('supplier_city'):
                addr_parts.append(f"{analysis.get('supplier_zip_code')} {analysis.get('supplier_city')}")
            elif analysis.get('supplier_city'):
                addr_parts.append(analysis.get('supplier_city'))
            if analysis.get('supplier_country'):
                addr_parts.append(analysis.get('supplier_country'))
            message += f"üìç –ê–¥—Ä–µ—Å: {', '.join(addr_parts)}\n"
        else:
            message += "üìç –ê–¥—Ä–µ—Å: –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω\n"

        # VAT –Ω–æ–º–µ—Ä (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞)
        if analysis.get('supplier_vat'):
            try:
                from src.domain.services.vat_validator import VATValidatorService
                vvs_disp = VATValidatorService()
                country_l = (analysis.get('supplier_country') or (analysis.get('supplier_address') or {}).get('country') or '').strip().lower()
                country_to_iso = {
                    'poland': 'PL', 'polska': 'PL', 'estonia': 'EE', 'eesti': 'EE', 'germany': 'DE',
                    'deutschland': 'DE', 'latvia': 'LV', 'lithuania': 'LT', 'netherlands': 'NL',
                    'ireland': 'IE', 'france': 'FR', 'spain': 'ES', 'italy': 'IT', 'portugal': 'PT',
                    'sweden': 'SE', 'denmark': 'DK', 'united kingdom': 'GB', 'uk': 'GB'
                }
                expected_iso = country_to_iso.get(country_l)
                raw_v = analysis.get('supplier_vat')
                valid = vvs_disp.validate_vat(raw_v, expected_country=expected_iso)
                if valid.is_valid:
                    show_v = vvs_disp.add_country_prefix(valid.vat_number.value, expected_iso or valid.country_code).replace(' ', '')
                else:
                    digits = ''.join(ch for ch in str(raw_v) if ch.isdigit())
                    show_v = f"{expected_iso}{digits}" if expected_iso and digits else str(raw_v)
            except Exception:
                show_v = str(analysis.get('supplier_vat'))
            message += f"üè∑Ô∏è VAT: {show_v}\n"

        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI
        confidence = analysis.get('confidence', 0.5)
        message += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI: {confidence:.1%}\n"

        # –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–¢–ê–¢–£–°–ê –ö–û–ù–¢–ê–ö–¢–ê –ù–ê –û–°–ù–û–í–ï VAT
        if comparison.exists_in_cache:
            vat_status = getattr(comparison, 'vat_status', 'unknown')
            document_vat = analysis.get('supplier_vat', '')
            cached_vat = ''
            if comparison.cached_contact:
                cached_vat = comparison.cached_contact.get('vat_number', '')

            if vat_status == "match":
                message += "\n‚úÖ –ö–û–ù–¢–ê–ö–¢ –ù–ê–ô–î–ï–ù –í –ö–≠–®–ï"
                message += "\n   ‚úÖ VAT –Ω–æ–º–µ—Ä–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
            elif vat_status == "missing_in_cache":
                message += "\n‚úÖ –ö–û–ù–¢–ê–ö–¢ –ù–ê–ô–î–ï–ù –í –ö–≠–®–ï"
                message += f"\n   ‚ö†Ô∏è VAT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ: {document_vat}"
                message += "\n   üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û–±–Ω–æ–≤–∏—Ç—å VAT –≤ Zoho Books"
            elif vat_status == "mismatch":
                message += "\n‚úÖ –ö–û–ù–¢–ê–ö–¢ –ù–ê–ô–î–ï–ù –í –ö–≠–®–ï"
                message += f"\n   ‚ö†Ô∏è VAT –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç:"
                message += f"\n      üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {document_vat}"
                message += f"\n      üíæ –ö—ç—à: {cached_vat}"
                message += "\n   üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç VAT"
            elif vat_status == "missing_in_document":
                message += "\n‚úÖ –ö–û–ù–¢–ê–ö–¢ –ù–ê–ô–î–ï–ù –í –ö–≠–®–ï"
                message += f"\n   ‚ÑπÔ∏è VAT –µ—Å—Ç—å –≤ –∫—ç—à–µ ({cached_vat}), –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"
            elif vat_status == "both_missing":
                message += "\n‚úÖ –ö–û–ù–¢–ê–ö–¢ –ù–ê–ô–î–ï–ù –í –ö–≠–®–ï"
                message += "\n   ‚ÑπÔ∏è VAT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±–æ–∏—Ö –º–µ—Å—Ç–∞—Ö"
            elif vat_status == "name_mismatch":
                message += "\n‚ö†Ô∏è –ö–û–ù–¢–ê–ö–¢ –ù–ê–ô–î–ï–ù –ü–û VAT, –ù–û –° –î–†–£–ì–ò–ú –ù–ê–ó–í–ê–ù–ò–ï–ú"
                message += f"\n   üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {analysis.get('supplier_name', 'Unknown')}"
                cached_name = comparison.cached_contact.get('contact_name', 'Unknown') if comparison.cached_contact else 'Unknown'
                message += f"\n   üíæ –ö—ç—à: {cached_name}"
                message += "\n   üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
            else:
                message += "\n‚úÖ –ö–û–ù–¢–ê–ö–¢ –ù–ê–ô–î–ï–ù –í –ö–≠–®–ï"
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ä–∞–∑–ª–∏—á–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if comparison.differences:
                vat_diff_count = sum(1 for diff in comparison.differences if diff.get('field') == 'vat_number')
                other_diff_count = len(comparison.differences) - vat_diff_count
                if other_diff_count > 0:
                    message += f"\n   üìù –î—Ä—É–≥–∏–µ —Ä–∞–∑–ª–∏—á–∏—è: {other_diff_count} –ø–æ–ª–µ–π"
        else:
            message += "\nüÜï –ù–û–í–´–ô –ö–û–ù–¢–ê–ö–¢"
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º VAT –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: —Ü–∏—Ñ—Ä—ã NIP + ISO-–ø—Ä–µ—Ñ–∏–∫—Å —Å—Ç—Ä–∞–Ω—ã
            raw_vat = (analysis.get('supplier_vat') or '').strip()
            country = (analysis.get('supplier_country') or 'Unknown')
            try:
                from src.domain.services.vat_validator import VATValidatorService
                vvs_disp = VATValidatorService()
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä–∞–Ω—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç—Ä–∞–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                country_l = (country or '').strip().lower()
                country_to_iso = {
                    'poland': 'PL', 'polska': 'PL', 'estonia': 'EE', 'eesti': 'EE', 'germany': 'DE',
                    'deutschland': 'DE', 'latvia': 'LV', 'lithuania': 'LT', 'netherlands': 'NL',
                    'ireland': 'IE', 'france': 'FR', 'spain': 'ES', 'italy': 'IT', 'portugal': 'PT',
                    'sweden': 'SE', 'denmark': 'DK', 'united kingdom': 'GB', 'uk': 'GB'
                }
                expected_iso = country_to_iso.get(country_l)
                valid = vvs_disp.validate_vat(raw_vat, expected_country=expected_iso)
                if valid.is_valid:
                    show_vat = vvs_disp.add_country_prefix(valid.vat_number.value, expected_iso or valid.country_code).replace(' ', '')
                else:
                    digits_only = ''.join(ch for ch in raw_vat if ch.isdigit())
                    show_vat = f"{expected_iso}{digits_only}" if expected_iso and digits_only else (raw_vat or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            except Exception:
                show_vat = raw_vat or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
            message += f"\n   üè∑Ô∏è VAT: {show_vat}"
            message += f"\n   üåç –°—Ç—Ä–∞–Ω–∞: {country}"

        # –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        banking_info = []
        if analysis.get('bank_name'):
            banking_info.append(f"üè¶ –ë–∞–Ω–∫: {analysis.get('bank_name')}")
        if analysis.get('bank_account'):
            banking_info.append(f"üí≥ –°—á–µ—Ç: {analysis.get('bank_account')}")
        if analysis.get('bank_address'):
            banking_info.append(f"üìç –ê–¥—Ä–µ—Å –±–∞–Ω–∫–∞: {analysis.get('bank_address')}")
        if analysis.get('iban'):
            banking_info.append(f"üí≥ IBAN: {analysis.get('iban')}")
        if analysis.get('swift_bic'):
            banking_info.append(f"üîó SWIFT: {analysis.get('swift_bic')}")
        if analysis.get('payment_method'):
            banking_info.append(f"üí∏ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {analysis.get('payment_method')}")

        if banking_info:
            message += "\n\nüè¶ –ë–ê–ù–ö–û–í–°–ö–ò–ï –†–ï–ö–í–ò–ó–ò–¢–´:"
            for info in banking_info:
                message += f"\n   {info}"

        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –≤ Telegram-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

        # –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if analysis.get('is_car_related'):
            message += "\n\nüöó –ê–í–¢–û–ú–û–ë–ò–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:"
            if analysis.get('car_brand'):
                message += f"\n   –ú–∞—Ä–∫–∞: {analysis.get('car_brand')}"
            message += f"\n   –ú–æ–¥–µ–ª—å: {analysis.get('car_model', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}"
            if analysis.get('vin'):
                message += f"\n   VIN: {analysis.get('vin')}"
            message += f"\n   Item: {analysis.get('car_item_name', '–ù–µ —Å–æ–∑–¥–∞–Ω')}"
        else:
            # –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ is_car_related, –Ω–æ VIN –Ω–∞–π–¥–µ–Ω ‚Äî –¥–æ–±–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            if analysis.get('vin'):
                message += f"\nVIN: {analysis.get('vin')}"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ITEM
            if analysis.get('item_description') or analysis.get('item_details'):
                description = analysis.get('item_description') or analysis.get('item_details')
                message += f"\n   Description: {description}"

            # –î–æ–±–∞–≤–ª—è–µ–º SKU –µ—Å–ª–∏ –µ—Å—Ç—å
            if analysis.get('item_sku'):
                message += f"\n   SKU: {analysis.get('item_sku')}"

        return message

    async def _save_processed_document(self, file_path: str, analysis: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ø–∞–ø–∫—É processed_files"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            processed_dir = Path("processed_files")
            processed_dir.mkdir(exist_ok=True)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            original_name = Path(file_path).stem

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –≤ –∏–º—è —Ñ–∞–π–ª–∞
            supplier_name = analysis.get('supplier_name', 'unknown')
            supplier_name_clean = "".join(c for c in supplier_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
            supplier_name_clean = supplier_name_clean.replace(' ', '_')[:30]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

            new_filename = f"{original_name}_{supplier_name_clean}_{timestamp}.pdf"
            processed_path = processed_dir / new_filename

            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
            shutil.copy2(file_path, processed_path)

            print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {processed_path}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")

    async def auto_update_contact(self, comparison: ContactComparison) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –≤ Zoho –∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"""
        try:
            if comparison.recommended_action == "create" and comparison.document_data:
                return await self._create_new_contact(comparison.document_data)
            elif comparison.recommended_action == "update":
                return await self._update_existing_contact(comparison)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False

    async def _create_new_contact(self, document_data: Dict[str, Any]) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Zoho
        print(f"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {document_data['name']}")
        return True

    async def _update_existing_contact(self, comparison: ContactComparison) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Zoho
        print(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {comparison.supplier_name}")
        return True


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_smart_processor():
    """–¢–µ—Å—Ç —É–º–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""

    processor = SmartDocumentProcessor()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–∏–º–µ—Ä–æ–º
    print("üß™ –¢–ï–°–¢ –£–ú–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê –î–û–ö–£–ú–ï–ù–¢–û–í")
    print("=" * 50)

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ Horrer Automobile
    test_analysis = {
        "ai_enhanced": True,
        "supplier_name": "Horrer Automobile GmbH",
        "supplier_vat": "DE123456789",
        "supplier_address": {
            "country": "DE",
            "city": "B√∂blingen",
            "address_line1": "Stuttgarter Strasse 116"
        },
        "total_amount": 55369.75,
        "currency": "EUR",
        "confidence": 0.95,
        "is_car_related": True,
        "car_model": "Mercedes V 300 d",
        "car_item_name": "Mercedes V 300 d_26375"
    }

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    comparison = await processor._compare_supplier_with_cache(test_analysis)

    result = ProcessingResult(
        success=True,
        document_analysis=test_analysis,
        contact_comparison=comparison,
        suggested_actions=processor._determine_actions(comparison, test_analysis)
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    telegram_message = processor.generate_telegram_message(result)
    print(telegram_message)


if __name__ == "__main__":
    asyncio.run(test_smart_processor()) 