"""
Zoho Books Items Manager
========================

–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ (ITEMS) –≤ Zoho Books –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.
"""
import requests
import json
import time
from typing import Optional, Dict, Any, List
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
try:
    from .zoho_api import get_access_token, log_message
except ImportError:
    # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∑–∞–ø—É—Å–∫
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    from zoho_api import get_access_token, log_message


@dataclass
class CarItemData:
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ ITEM"""
    name: str              # "Mercedes Benz V300d_26375"
    sku: str               # VIN –Ω–æ–º–µ—Ä
    description: str       # –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    cost_price: float      # –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
    selling_price: float   # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
    unit: str = "pcs"      # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    tax_id: Optional[str] = None  # ID –Ω–∞–ª–æ–≥–∞ –∏–∑ Zoho
    # –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø PARKENTERTAINMENT
    mileage: Optional[int] = None  # –ü—Ä–æ–±–µ–≥ –≤ –∫–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    vin: Optional[str] = None      # VIN –Ω–æ–º–µ—Ä –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
    original_currency: Optional[str] = None  # –í–∞–ª—é—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (EUR, USD)
    document_date: Optional[str] = None      # –î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
    
    def to_zoho_format(self, organization_id: Optional[str] = None) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç Zoho Books API"""
        item_data = {
            "name": self.name,
            "sku": self.sku,
            "unit": self.unit,
            "item_type": "inventory",
            "product_type": "goods",
            "description": self.description,
            "rate": self.selling_price,  # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
            "purchase_rate": self.cost_price,  # –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
            "purchase_description": self.description,
            "purchase_account_name": "cost of good sold",
            "account_name": "sales",  # Sales account
            "track_inventory": True,
            "inventory_account_name": "inventory asset",
            "inventory_valuation_method": "fifo",
            "initial_stock": 0,  # –í–°–ï–ì–î–ê 0
            "initial_stock_rate": 0  # –í–°–ï–ì–î–ê 0
        }
        
        # –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø PARKENTERTAINMENT
        if organization_id == "20082562863":  # PARKENTERTAINMENT
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –ø—Ä–æ–±–µ–≥—É
            category = "Used car"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if self.mileage is not None and self.mileage <= 100:
                category = "New car"
                log_message(f"üöó –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category} (–ø—Ä–æ–±–µ–≥: {self.mileage} –∫–º)")
            else:
                log_message(f"üöó –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category} (–ø—Ä–æ–±–µ–≥: {self.mileage or 'N/A'} –∫–º)")
            
            item_data.update({
                # Track Inventory —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–æ–≤–æ–º item_data
                "track_serial_number": True,    # ‚úÖ Advanced Inventory Tracking: Track Serial Number
                "enable_bin_tracking": True,    # ‚úÖ Track Bin location for this item (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ)
                "category_name": category,      # ‚úÖ Category: New car/Used car (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª–µ)
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º VIN –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.vin:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è VIN
                item_data["serial_number"] = self.vin  # –í–æ–∑–º–æ–∂–Ω–æ VIN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ serial_number
                item_data["notes"] = f"VIN: {self.vin}"  # –î—É–±–ª–∏—Ä—É–µ–º –≤ notes
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ: item_data["vin"] = self.vin
                log_message(f"üöó VIN –¥–æ–±–∞–≤–ª–µ–Ω –≤ serial_number –∏ notes: {self.vin}")
            
            log_message(f"üáµüá± PARKENTERTAINMENT: Track Serial Number=True, Bin Tracking=True, Category={category}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º tax_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if self.tax_id:
            item_data["tax_id"] = self.tax_id
            
        return item_data


def convert_currency_to_pln(amount: float, from_currency: str, document_date: str, organization_id: str) -> float:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—É –≤ PLN –∏—Å–ø–æ–ª—å–∑—É—è –∫—É—Ä—Å Zoho –Ω–∞ –¥–∞—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Args:
        amount: –°—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        from_currency: –ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ (EUR, USD)
        document_date: –î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞
        organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–∞
    
    Returns:
        –°—É–º–º–∞ –≤ PLN
    """
    if from_currency.upper() == "PLN":
        return amount
    
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –∏–∑ Zoho API
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫—É—Ä—Å—ã
        rates = {
            "EUR": 4.3,  # 1 EUR = 4.3 PLN (–ø—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å)
            "USD": 4.0,  # 1 USD = 4.0 PLN (–ø—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å)
        }
        
        rate = rates.get(from_currency.upper(), 1.0)
        converted = amount * rate
        
        log_message(f"üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {amount} {from_currency} ‚Üí {converted:.2f} PLN (–∫—É—Ä—Å: {rate})")
        return converted
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç: {e}")
        return amount  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º—É


class ZohoItemsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ Zoho Books"""
    
    def __init__(self):
        self.base_url = "https://www.zohoapis.eu/books/v3"
        self.tavie_org_id = "20092948714"  # TaVie Europe O√ú
        
    def get_tax_export_id(self, organization_id: Optional[str] = None) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ ID –Ω–∞–ª–æ–≥–∞ 'tax export' –∏–∑ Zoho Books
        
        Returns:
            ID –Ω–∞–ª–æ–≥–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not organization_id:
            organization_id = self.tavie_org_id
            
        try:
            access_token = get_access_token()
            if not access_token:
                return None
                
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ª–æ–≥–æ–≤
            taxes_url = f"{self.base_url}/settings/taxes"
            params = {'organization_id': organization_id}
            
            headers = {
                'Authorization': f'Zoho-oauthtoken {access_token}',
                'Content-Type': 'application/json'
            }
            
            response = requests.get(taxes_url, headers=headers, params=params)
            
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
            if response.status_code == 401:
                log_message("üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ª–æ–≥–æ–≤, –æ–±–Ω–æ–≤–ª—è—é...")
                from .zoho_api import get_access_token
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
                import functions.zoho_api as zoho_api
                zoho_api.ACCESS_TOKEN = None
                new_token = get_access_token()
                if new_token:
                    headers['Authorization'] = f'Zoho-oauthtoken {new_token}'
                    response = requests.get(taxes_url, headers=headers, params=params)
                    log_message(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞–ª–æ–≥–æ–≤: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                taxes = data.get('taxes', [])
                
                # –ò—â–µ–º –Ω–∞–ª–æ–≥ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "tax export" –∏–ª–∏ tax_percentage = 0
                for tax in taxes:
                    tax_name = tax.get('tax_name', '').lower()
                    tax_percentage = tax.get('tax_percentage', 0)
                    
                    if 'export' in tax_name or tax_percentage == 0:
                        tax_id = tax.get('tax_id')
                        log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω tax export: {tax.get('tax_name')} (ID: {tax_id})")
                        return tax_id
                        
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Å 0%
                for tax in taxes:
                    if tax.get('tax_percentage', 0) == 0:
                        tax_id = tax.get('tax_id')
                        log_message(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ª–æ–≥ 0%: {tax.get('tax_name')} (ID: {tax_id})")
                        return tax_id
                        
                log_message(f"‚ö†Ô∏è –ù–∞–ª–æ–≥ 'tax export' –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ª–æ–≥–∏:")
                for tax in taxes[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    log_message(f"   - {tax.get('tax_name')}: {tax.get('tax_percentage')}% (ID: {tax.get('tax_id')})")
                    
                return None
                
            else:
                log_message(f"ERROR: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ª–æ–≥–æ–≤: {response.status_code}")
                return None
                
        except Exception as e:
            log_message(f"ERROR: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ tax_id: {str(e)}")
            return None
            
    def get_all_items_sku(self, organization_id: Optional[str] = None) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö SKU –∏–∑ Zoho Books
        
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö SKU –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        """
        if not organization_id:
            organization_id = self.tavie_org_id
            
        try:
            access_token = get_access_token()
            if not access_token:
                log_message("ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token")
                return []
                
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
            items_url = f"{self.base_url}/items"
            params = {
                'organization_id': organization_id,
                'per_page': 200  # –ú–∞–∫—Å–∏–º—É–º –∑–∞ –∑–∞–ø—Ä–æ—Å
            }
            
            headers = {
                'Authorization': f'Zoho-oauthtoken {access_token}',
                'Content-Type': 'application/json'
            }
            
            all_skus = []
            page = 1
            
            while True:
                params['page'] = page
                log_message(f"üîç –ó–∞–≥—Ä—É–∂–∞—é ITEMS —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
                
                response = requests.get(items_url, headers=headers, params=params)
                
                if response.status_code == 200:
                    data = response.json()
                    items = data.get('items', [])
                    
                    if not items:
                        break  # –ë–æ–ª—å—à–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
                        
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º SKU
                    page_skus = [item.get('sku', '') for item in items if item.get('sku')]
                    all_skus.extend(page_skus)
                    
                    log_message(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –Ω–∞–π–¥–µ–Ω–æ {len(page_skus)} SKU")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    page_context = data.get('page_context', {})
                    if not page_context.get('has_more_page', False):
                        break
                        
                    page += 1
                    time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    
                else:
                    log_message(f"ERROR: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ITEMS: {response.status_code} - {response.text}")
                    break
                    
            log_message(f"‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ SKU: {len(all_skus)}")
            return all_skus
            
        except Exception as e:
            log_message(f"ERROR: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SKU: {str(e)}")
            return []
            
    def check_sku_exists(self, vin: str, organization_id: Optional[str] = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è VIN –∫–∞–∫ SKU –≤ Zoho
        
        Args:
            vin: VIN –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ SKU —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        if not organization_id:
            organization_id = self.tavie_org_id
            
        try:
            access_token = get_access_token()
            if not access_token:
                return False
                
            # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ SKU
            search_url = f"{self.base_url}/items"
            params = {
                'organization_id': organization_id,
                'sku': vin
            }
            
            headers = {
                'Authorization': f'Zoho-oauthtoken {access_token}',
                'Content-Type': 'application/json'
            }
            
            response = requests.get(search_url, headers=headers, params=params)
            
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
            if response.status_code == 401:
                log_message("üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SKU, –æ–±–Ω–æ–≤–ª—è—é...")
                from .zoho_api import get_access_token
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
                import functions.zoho_api as zoho_api
                zoho_api.ACCESS_TOKEN = None
                new_token = get_access_token()
                if new_token:
                    headers['Authorization'] = f'Zoho-oauthtoken {new_token}'
                    response = requests.get(search_url, headers=headers, params=params)
                    log_message(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å SKU: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get('items', [])
                
                for item in items:
                    if item.get('sku') == vin:
                        log_message(f"‚úÖ SKU {vin} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {item.get('name')}")
                        return True
                        
                log_message(f"üÜï SKU {vin} –Ω–µ –Ω–∞–π–¥–µ–Ω - –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å")
                return False
                
            else:
                log_message(f"ERROR: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ SKU: {response.status_code}")
                return False
                
        except Exception as e:
            log_message(f"ERROR: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SKU: {str(e)}")
            return False
            
    def create_car_item(self, car_data: CarItemData, organization_id: Optional[str] = None) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ Zoho Books
        
        Args:
            car_data: –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not organization_id:
            organization_id = self.tavie_org_id
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SKU –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if self.check_sku_exists(car_data.sku, organization_id):
                log_message(f"‚ùå ITEM —Å SKU {car_data.sku} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return None
                
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π tax_id –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            if not car_data.tax_id:
                tax_id = self.get_tax_export_id(organization_id)
                if tax_id:
                    car_data.tax_id = tax_id
                else:
                    log_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å tax_id, —Å–æ–∑–¥–∞–µ–º –±–µ–∑ –Ω–∞–ª–æ–≥–∞")
                
            access_token = get_access_token()
            if not access_token:
                log_message("ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token")
                return None
                
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
            create_url = f"{self.base_url}/items"
            params = {'organization_id': organization_id}
            
            headers = {
                'Authorization': f'Zoho-oauthtoken {access_token}',
                'Content-Type': 'application/json'
            }
            
            item_data = car_data.to_zoho_format(organization_id)
            log_message(f"üöó –°–æ–∑–¥–∞—é ITEM: {car_data.name} (SKU: {car_data.sku})")
            log_message(f"üìã DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π JSON –≤ Zoho: {item_data}")
            
            response = requests.post(create_url, headers=headers, params=params, json=item_data)
            
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
            if response.status_code == 401:
                log_message("üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è—é –∏ –ø–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å...")
                from .zoho_api import get_access_token
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
                import functions.zoho_api as zoho_api
                zoho_api.ACCESS_TOKEN = None
                new_token = get_access_token()
                if new_token:
                    headers['Authorization'] = f'Zoho-oauthtoken {new_token}'
                    response = requests.post(create_url, headers=headers, params=params, json=item_data)
                    log_message(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {response.status_code}")
                else:
                    log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")
            
            if response.status_code == 201:
                data = response.json()
                created_item = data.get('item', {})
                
                log_message(f"‚úÖ ITEM —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                log_message(f"   ID: {created_item.get('item_id')}")
                log_message(f"   Name: {created_item.get('name')}")
                log_message(f"   SKU: {created_item.get('sku')}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à SKU —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                try:
                    from .sku_cache_manager import SKUCacheManager
                    sku_manager = SKUCacheManager()
                    sku_manager.add_sku_to_cache(car_data.sku, organization_id)
                    log_message(f"‚úÖ SKU {car_data.sku} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à")
                except Exception as e:
                    log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à SKU: {str(e)}")
                
                return created_item
                
            else:
                log_message(f"ERROR: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ITEM: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            log_message(f"ERROR: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ITEM: {str(e)}")
            return None
    
    def get_item_by_sku(self, sku: str, organization_id: Optional[str] = None) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ SKU –∏–∑ Zoho Books
        
        Args:
            sku: SKU —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if not organization_id:
            organization_id = self.tavie_org_id
            
        try:
            access_token = get_access_token()
            if not access_token:
                log_message("ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token")
                return None
                
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ SKU
            search_url = f"{self.base_url}/items"
            params = {
                'organization_id': organization_id,
                'sku': sku
            }
            
            headers = {
                'Authorization': f'Zoho-oauthtoken {access_token}',
                'Content-Type': 'application/json'
            }
            
            response = requests.get(search_url, headers=headers, params=params)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get('items', [])
                
                if items:
                    found_item = items[0]  # –ü–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
                    log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω ITEM –ø–æ SKU {sku}: {found_item.get('name')}")
                    return found_item
                else:
                    log_message(f"‚ùå ITEM —Å SKU {sku} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return None
                    
            else:
                log_message(f"ERROR: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ ITEM: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            log_message(f"ERROR: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ ITEM: {str(e)}")
            return None
    
    def update_car_item(self, car_data: CarItemData, organization_id: Optional[str] = None) -> Optional[Dict[str, Any]]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ Zoho Books
        
        Args:
            car_data: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not organization_id:
            organization_id = self.tavie_org_id
            
        try:
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä –ø–æ SKU
            existing_item = self.get_item_by_sku(car_data.sku, organization_id)
            if not existing_item:
                log_message(f"‚ùå ITEM —Å SKU {car_data.sku} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
                return None
                
            item_id = existing_item.get('item_id')
            if not item_id:
                log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å item_id –¥–ª—è SKU {car_data.sku}")
                return None
                
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π tax_id –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
            if not car_data.tax_id:
                tax_id = self.get_tax_export_id(organization_id)
                if tax_id:
                    car_data.tax_id = tax_id
                else:
                    log_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å tax_id, –æ–±–Ω–æ–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ª–æ–≥–∞")
                
            access_token = get_access_token()
            if not access_token:
                log_message("ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token")
                return None
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
            update_url = f"{self.base_url}/items/{item_id}"
            params = {'organization_id': organization_id}
            
            headers = {
                'Authorization': f'Zoho-oauthtoken {access_token}',
                'Content-Type': 'application/json'
            }
            
            item_data = car_data.to_zoho_format(organization_id)
            log_message(f"üîÑ –û–±–Ω–æ–≤–ª—è—é ITEM: {car_data.name} (SKU: {car_data.sku})")
            
            response = requests.put(update_url, headers=headers, params=params, json=item_data)
            
            if response.status_code == 200:
                data = response.json()
                updated_item = data.get('item', {})
                
                log_message(f"‚úÖ ITEM –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                log_message(f"   ID: {updated_item.get('item_id')}")
                log_message(f"   Name: {updated_item.get('name')}")
                log_message(f"   SKU: {updated_item.get('sku')}")
                log_message(f"   New Rate: {updated_item.get('rate')}")
                
                return updated_item
                
            else:
                log_message(f"ERROR: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ITEM: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            log_message(f"ERROR: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ITEM: {str(e)}")
            return None
            
    def process_car_document(self, document_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ ITEM –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        
        Args:
            document_analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º/—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º ITEM
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
            if not document_analysis.get('is_car_related'):
                return {
                    'status': 'not_car',
                    'message': '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º'
                }
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            vin = document_analysis.get('vin') or document_analysis.get('item_sku')
            car_name = document_analysis.get('car_item_name')
            description = document_analysis.get('item_description') or document_analysis.get('item_details')
            cost_price = document_analysis.get('total_amount', 0)
            
            if not vin:
                return {
                    'status': 'error',
                    'message': 'VIN –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ'
                }
                
            if not car_name:
                return {
                    'status': 'error', 
                    'message': '–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                }
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ SKU
            if self.check_sku_exists(vin):
                return {
                    'status': 'exists',
                    'message': f'ITEM —Å VIN {vin} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Zoho',
                    'vin': vin,
                    'car_name': car_name
                }
                
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ITEM
            selling_price = document_analysis.get('selling_price', float(cost_price) if cost_price else 0.0)
            
            car_data = CarItemData(
                name=car_name,
                sku=vin,
                description=description or f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {car_name}",
                cost_price=float(cost_price) if cost_price else 0.0,
                selling_price=float(selling_price)
            )
            
            created_item = self.create_car_item(car_data)
            
            if created_item:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à SKU
                try:
                    from .sku_cache_manager import SKUCacheManager
                    sku_manager = SKUCacheManager()
                    sku_manager.add_sku_to_cache(vin, self.tavie_org_id)
                    log_message(f"‚úÖ SKU {vin} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à")
                except Exception as e:
                    log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à SKU: {str(e)}")
                
                return {
                    'status': 'created',
                    'message': f'ITEM —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ Zoho',
                    'item_id': created_item.get('item_id'),
                    'item_name': created_item.get('name'),
                    'vin': vin,
                    'cost_price': cost_price
                }
            else:
                return {
                    'status': 'error',
                    'message': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ITEM –≤ Zoho'
                }
                
        except Exception as e:
            log_message(f"ERROR: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}'
            }


def create_car_item_from_document(document_analysis: Dict[str, Any]) -> Dict[str, Any]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ITEM –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Args:
        document_analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è ITEM
    """
    manager = ZohoItemsManager()
    return manager.process_car_document(document_analysis)


def update_car_item_from_document(document_analysis: Dict[str, Any]) -> Dict[str, Any]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ITEM –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Args:
        document_analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å selling_price)
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ITEM
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        if not document_analysis.get('is_car_related'):
            return {
                'status': 'error',
                'message': '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º'
            }
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        vin = document_analysis.get('vin') or document_analysis.get('item_sku')
        car_name = document_analysis.get('car_item_name')
        description = document_analysis.get('item_description') or document_analysis.get('item_details')
        cost_price = document_analysis.get('total_amount', 0)
        selling_price = document_analysis.get('selling_price')
        
        if not vin:
            return {
                'status': 'error',
                'message': 'VIN –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ'
            }
            
        if not car_name:
            return {
                'status': 'error', 
                'message': '–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
            }
            
        if not selling_price:
            return {
                'status': 'error',
                'message': '–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            }
            
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        car_data = CarItemData(
            name=car_name,
            sku=vin,
            description=description or f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {car_name}",
            cost_price=float(cost_price) if cost_price else 0.0,
            selling_price=float(selling_price),
            unit="pcs"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º ITEM —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = ZohoItemsManager()
        updated_item = manager.update_car_item(car_data)
        
        if updated_item:
            return {
                'status': 'success',
                'message': f'ITEM {car_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
                'item_id': updated_item.get('item_id'),
                'name': updated_item.get('name'),
                'sku': updated_item.get('sku'),
                'cost_price': updated_item.get('purchase_rate', 0),
                'selling_price': updated_item.get('rate', selling_price)
            }
        else:
            return {
                'status': 'error',
                'message': f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ITEM –¥–ª—è VIN {vin}'
            }
            
    except Exception as e:
        return {
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ITEM: {str(e)}'
        }


if __name__ == "__main__":
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è SKU
    manager = ZohoItemsManager()
    
    print("üîç –ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ SKU –∏–∑ TaVie Europe...")
    skus = manager.get_all_items_sku()
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ SKU: {len(skus)}")
    
    if skus:
        print("üìã –ü–µ—Ä–≤—ã–µ 10 SKU:")
        for i, sku in enumerate(skus[:10]):
            print(f"   {i+1}. {sku}")
            
    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ VIN
    test_vin = "W1V44781313926375"
    exists = manager.check_sku_exists(test_vin)
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ VIN {test_vin}: {'‚ùå –°—É—â–µ—Å—Ç–≤—É–µ—Ç' if exists else '‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω'}") 