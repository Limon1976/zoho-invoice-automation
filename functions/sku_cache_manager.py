"""
SKU Cache Manager
=================

–ë—ã—Å—Ç—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è SKU –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –±–µ–∑ API –∑–∞–ø—Ä–æ—Å–æ–≤.
"""
import json
import os
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from pathlib import Path


class SKUCacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ SKU"""
    
    def __init__(self, cache_dir: str = "data/sku_cache"):
        self.cache_dir = Path(cache_dir)
        self.cache_dir.mkdir(parents=True, exist_ok=True)
        self.tavie_cache_file = self.cache_dir / "tavie_europe_skus.json"
        
    def load_sku_cache(self, organization_id: str = "20092948714") -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ SKU –∏–∑ —Ñ–∞–π–ª–∞
        
        Args:
            organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –∫—ç—à–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π –∫—ç—à
        """
        if organization_id == "20092948714":
            cache_file = self.tavie_cache_file
        else:
            cache_file = self.cache_dir / f"{organization_id}_skus.json"
            
        if cache_file.exists():
            try:
                with open(cache_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ SKU: {e}")
                
        return self._empty_cache(organization_id)
        
    def _empty_cache(self, organization_id: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –∫—ç—à–∞"""
        org_names = {
            "20092948714": "TaVie Europe O√ú",
            "20082562863": "PARKENTERTAINMENT"
        }
        
        return {
            "organization_id": organization_id,
            "organization_name": org_names.get(organization_id, "Unknown"),
            "total_skus": 0,
            "last_updated": None,
            "skus": []
        }
        
    def save_sku_cache(self, sku_data: Dict[str, Any], organization_id: str = "20092948714"):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ SKU –≤ —Ñ–∞–π–ª
        
        Args:
            sku_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        """
        if organization_id == "20092948714":
            cache_file = self.tavie_cache_file
        else:
            cache_file = self.cache_dir / f"{organization_id}_skus.json"
            
        try:
            with open(cache_file, 'w', encoding='utf-8') as f:
                json.dump(sku_data, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ –ö—ç—à SKU —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {cache_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ SKU: {e}")
            
    def is_sku_cached(self, vin: str, organization_id: str = "20092948714") -> bool:
        """
        –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SKU –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
        
        Args:
            vin: VIN –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ SKU –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ
        """
        cache_data = self.load_sku_cache(organization_id)
        skus = cache_data.get('skus', [])
        return vin in skus
        
    def add_sku_to_cache(self, vin: str, organization_id: str = "20092948714"):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ SKU –≤ –∫—ç—à
        
        Args:
            vin: VIN –Ω–æ–º–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        """
        cache_data = self.load_sku_cache(organization_id)
        
        if vin not in cache_data['skus']:
            cache_data['skus'].append(vin)
            cache_data['total_skus'] = len(cache_data['skus'])
            cache_data['last_updated'] = datetime.now().isoformat()
            
            self.save_sku_cache(cache_data, organization_id)
            print(f"‚úÖ SKU {vin} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—ç—à")
        else:
            print(f"‚ÑπÔ∏è SKU {vin} —É–∂–µ –≤ –∫—ç—à–µ")
            
    def is_cache_fresh(self, organization_id: str = "20092948714", max_age_hours: int = 24) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
        
        Args:
            organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            max_age_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞ –≤ —á–∞—Å–∞—Ö
            
        Returns:
            True –µ—Å–ª–∏ –∫—ç—à —Å–≤–µ–∂–∏–π
        """
        cache_data = self.load_sku_cache(organization_id)
        last_updated = cache_data.get('last_updated')
        
        if not last_updated:
            return False
            
        try:
            updated_time = datetime.fromisoformat(last_updated)
            now = datetime.now()
            age = now - updated_time
            
            return age < timedelta(hours=max_age_hours)
        except Exception:
            return False
            
    def get_cache_stats(self, organization_id: str = "20092948714") -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
        
        Args:
            organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        """
        cache_data = self.load_sku_cache(organization_id)
        
        stats = {
            "organization_name": cache_data.get('organization_name'),
            "total_skus": cache_data.get('total_skus', 0),
            "last_updated": cache_data.get('last_updated'),
            "is_fresh": self.is_cache_fresh(organization_id),
            "cache_age_hours": None
        }
        
        if cache_data.get('last_updated'):
            try:
                updated_time = datetime.fromisoformat(cache_data['last_updated'])
                age = datetime.now() - updated_time
                stats["cache_age_hours"] = round(age.total_seconds() / 3600, 2)
            except Exception:
                pass
                
        return stats
        
    def refresh_cache_from_api(self, organization_id: str = "20092948714") -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∏–∑ Zoho API
        
        Args:
            organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            from zoho_items_manager import ZohoItemsManager
            
            manager = ZohoItemsManager()
            print(f"üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—ç—à SKU –¥–ª—è {organization_id}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ SKU –∏–∑ API
            skus = manager.get_all_items_sku(organization_id)
            
            if skus:
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫—ç—à–∞
                org_names = {
                    "20092948714": "TaVie Europe O√ú",
                    "20082562863": "PARKENTERTAINMENT"
                }
                
                sku_cache = {
                    'organization_id': organization_id,
                    'organization_name': org_names.get(organization_id, "Unknown"),
                    'total_skus': len(skus),
                    'last_updated': datetime.now().isoformat(),
                    'skus': skus
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                self.save_sku_cache(sku_cache, organization_id)
                print(f"‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω: {len(skus)} SKU")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SKU –∏–∑ API")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
            return False


def quick_sku_check(vin: str, organization_id: str = "20092948714") -> Dict[str, Any]:
    """
    –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SKU —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫—ç—à–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    Args:
        vin: VIN –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    manager = SKUCacheManager()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞
    if not manager.is_cache_fresh(organization_id):
        print("‚ö†Ô∏è –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è—é...")
        manager.refresh_cache_from_api(organization_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SKU
    exists = manager.is_sku_cached(vin, organization_id)
    stats = manager.get_cache_stats(organization_id)
    
    return {
        "vin": vin,
        "exists": exists,
        "organization_id": organization_id,
        "organization_name": stats["organization_name"],
        "cache_stats": stats,
        "recommendation": "create" if not exists else "update_item"
    }


if __name__ == "__main__":
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    manager = SKUCacheManager()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    stats = manager.get_cache_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ TaVie Europe:")
    print(f"   SKU: {stats['total_skus']}")
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω: {stats['last_updated']}")
    print(f"   –°–≤–µ–∂–∏–π: {'‚úÖ' if stats['is_fresh'] else '‚ùå'}")
    if stats['cache_age_hours']:
        print(f"   –í–æ–∑—Ä–∞—Å—Ç: {stats['cache_age_hours']} —á–∞—Å–æ–≤")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ VIN
    test_vin = "W1V44781313926375"
    result = quick_sku_check(test_vin)
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ VIN {test_vin}:")
    print(f"   –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚ùå –î–∞' if result['exists'] else '‚úÖ –ù–µ—Ç'}")
    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result['recommendation']}") 