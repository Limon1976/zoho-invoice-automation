"""
WorkDrive Batch Processor
–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≤–æ–π—Å–æ–≤ –∏–∑ Zoho WorkDrive —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º Bills –∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""

import os
import sys
import json
import asyncio
import logging
from datetime import datetime, date, timedelta
from typing import List, Dict, Optional, Tuple
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from functions.zoho_workdrive import ZohoWorkDriveAPI, get_workdrive_access_token
from functions.agent_invoice_parser import analyze_proforma_via_agent
from functions.zoho_api import bill_exists_smart, create_bill, find_supplier_in_zoho
from functions.contact_creator import create_supplier_from_document
from functions.universal_document_processor import process_document_universal
# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –Ω–∏–∂–µ
from dotenv import load_dotenv


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–ê–°–¢–†–û–ô–ö–ê –î–ï–¢–ê–õ–¨–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
class WorkDriveLogger:
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ WorkDrive –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self):
        self.logger = logging.getLogger('workdrive_batch')
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ WorkDrive
        os.makedirs('logs', exist_ok=True)
        handler = logging.FileHandler('logs/workdrive_batch.log', encoding='utf-8')
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        
        if not self.logger.handlers:
            self.logger.addHandler(handler)
            self.logger.setLevel(logging.INFO)
    
    def step(self, step_num: int, description: str, **kwargs):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —à–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        msg = f"üîÑ –®–ê–ì {step_num}: {description}"
        if kwargs:
            details = ", ".join(f"{k}={v}" for k, v in kwargs.items())
            msg += f" | {details}"
        self.logger.info(msg)
        print(msg)  # –î—É–±–ª–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    
    def success(self, operation: str, **kwargs):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
        msg = f"‚úÖ –£–°–ü–ï–•: {operation}"
        if kwargs:
            details = ", ".join(f"{k}={v}" for k, v in kwargs.items())
            msg += f" | {details}"
        self.logger.info(msg)
        print(msg)
    
    def error(self, operation: str, error: str, **kwargs):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É"""
        msg = f"‚ùå –û–®–ò–ë–ö–ê: {operation} | {error}"
        if kwargs:
            details = ", ".join(f"{k}={v}" for k, v in kwargs.items())
            msg += f" | {details}"
        self.logger.error(msg)
        print(msg)
    
    def warning(self, operation: str, warning: str, **kwargs):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        msg = f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {operation} | {warning}"
        if kwargs:
            details = ", ".join(f"{k}={v}" for k, v in kwargs.items())
            msg += f" | {details}"
        self.logger.warning(msg)
        print(msg)

logger = logging.getLogger(__name__)

async def send_message_to_admin(message: str, parse_mode: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ Telegram"""
    try:
        import requests
        
        bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        admin_id = os.getenv("ADMIN_ID")
        
        if not bot_token or not admin_id:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ ADMIN_ID –≤ .env")
            return
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            "chat_id": admin_id,
            "text": message
        }
        
        if parse_mode:
            data["parse_mode"] = parse_mode
        
        response = requests.post(url, json=data)
        if response.status_code == 200:
            logger.info("üì± –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code} - {response.text}")
            
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

class WorkDriveBatchProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–≤–æ–π—Å–æ–≤ –∏–∑ WorkDrive"""
    
    def __init__(self):
        self.workdrive = ZohoWorkDriveAPI()
        self.admin_id = os.getenv("ADMIN_ID")
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        
        # –ü–∞–ø–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.download_dir = "data/workdrive_batch"
        self.processed_log = "data/workdrive_processed.json"
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        os.makedirs(self.download_dir, exist_ok=True)
        os.makedirs(os.path.dirname(self.processed_log), exist_ok=True)
        
        # –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–ï–¢–ê–õ–¨–ù–û–ì–û –õ–û–ì–ì–ï–†–ê
        self.workdrive_logger = WorkDriveLogger()
    
    def get_processed_files(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            if os.path.exists(self.processed_log):
                with open(self.processed_log, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
        return {}
    
    def mark_file_processed(self, file_id: str, file_name: str, bill_id: str = None, error: str = None):
        """–û—Ç–º–µ—á–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"""
        try:
            processed = self.get_processed_files()
            processed[file_id] = {
                "file_name": file_name,
                "processed_at": datetime.now().isoformat(),
                "bill_id": bill_id,
                "status": "success" if bill_id else "error",
                "error": error
            }
            
            with open(self.processed_log, 'w', encoding='utf-8') as f:
                json.dump(processed, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    def get_files_for_date(self, target_date: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç PDF —Ñ–∞–π–ª—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ"""
        logger.info(f"üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –∑–∞ {target_date}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ –¥–∞—Ç—É
        all_files = self.workdrive.get_processable_files_by_date(target_date)
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        processed = self.get_processed_files()
        new_files = []
        
        for file in all_files:
            file_id = file.get('id')
            if file_id not in processed:
                new_files.append(file)
                logger.info(f"üìÑ –ù–æ–≤—ã–π —Ñ–∞–π–ª: {file.get('name')}")
            elif processed[file_id].get('status') == 'error':
                new_files.append(file)
                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å –æ—à–∏–±–∫–æ–π: {file.get('name')}")
            else:
                logger.info(f"‚è≠Ô∏è –§–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {file.get('name')}")
        
        logger.info(f"üìä –§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(new_files)}/{len(all_files)} (–Ω–æ–≤—ã–µ + —Å –æ—à–∏–±–∫–∞–º–∏)")
        return new_files
    
    async def process_single_file(self, file: Dict) -> Dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞"""
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ ‚Üí LLM –∞–Ω–∞–ª–∏–∑ ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ Bill"""
        file_id = file.get('id')
        file_name = file.get('name', f'file_{file_id}.pdf')
        
        self.workdrive_logger.step(1, "–ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò", file_name=file_name, file_id=file_id)
        
        result = {
            'file_id': file_id,
            'file_name': file_name,
            'success': False,
            'bill_id': None,
            'bill_number': None,
            'error': None,
            'supplier_name': None,
            'org_id': None
        }
        
        try:
            self.workdrive_logger.step(2, "–°–ö–ê–ß–ò–í–ê–ù–ò–ï –§–ê–ô–õ–ê", file_name=file_name)
            
            # 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            local_path = os.path.join(self.download_dir, file_name)
            download_success = self.workdrive.download_file(file_id, local_path, file_name)
            
            if not download_success:
                self.workdrive_logger.error("–°–ö–ê–ß–ò–í–ê–ù–ò–ï –§–ê–ô–õ–ê", "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", file_name=file_name)
                result['error'] = "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"
                return result
            
            file_size_mb = os.path.getsize(local_path) / (1024*1024)
            self.workdrive_logger.success("–§–ê–ô–õ –°–ö–ê–ß–ê–ù", file_path=local_path, size_mb=f"{file_size_mb:.1f}")
            
            # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ LLM pipeline
            self.workdrive_logger.step(3, "LLM –ê–ù–ê–õ–ò–ó", file_name=file_name, file_type="image" if file_name.lower().endswith(('.jpeg', '.jpg', '.png', '.tiff')) else "pdf")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
            if file_name.lower().endswith(('.jpeg', '.jpg', '.png', '.tiff')):
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                self.workdrive_logger.step(4, "–ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø IMAGE‚ÜíPDF", file_name=file_name)
                pdf_path = await self._convert_image_to_pdf(local_path, file_name)
                self.workdrive_logger.success("PDF –°–û–ó–î–ê–ù", pdf_path=pdf_path)
                
                analysis = analyze_proforma_via_agent(pdf_path)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º PDF –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                local_path = pdf_path
            else:
                # PDF —Ñ–∞–π–ª - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                analysis = analyze_proforma_via_agent(local_path)
            
            # –î–æ–±–∞–≤–ª—è–µ–º original_filename –¥–ª—è perfect parser
            if analysis:
                analysis['original_filename'] = file_name
            
            if not analysis or 'error' in analysis:
                self.workdrive_logger.error("LLM –ê–ù–ê–õ–ò–ó", f"–û—à–∏–±–∫–∞: {analysis.get('error', 'Unknown error')}", file_name=file_name)
                result['error'] = f"–û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞: {analysis.get('error', 'Unknown error')}"
                return result
            
            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Bill
            supplier_name = analysis.get('supplier_name', '')
            result['supplier_name'] = supplier_name
            
            # –î–ï–¢–ê–õ–¨–ù–´–ô –õ–û–ì –†–ï–ó–£–õ–¨–¢–ê–¢–û–í LLM –ê–ù–ê–õ–ò–ó–ê
            self.workdrive_logger.success("LLM –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù", 
                supplier_name=supplier_name, 
                supplier_vat=analysis.get('supplier_vat', ''),
                bill_number=analysis.get('bill_number', ''),
                total_amount=analysis.get('total_amount', 0))
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—è –¥–ª—è item_details
            available_descriptions = []
            if analysis.get('line_items'):
                line_items = analysis.get('line_items', [])
                if line_items:
                    first_desc = line_items[0].get('description', '')
                    available_descriptions.append(f"line_items[0]: '{first_desc[:50]}...'")
            
            for field in ['item_details', 'service_description', 'description']:
                value = analysis.get(field)
                if value:
                    available_descriptions.append(f"{field}: '{str(value)[:50]}...'")
            
            self.workdrive_logger.success("–î–û–°–¢–£–ü–ù–´–ï –û–ü–ò–°–ê–ù–ò–Ø", 
                count=len(available_descriptions),
                descriptions=available_descriptions[:3])
            
            # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–∫–∞–∫ –≤ telegram bot)
            org_id = self.determine_organization(analysis)
            result['org_id'] = org_id
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            bill_number = analysis.get('bill_number') or analysis.get('invoice_number', '')
            document_date = analysis.get('invoice_date') or analysis.get('document_date', '')
            
            self.workdrive_logger.step(5, "–ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í", bill_number=bill_number, vendor_name=supplier_name)
            
            existing_bill = bill_exists_smart(
                org_id=org_id,
                bill_number=bill_number,
                vendor_name=supplier_name,
                document_date=document_date
            )
            
            if existing_bill:
                # üîÑ –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –µ—Å–ª–∏ Bill –µ—Å—Ç—å –≤ Zoho –Ω–æ —Ñ–∞–π–ª –≤ WorkDrive –Ω–µ Final
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Bill: {existing_bill.get('bill_id')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –≤ WorkDrive
                file_status = self.workdrive.check_file_final_status(file_id)
                
                if not file_status.get('is_final'):
                    logger.info(f"üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: Bill –µ—Å—Ç—å –≤ Zoho, –Ω–æ —Ñ–∞–π–ª –≤ WorkDrive –Ω–µ Final - –ø–æ–º–µ—á–∞–µ–º")
                    
                    mark_success = self.workdrive.mark_file_as_final(
                        file_id,
                        existing_bill.get('bill_number', bill_number),
                        existing_bill.get('bill_id')
                    )
                    
                    if mark_success:
                        result['success'] = True
                        result['bill_id'] = existing_bill.get('bill_id')
                        result['bill_number'] = existing_bill.get('bill_number', bill_number)
                        result['sync_action'] = 'marked_as_final'
                        
                        logger.info(f"‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –§–∞–π–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ Final (Bill —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª)")
                        
                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                        await self.send_sync_notification(result, analysis, existing_bill)
                        return result
                
                result['error'] = f"–î—É–±–ª–∏–∫–∞—Ç: Bill {existing_bill.get('bill_number')} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                result['bill_id'] = existing_bill.get('bill_id')
                return result
            
            # 6. –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê —á–µ—Ä–µ–∑ –æ–±—â–∏–π —Å–µ—Ä–≤–∏—Å
            self.workdrive_logger.step(6, "–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê", supplier_name=supplier_name, org_id=org_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º file_path –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            analysis['file_path'] = local_path
            
            universal_result = await process_document_universal(analysis, org_id)
            
            if universal_result.get('success'):
                self.workdrive_logger.success("–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê", 
                    bill_id=universal_result.get('bill_id'),
                    bill_number=universal_result.get('bill_number'))
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result['success'] = True
                result['bill_id'] = universal_result.get('bill_id')
                result['bill_number'] = universal_result.get('bill_number')
                
                # –ü–æ–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ Final
                try:
                    mark_success = self.workdrive.mark_file_as_final(
                        file_id, 
                        result['bill_number'], 
                        result['bill_id']
                    )
                    
                    if mark_success:
                        self.workdrive_logger.success("MARK AS FINAL")
                        
                        # –û–¢–ü–†–ê–í–õ–Ø–ï–ú TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
                        await self.send_success_notification(result, analysis, mark_final_success=True)
                    
                except Exception as mark_e:
                    self.workdrive_logger.warning("MARK AS FINAL", f"–û—à–∏–±–∫–∞: {mark_e}")
                
                return result
            else:
                self.workdrive_logger.error("–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê", universal_result.get('error', 'Unknown error'))
                result['error'] = universal_result.get('error')
                return result
            
            if not supplier:
                self.workdrive_logger.step(7, "–°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ü–û–°–¢–ê–í–©–ò–ö–ê", supplier_name=supplier_name, supplier_vat=supplier_vat)
                
                # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ Zoho –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
                try:
                    from functions.zoho_api import get_contact_details
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
                    contact_payload = {
                        "contact_name": supplier_name,
                        "company_name": supplier_name,
                        "contact_type": "vendor",
                        "custom_fields": []
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º VAT –µ—Å–ª–∏ –µ—Å—Ç—å
                    if supplier_vat:
                        vat_field = "cf_tax_id" if org_id == "20082562863" else "cf_vat_id"
                        contact_payload["custom_fields"].append({
                            "api_name": vat_field,
                            "value": supplier_vat
                        })
                        self.workdrive_logger.success("VAT –î–û–ë–ê–í–õ–ï–ù", vat_field=vat_field, vat_value=supplier_vat)
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Zoho API
                    from config.zoho_auth import get_access_token
                    import requests
                    
                    access_token = get_access_token()
                    headers = {"Authorization": f"Zoho-oauthtoken {access_token}"}
                    url = f"https://www.zohoapis.eu/books/v3/contacts?organization_id={org_id}"
                    
                    response = requests.post(url, json=contact_payload, headers=headers)
                    
                    if response.status_code == 201:
                        created_contact = response.json().get('contact', {})
                        contact_id = created_contact.get('contact_id')
                        
                        supplier = {
                            'contact_id': contact_id,
                            'contact_name': supplier_name,
                            'vat_number': supplier_vat
                        }
                        
                        self.workdrive_logger.success("–ù–û–í–´–ô –ö–û–ù–¢–ê–ö–¢ –°–û–ó–î–ê–ù", 
                            contact_id=contact_id, 
                            supplier_name=supplier_name,
                            org_id=org_id)
                    else:
                        error_data = response.json() if response.content else {'error': 'Unknown error'}
                        self.workdrive_logger.error("–°–û–ó–î–ê–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê", f"Zoho API –æ—à–∏–±–∫–∞: {error_data}", supplier_name=supplier_name)
                        result['error'] = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: {error_data}"
                        return result
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
                    logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...")
                    try:
                        import sys
                        from pathlib import Path
                        sys.path.append(str(Path(__file__).parent.parent))
                        from src.domain.services.contact_cache import OptimizedContactCache
                        from functions.zoho_api import get_contact_by_name
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ VAT (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ —á–µ–º –ø–æ –∏–º–µ–Ω–∏)
                        fresh_contact = None
                        if supplier_vat:
                            from functions.zoho_api import get_contact_by_vat
                            fresh_contact = get_contact_by_vat(supplier_vat, org_id)
                        
                        # Fallback: –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
                        if not fresh_contact:
                            fresh_contact = get_contact_by_name(supplier_name, org_id)
                            
                        if fresh_contact:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –∫—ç—à–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                            if org_id == "20082562863":  # PARKENTERTAINMENT
                                cache_file = "data/optimized_cache/PARKENTERTAINMENT_optimized.json"
                            elif org_id == "772348639":  # TaVie Europe
                                cache_file = "data/optimized_cache/TAVIE_EUROPE_optimized.json"
                            else:
                                cache_file = "data/optimized_cache/all_contacts_optimized.json"
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                            cache = OptimizedContactCache(cache_file)
                            cache.upsert_contact_from_zoho(fresh_contact)
                            cache.save_cache()
                            logger.info("‚úÖ –ö—ç—à –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
                        else:
                            logger.warning("‚ö†Ô∏è –°–≤–µ–∂–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞")
                    except Exception as cache_e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à: {cache_e}")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π fresh_contact –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—â–µ–º
                    if fresh_contact:
                        supplier = fresh_contact
                        logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {fresh_contact.get('contact_name')} (ID: {fresh_contact.get('contact_id')})")
                    else:
                        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º VAT
                        supplier = find_supplier_in_zoho(
                            org_id=org_id,
                            supplier_name=supplier_name,
                            supplier_vat=supplier_vat  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                        )
                    
                    # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º contact_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ContactCreator
                    if not supplier and 'message' in locals():
                        self.workdrive_logger.step(8, "–ò–ó–í–õ–ï–ß–ï–ù–ò–ï CONTACT_ID –ò–ó –°–û–û–ë–©–ï–ù–ò–Ø", message=message)
                        
                        # –ò—â–µ–º ID –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ContactCreator
                        import re
                        contact_id_match = re.search(r'ID:\s*([0-9]+)', message)
                        if contact_id_match:
                            contact_id = contact_id_match.group(1)
                            
                            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º ID
                            supplier = {
                                'contact_id': contact_id,
                                'contact_name': supplier_name,
                                'vat_number': supplier_vat
                            }
                            self.workdrive_logger.success("CONTACT_ID –ò–ó–í–õ–ï–ß–ï–ù", contact_id=contact_id, supplier_name=supplier_name)
                        else:
                            self.workdrive_logger.error("–ò–ó–í–õ–ï–ß–ï–ù–ò–ï CONTACT_ID", "ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏", message=message)
                    
                    # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
                    if not supplier:
                        self.workdrive_logger.warning("FALLBACK –ü–û–°–¢–ê–í–©–ò–ö", "–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                        supplier = {
                            'contact_id': None,
                            'contact_name': supplier_name,
                            'vat_number': supplier_vat
                        }
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ Bill –µ—Å–ª–∏ –Ω–µ—Ç contact_id
                        result['error'] = f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_name}"
                        return result
                        
                except Exception as e:
                    logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}")
                    result['error'] = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(e)}"
                    return result
            
            # 6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (Bill –∏–ª–∏ Expense)
            document_action = self.determine_document_action(analysis)
            
            if document_action == 'EXPENSE':
                # –°–æ–∑–¥–∞–µ–º Expense –¥–ª—è –ø–∞—Ä–∞–≥–æ–Ω–æ–≤ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö
                logger.info(f"üí≥ –°–æ–∑–¥–∞–Ω–∏–µ Expense –≤ Zoho –¥–ª—è: {supplier_name}")
                expense_response = await self.create_expense_from_analysis(analysis, supplier, org_id, local_path)
                
                if 'error' in expense_response:
                    result['error'] = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Expense: {expense_response['error']}"
                    return result
                
                expense = expense_response.get('expense', {})
                result['bill_id'] = expense.get('expense_id')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º expense_id –∫–∞–∫ bill_id
                result['bill_number'] = expense.get('expense_number')
                
                # ExpenseService —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
                logger.info(f"üìé –§–∞–π–ª —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ Expense —á–µ—Ä–µ–∑ ExpenseService")
                
            else:
                # –°–æ–∑–¥–∞–µ–º Bill –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤
                self.workdrive_logger.step(9, "–°–û–ó–î–ê–ù–ò–ï BILL PAYLOAD", supplier_name=supplier_name, org_id=org_id)
                bill_payload = self.create_bill_payload(analysis, supplier, org_id, local_path)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã payload
                line_items = bill_payload.get('line_items', [])
                vendor_id = bill_payload.get('vendor_id')
                total_amount = sum(float(item.get('rate', 0)) * float(item.get('quantity', 0)) for item in line_items)
                
                self.workdrive_logger.success("BILL PAYLOAD –°–û–ó–î–ê–ù", 
                    vendor_id=vendor_id, 
                    line_items_count=len(line_items),
                    total_amount=f"{total_amount:.2f}")
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –ø–µ—Ä–≤–æ–≥–æ line_item –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if line_items:
                    first_item = line_items[0]
                    self.workdrive_logger.success("–ü–ï–†–í–´–ô LINE_ITEM", 
                        description=first_item.get('description', ''),
                        account_id=first_item.get('account_id', ''),
                        rate=first_item.get('rate', 0))
                
                self.workdrive_logger.step(10, "–û–¢–ü–†–ê–í–ö–ê –í ZOHO", bill_number=bill_number)
                bill_response = create_bill(org_id, bill_payload)
                
                if 'error' in bill_response:
                    error_msg = bill_response['error']
                    self.workdrive_logger.error("–°–û–ó–î–ê–ù–ò–ï BILL", f"Zoho API –æ—à–∏–±–∫–∞: {error_msg}", bill_number=bill_number)
                    
                    # üîÑ –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–ö–ò –î–£–ë–õ–ò–ö–ê–¢–ê (13011) - –ê–ö–¢–ò–í–ò–†–£–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Æ
                    if ('13011' in str(error_msg) or 'already been created' in str(error_msg)):
                        logger.info(f"üîÑ –û—à–∏–±–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ - –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Bill –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                        
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Bill
                        from functions.zoho_api import get_bills, get_bill_details
                        
                        try:
                            # –ò—â–µ–º Bill –ø–æ –Ω–æ–º–µ—Ä—É —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
                            found_bill = None
                            
                            # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ bill_exists_smart
                            try:
                                existing = bill_exists_smart(org_id, bill_number, None, supplier_name, document_date)
                                if existing:
                                    found_bill = existing
                                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ bill_exists_smart: {existing.get('bill_id')}")
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è bill_exists_smart –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                            
                            # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –ø–æ –º–µ—Å—è—Ü–∞–º –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                            if not found_bill:
                                current_year = datetime.now().year
                                for month in [8, 7, 9]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–≥—É—Å—Ç, –∏—é–ª—å, —Å–µ–Ω—Ç—è–±—Ä—å
                                    try:
                                        bills = get_bills(org_id, current_year, month)
                                        for bill_num, bill_id_found, _, _ in bills:
                                            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤
                                            if (bill_number.strip() in bill_num or 
                                                bill_num in bill_number.strip() or
                                                bill_number.replace('/', '-') == bill_num.replace('/', '-')):
                                                found_bill = get_bill_details(org_id, bill_id_found)
                                                if found_bill:
                                                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –º–µ—Å—è—á–Ω—ã–π –ø–æ–∏—Å–∫ ({month}): {bill_id_found}")
                                                    break
                                        if found_bill:
                                            break
                                    except Exception as e:
                                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –º–µ—Å—è—Ü–µ {month}: {e}")
                            
                            if found_bill:
                                logger.info(f"üîç –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Bill –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {found_bill.get('bill_id')}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –≤ WorkDrive
                                file_status = self.workdrive.check_file_final_status(file_id)
                                
                                if not file_status.get('is_final'):
                                    logger.info(f"üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –ü–æ–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ Final")
                                    
                                    mark_success = self.workdrive.mark_file_as_final(
                                        file_id,
                                        found_bill.get('bill_number', bill_number),
                                        found_bill.get('bill_id')
                                    )
                                    
                                    if mark_success:
                                        result['success'] = True
                                        result['bill_id'] = found_bill.get('bill_id')
                                        result['bill_number'] = found_bill.get('bill_number', bill_number)
                                        result['sync_action'] = 'duplicate_error_sync'
                                        
                                        logger.info(f"‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –§–∞–π–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ Final (–Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –æ—à–∏–±–∫—É –¥—É–±–ª–∏–∫–∞—Ç–∞)")
                                        
                                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                                        await self.send_sync_notification(result, analysis, found_bill)
                                        return result
                                else:
                                    logger.info(f"‚ÑπÔ∏è –§–∞–π–ª —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ Final, –¥—É–±–ª–∏–∫–∞—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
                                    result['success'] = True
                                    result['bill_id'] = found_bill.get('bill_id')
                                    result['bill_number'] = found_bill.get('bill_number', bill_number)
                                    result['sync_action'] = 'already_final'
                                    
                                    # üì± –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è already_final
                                    await self.send_sync_notification(result, analysis, found_bill)
                                    return result
                                    
                        except Exception as sync_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–µ: {sync_error}")
                    
                    result['error'] = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Bill: {error_msg}"
                    return result
                
                bill = bill_response.get('bill', {})
                result['bill_id'] = bill.get('bill_id')
                result['bill_number'] = bill.get('bill_number')
                
                # üè∑Ô∏è –ù–û–í–û–ï: –ü–æ–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ Final –≤ WorkDrive –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è Bill
                logger.info(f"üè∑Ô∏è –ü–æ–º–µ—á–∞–µ–º —Ñ–∞–π–ª {file_id} –∫–∞–∫ Final –≤ WorkDrive...")
                mark_success = self.workdrive.mark_file_as_final(
                    file_id, 
                    result['bill_number'], 
                    result['bill_id']
                )
                
                if mark_success:
                    logger.info(f"‚úÖ –§–∞–π–ª {file_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ Final –≤ WorkDrive")
                    result['marked_as_final'] = True
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å —Ñ–∞–π–ª {file_id} –∫–∞–∫ Final –≤ WorkDrive")
                    result['marked_as_final'] = False
                
                # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª –∫ Bill —á–µ—Ä–µ–∑ AttachmentManager
                try:
                    from telegram_bot.services.attachment_manager import AttachmentManager
                    from functions.zoho_api import get_access_token
                    
                    attach_result = await AttachmentManager.attach_to_entity(
                        entity_type='bill',
                        entity_id=result['bill_id'],
                        org_id=org_id,
                        file_path=local_path,
                        access_token=get_access_token()
                    )
                    
                    if attach_result.get('success'):
                        logger.info(f"üìé –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ Bill —á–µ—Ä–µ–∑ AttachmentManager")
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {attach_result.get('error')}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫ Bill: {e}")
            
            
            result['success'] = True
            logger.info(f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚Üí Bill #{result['bill_number']}")
            
            # üì± –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
            try:
                await self.send_success_notification(result, analysis, result.get('marked_as_final', False))
                logger.info(f"üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as notif_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notif_error}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}")
            result['error'] = str(e)
        
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                if os.path.exists(local_path):
                    os.remove(local_path)
            except Exception:
                pass
        
        return result
    
    async def send_success_notification(self, result: Dict, analysis: Dict, mark_final_success: bool = False):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ"""
        try:
            message = f"‚úÖ WORKDRIVE –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù\n\n"
            message += f"üìÑ –§–∞–π–ª: {result['file_name']}\n"
            message += f"üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {result['supplier_name']}\n"
            message += f"üìã Bill: #{result['bill_number']} (ID: {result['bill_id']})\n"
            message += f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {'PARKENTERTAINMENT' if result['org_id'] == '20082562863' else 'TaVie Europe O√ú'}\n"
            
            if analysis.get('total_amount'):
                message += f"üí∞ –°—É–º–º–∞: {analysis['total_amount']} {analysis.get('currency', 'PLN')}\n"
            
            # –°—Ç–∞—Ç—É—Å –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ Final
            if mark_final_success:
                message += f"üè∑Ô∏è –§–∞–π–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ Final –≤ WorkDrive ‚úÖ\n"
            else:
                message += f"‚ö†Ô∏è –§–∞–π–ª –ù–ï –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ Final –≤ WorkDrive\n"
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ Bill –≤ Zoho
            bill_url = f"https://books.zoho.eu/app/{result['org_id']}#/bills/{result['bill_id']}"
            message += f"\nüîó –û—Ç–∫—Ä—ã—Ç—å –≤ Zoho: {bill_url}"
            
            await send_message_to_admin(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ: {e}")
            
            await send_message_to_admin(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ: {e}")
    
    async def send_sync_notification(self, result: Dict, analysis: Dict, existing_bill: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—Ñ–∞–π–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ Final –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ Bill)"""
        try:
            message = f"üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø WORKDRIVE\n\n"
            message += f"üìÑ –§–∞–π–ª: {result['file_name']}\n"
            message += f"üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {result['supplier_name']}\n"
            message += f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π Bill: #{result['bill_number']} (ID: {result['bill_id']})\n"
            message += f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {'PARKENTERTAINMENT' if result['org_id'] == '20082562863' else 'TaVie Europe O√ú'}\n"
            message += f"\nüè∑Ô∏è –§–∞–π–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ Final –≤ WorkDrive ‚úÖ\n"
            message += f"‚ÑπÔ∏è Bill —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –≤ Zoho Books\n"
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ Bill –≤ Zoho
            bill_url = f"https://books.zoho.eu/app/{result['org_id']}#/bills/{result['bill_id']}"
            message += f"\nüîó –û—Ç–∫—Ä—ã—Ç—å –≤ Zoho: {bill_url}"
            
            await send_message_to_admin(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    
    def determine_organization(self, analysis: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Bill –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ñ–∏–ª–∏–∞–ª–æ–≤ —Å Branch Manager
        try:
            from telegram_bot.services.branch_manager import BranchManager
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–ª–∏–∞–ª —á–µ—Ä–µ–∑ Branch Manager
            branch = BranchManager.determine_branch(analysis)
            org_id = branch['org_id']
            branch_name = branch['name']
            
            logger.info(f"üè¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ñ–∏–ª–∏–∞–ª: {branch_name} (org_id: {org_id})")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª–∏–∞–ª–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
            self.current_branch = branch
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á —Ñ–∏–ª–∏–∞–ª–∞
            branch_key = None
            for key, branch_config in BranchManager.get_all_branches().items():
                if branch_config['name'] == branch['name']:
                    branch_key = key
                    break
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ü–≤–µ—Ç–æ—á–Ω—ã–π —Ñ–∏–ª–∏–∞–ª, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            if branch_key and BranchManager.is_flowers_branch(branch_key):
                logger.info("üå∏ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞")
                self.is_flowers_processing = True
            else:
                self.is_flowers_processing = False
            
            return org_id
            
        except ImportError:
            # Fallback –µ—Å–ª–∏ Branch Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            logger.warning("‚ö†Ô∏è Branch Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º PARKENTERTAINMENT –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return "20082562863"  # PARKENTERTAINMENT
    
    def create_bill_payload(self, analysis: Dict, supplier: Dict, org_id: str, local_path: str) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç payload –¥–ª—è Zoho Bill API –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ - –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –õ–û–ì–ò–ö–ò –ò–ó TELEGRAM BOT"""
        from functions.llm_document_extractor import llm_select_account
        from functions.zoho_api import get_chart_of_accounts, find_tax_by_percent
        
        logger.info(f"üìã –°–æ–∑–¥–∞–Ω–∏–µ Bill payload –¥–ª—è {supplier.get('contact_name', 'Unknown supplier')}")
        
        # 1. –û–ü–†–ï–î–ï–õ–Ø–ï–ú –¢–ò–ü –î–û–ö–£–ú–ï–ù–¢–ê (–∫–∞–∫ –≤ Telegram bot)
        llm_cat = (analysis.get('product_category') or analysis.get('document_category') or '').upper()
        detected_flower_names = analysis.get('detected_flower_names') or []
        supplier_name = (analysis.get('supplier_name') or '').lower()
        
        # üå∏ HIBISPOL –≤—Å–µ–≥–¥–∞ —Ü–≤–µ—Ç–æ—á–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫
        is_hibispol_flower_supplier = 'hibispol' in supplier_name
        is_flowers_doc = (llm_cat == 'FLOWERS' and bool(detected_flower_names)) or is_hibispol_flower_supplier
        
        logger.info(f"üå∏ DEBUG: llm_cat='{llm_cat}', detected_flowers={len(detected_flower_names)}, hibispol={is_hibispol_flower_supplier}")
        logger.info(f"üå∏ DEBUG: is_flowers_doc={is_flowers_doc}")
        
        # 2. –û–ü–†–ï–î–ï–õ–Ø–ï–ú INCLUSIVE/EXCLUSIVE –ù–ê–õ–û–ì (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó TELEGRAM BOT)
        doc_text_lower = (analysis.get('extracted_text') or '').lower()
        
        # DEBUG: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ extracted_text
        logger.info(f"üîç DEBUG extracted_text (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {repr(doc_text_lower[:200])}")
        logger.info(f"üîç DEBUG extracted_text –¥–ª–∏–Ω–∞: {len(doc_text_lower)}")
        
        # –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –õ–û–ì–ò–ö–ò –ò–ó HANDLERS.PY (—Å—Ç—Ä–æ–∫–∏ 2131-2172)
        # –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
        # 1. HIBISPOL (—Ü–≤–µ—Ç—ã): "cena brutto" –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ ‚Üí inclusive = True
        # 2. –û—Å—Ç–∞–ª—å–Ω—ã–µ: "warto≈õƒá netto" –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö ‚Üí inclusive = False
        
        # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ (–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º)
        brutto_pattern = "warto≈õƒá brutto" in doc_text_lower or "cena brutto" in doc_text_lower or "brutto" in doc_text_lower
        netto_price_pattern = "warto≈õƒá netto" in doc_text_lower
        
        # Fallback –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
        inclusive_markers = ["brutto", "gross", "tax inclusive", "cena brutto", "kwota brutto", "warto≈õƒá brutto"]
        exclusive_markers = ["netto", "net price", "cena netto", "kwota netto", "tax exclusive", "warto≈õƒá netto"]
        
        inclusive_found = any(m in doc_text_lower for m in inclusive_markers)
        exclusive_found = any(m in doc_text_lower for m in exclusive_markers)
        
        logger.info(f"üå∏ DEBUG: –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã - brutto_pattern: {brutto_pattern}, netto_price: {netto_price_pattern}")
        logger.info(f"üå∏ DEBUG: Fallback –º–∞—Ä–∫–µ—Ä—ã - brutto: {inclusive_found}, netto: {exclusive_found}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –µ—Å–ª–∏ –µ—Å—Ç—å –ò –Ω–µ—Ç—Ç–æ –ò –±—Ä—É—Ç—Ç–æ - —ç—Ç–æ EXCLUSIVE –¥–æ–∫—É–º–µ–Ω—Ç
        if netto_price_pattern:
            inclusive = False
            logger.info("üå∏ DEBUG: –ù–µ—Ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Üí EXCLUSIVE (warto≈õƒá netto –Ω–∞–π–¥–µ–Ω–æ)")
        elif brutto_pattern and not netto_price_pattern:
            inclusive = True
            logger.info("üå∏ DEBUG: –¢–û–õ–¨–ö–û brutto ‚Üí INCLUSIVE (warto≈õƒá brutto –±–µ–∑ netto)")
        # Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º EXCLUSIVE
        elif exclusive_found and not inclusive_found:
            inclusive = False
            logger.info("üå∏ DEBUG: Fallback –º–∞—Ä–∫–µ—Ä—ã ‚Üí EXCLUSIVE (—Ç–æ–ª—å–∫–æ netto)")
        elif inclusive_found and not exclusive_found:
            inclusive = True
            logger.info("üå∏ DEBUG: Fallback –º–∞—Ä–∫–µ—Ä—ã ‚Üí INCLUSIVE (—Ç–æ–ª—å–∫–æ brutto)")
        elif exclusive_found and inclusive_found:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ–±–∞, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç EXCLUSIVE (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)
            inclusive = False
            logger.info("üå∏ DEBUG: Fallback –º–∞—Ä–∫–µ—Ä—ã ‚Üí EXCLUSIVE (–æ–±–∞ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç netto)")
        else:
            inclusive = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é exclusive
            logger.info("üå∏ DEBUG: Fallback ‚Üí EXCLUSIVE (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        
        logger.info(f"üå∏ DEBUG: –ò—Ç–æ–≥–æ–≤—ã–π –Ω–∞–ª–æ–≥ {'INCLUSIVE (brutto)' if inclusive else 'EXCLUSIVE (netto)'}")
        
        # 3. –ü–û–õ–£–ß–ê–ï–ú ACCOUNTS (–∏—Å–∫–ª—é—á–∞–µ–º Income accounts –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö Bills)
        accounts = get_chart_of_accounts(org_id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Expense accounts (–∏—Å–∫–ª—é—á–∞–µ–º Income –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å—á–µ—Ç–æ–≤)
        expense_accounts = []
        for acc in accounts:
            account_type = acc.get('account_type', '').lower()
            if account_type not in ['income', 'other_income', 'revenue']:
                expense_accounts.append(acc)
        
        account_names = [acc.get('account_name', '') for acc in expense_accounts]
        logger.info(f"üîç DEBUG: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(expense_accounts)}/{len(accounts)} expense accounts (–∏—Å–∫–ª—é—á–µ–Ω—ã Income)")
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π expense account –¥–ª—è –Ω–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
        preferred_account_id = None
        
        if is_flowers_doc:
            # –î–ª—è —Ü–≤–µ—Ç–æ–≤ –∏—â–µ–º Flowers account  
            for acc in expense_accounts:
                account_name = (acc.get('account_name') or '').strip().lower()
                if account_name == 'flowers':
                    preferred_account_id = acc.get('account_id')
                    self.workdrive_logger.success("–¶–í–ï–¢–û–ß–ù–´–ô ACCOUNT", account_name=acc.get('account_name'), account_id=preferred_account_id)
                    break
        
        if not preferred_account_id:
            # Fallback - –ø–µ—Ä–≤—ã–π expense account
            if expense_accounts:
                preferred_account_id = expense_accounts[0].get('account_id')
                self.workdrive_logger.success("FALLBACK EXPENSE ACCOUNT", account_name=expense_accounts[0].get('account_name'), account_id=preferred_account_id)
        
        line_items = []
        
        # 4. –¶–í–ï–¢–û–ß–ù–´–ï –î–û–ö–£–ú–ï–ù–¢–´: –∏—Å–ø–æ–ª—å–∑—É–µ–º PERFECT FLOWER PARSER (–∫–∞–∫ –≤ Telegram bot)
        if is_flowers_doc:
            logger.info("üå∏ –ò–°–ü–û–õ–¨–ó–£–ï–ú PERFECT FLOWER PARSER –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            try:
                # –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º local_path –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
                file_name = analysis.get('original_filename', '')
                pdf_path = local_path  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å (–¥–ª—è JPEG —ç—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PDF)
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º perfect parser
                from functions.perfect_flower_parser import extract_perfect_flower_data, convert_to_zoho_line_items
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ perfect parser
                perfect_positions = extract_perfect_flower_data(pdf_path)
                logger.info(f"üå∏ PERFECT: –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(perfect_positions)} –ø–æ–∑–∏—Ü–∏–π")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ line_items (–ø–µ—Ä–µ–¥–∞–µ–º inclusive –∏ org_id –∫–∞–∫ –≤ Telegram bot)
                line_items = convert_to_zoho_line_items(perfect_positions, inclusive_tax=inclusive, org_id=org_id)
                logger.info(f"üå∏ PERFECT: –°–æ–∑–¥–∞–Ω–æ {len(line_items)} line_items (inclusive={inclusive})")
                
                # –ï—Å–ª–∏ Perfect Parser –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –ø–æ–∑–∏—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM
                if not line_items or len(line_items) == 0:
                    logger.info("üå∏ PERFECT PARSER –ù–ï –°–ú–û–ì –ò–ó–í–õ–ï–ß–¨ –ü–û–ó–ò–¶–ò–ò ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM fallback")
                    line_items = self._create_llm_line_items(analysis, expense_accounts, preferred_account_id, org_id, inclusive)
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º flowers account_id –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
                    if preferred_account_id:
                        for item in line_items:
                            item["account_id"] = preferred_account_id
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ perfect parser: {e}")
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM line_items –¥–ª—è —Ü–≤–µ—Ç–æ–≤
                logger.info("üå∏ FALLBACK: –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM line_items –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                line_items = self._create_llm_line_items(analysis, expense_accounts, preferred_account_id, org_id, inclusive)
        
        # 5. –ù–ï-–¶–í–ï–¢–û–ß–ù–´–ï –î–û–ö–£–ú–ï–ù–¢–´: –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM account selection
        else:
            logger.info(f"üìã –°–æ–∑–¥–∞–Ω–∏–µ line item –¥–ª—è –Ω–µ-—Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (category: {llm_cat})")
            line_items = self._create_fallback_line_item(analysis, expense_accounts, None, org_id)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Zoho (YYYY-MM-DD)
        def convert_date_format(date_str: str) -> str:
            """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ DD.MM.YYYY –≤ YYYY-MM-DD"""
            if not date_str:
                return datetime.now().strftime('%Y-%m-%d')
            
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                for fmt in ['%d.%m.%Y', '%Y-%m-%d', '%d/%m/%Y']:
                    try:
                        dt = datetime.strptime(date_str, fmt)
                        return dt.strftime('%Y-%m-%d')
                    except ValueError:
                        continue
                # Fallback
                return datetime.now().strftime('%Y-%m-%d')
            except Exception:
                return datetime.now().strftime('%Y-%m-%d')
        
        # –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –õ–û–ì–ò–ö–ò –î–ê–¢ –ò–ó HANDLERS.PY (—Å—Ç—Ä–æ–∫–∏ 2094-2112)
        import re
        
        # BILL DATE (–¥–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏)
        bill_date = None
        if analysis.get('issue_date') or analysis.get('document_date') or analysis.get('date'):
            bill_date = self._normalize_date(analysis.get('issue_date') or analysis.get('document_date') or analysis.get('date'))
        else:
            txt = analysis.get('extracted_text') or ''
            m = re.search(r"(date of issue|issue date)\s*[:\-]*\s*([A-Za-z]{3,9}\s+\d{1,2},\s*\d{4}|\d{1,2}[./-]\d{1,2}[./-]\d{2,4}|\d{4}-\d{2}-\d{2})", txt, re.IGNORECASE)
            if m:
                bill_date = self._normalize_date(m.group(2))
        if not bill_date:
            bill_date = datetime.now().strftime('%Y-%m-%d')
        
        # DUE DATE (—Å—Ä–æ–∫ –ø–ª–∞—Ç–µ–∂–∞)
        due_date = None
        if analysis.get('due_date'):
            due_date = self._normalize_date(analysis.get('due_date'))
        else:
            txt = analysis.get('extracted_text') or ''
            m = re.search(r"(date due|due date|payment due|termin p≈Çatno≈õci)\s*[:\-]*\s*([A-Za-z]{3,9}\s+\d{1,2},\s*\d{4}|\d{1,2}[./-]\d{1,2}[./-]\d{2,4}|\d{4}-\d{2}-\d{2})", txt, re.IGNORECASE)
            if m:
                due_date = self._normalize_date(m.group(2))
        
        invoice_date = bill_date
        logger.info(f"üóìÔ∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç: bill_date='{bill_date}', due_date='{due_date}'")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º due_date –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏)
        
        # –ü–æ–ª—É—á–∞–µ–º bill_number –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
        bill_number = (
            analysis.get('invoice_number') or 
            analysis.get('bill_number') or 
            analysis.get('document_number') or 
            f"INV-{datetime.now().strftime('%Y%m%d%H%M%S')}"
        )
        
        logger.info(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ bill_number:")
        logger.info(f"  invoice_number: {analysis.get('invoice_number')}")
        logger.info(f"  bill_number: {analysis.get('bill_number')}")
        logger.info(f"  document_number: {analysis.get('document_number')}")
        logger.info(f"  ‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π bill_number: {bill_number}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π payload  
        bill_payload = {
            "vendor_id": supplier.get('contact_id'),
            "bill_number": bill_number,
            "date": invoice_date,
            "reference_number": analysis.get('reference_number', ''),
            "notes": analysis.get('service_description', '') or f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –∏–∑ WorkDrive —Ñ–∞–π–ª–∞: {analysis.get('original_filename', '')}",
            "terms": "",
            "line_items": line_items,
            "is_inclusive_tax": inclusive  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∞ –Ω–µ –∏–∑ LLM
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º due_date —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        if due_date:
            bill_payload["due_date"] = due_date
            logger.info(f"üóìÔ∏è –î–æ–±–∞–≤–ª–µ–Ω due_date: {due_date}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º branch_id –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if is_flowers_doc and org_id == '20082562863':
            # Iris flowers atelier branch ID
            branch_id = '281497000000355063'
            bill_payload["branch_id"] = branch_id
            logger.info(f"üå∏ –î–æ–±–∞–≤–ª–µ–Ω branch_id –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {branch_id}")
        
        return bill_payload
    
    def _create_fallback_line_item(self, analysis: Dict, accounts: List, preferred_account_id: str, org_id: str) -> List[Dict]:
        """–°–æ–∑–¥–∞–µ—Ç fallback line item –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        from functions.llm_document_extractor import llm_select_account
        from functions.zoho_api import find_tax_by_percent, get_chart_of_accounts
        
        account_names = [acc.get('account_name', '') for acc in accounts]
        
        # –ü–†–ê–í–ò–õ–¨–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ item_details –ü–ï–†–ï–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ä–µ–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        item_description = None
        
        # 1. –ò—â–µ–º –≤ line_items (–¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
        line_items_desc = analysis.get('line_items', [])
        if line_items_desc and len(line_items_desc) > 0:
            first_item = line_items_desc[0]
            item_description = first_item.get('description') or first_item.get('name')
        
        # 2. Fallback –Ω–∞ –ø—Ä—è–º—ã–µ –ø–æ–ª—è
        if not item_description:
            item_description = (
                analysis.get('item_details') or 
                analysis.get('service_description') or
                analysis.get('description')
            )
        
        # 3. –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
        if not item_description:
            item_description = f"Services from {analysis.get('supplier_name', 'Supplier')}"
        
        self.workdrive_logger.success("ITEM_DESCRIPTION –û–ü–†–ï–î–ï–õ–ï–ù", 
            description=item_description[:100],
            source="line_items" if line_items_desc else "direct_fields")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º account —á–µ—Ä–µ–∑ LLM —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        context_text = f"Supplier: {analysis.get('supplier_name', '')}, Service: {item_description}, Bill: {analysis.get('bill_number', '')}"
        
        self.workdrive_logger.step(11, "LLM –í–´–ë–û–† ACCOUNT", context=context_text[:100])
        
        account_result = llm_select_account(
            account_names=account_names,
            context_text=context_text,
            supplier_name=analysis.get('supplier_name', ''),
            category=analysis.get('product_category', '')
        )
        
        # –ò–°–ü–†–ê–í–õ–Ø–ï–ú –≤—ã–±–æ—Ä account - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º "Uncategorized"
        llm_account_name = account_result.get('name', '')
        
        if llm_account_name == 'Uncategorized' or not llm_account_name:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback account
            account_name = account_names[0] if account_names else 'Other Expenses'
            self.workdrive_logger.warning("LLM –í–´–ë–†–ê–õ UNCATEGORIZED", f"–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback: {account_name}")
        else:
            account_name = llm_account_name
            self.workdrive_logger.success("LLM ACCOUNT –í–´–ë–†–ê–ù", 
                account_name=account_name,
                confidence=account_result.get('confidence', 0))
        
        # –ò—â–µ–º account_id —Å—Ä–µ–¥–∏ expense_accounts
        account_id = preferred_account_id
        if not account_id:
            # –ü–æ–ª—É—á–∞–µ–º expense_accounts –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            all_accounts = get_chart_of_accounts(org_id)
            expense_accounts = [acc for acc in all_accounts if acc.get('account_type', '').lower() not in ['income', 'other_income', 'revenue']]
            account_id = next((acc['account_id'] for acc in expense_accounts if acc.get('account_name') == account_name), None)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º tax
        tax_rate = analysis.get('tax_rate', 23)  # default 23%
        tax_id = find_tax_by_percent(org_id, tax_rate)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º net_amount –∏–ª–∏ total_amount
        amount = analysis.get('net_amount', analysis.get('total_amount', 0))
        
        line_item = {
            "name": item_description[:200],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            "description": f"Invoice {analysis.get('bill_number', analysis.get('invoice_number', ''))}",
            "rate": float(amount),
            "quantity": 1.0,
        }
        
        self.workdrive_logger.success("ITEM_DETAILS –ò–ó–í–õ–ï–ß–ï–ù", 
            item_description=item_description[:50],
            source="item_details" if analysis.get('item_details') else "service_description")
        
        if account_id:
            line_item["account_id"] = account_id
        if tax_id:
            line_item["tax_id"] = tax_id
            
        return [line_item]
    
    def _create_llm_line_items(self, analysis: Dict, accounts: List, preferred_account_id: str, org_id: str, inclusive: bool = False) -> List[Dict]:
        """–°–æ–∑–¥–∞–µ—Ç line_items –Ω–∞ –æ—Å–Ω–æ–≤–µ LLM –∞–Ω–∞–ª–∏–∑–∞ (–¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)"""
        from functions.zoho_api import find_tax_by_percent
        
        # –ü–æ–ª—É—á–∞–µ–º line_items –∏–∑ LLM –∞–Ω–∞–ª–∏–∑–∞
        llm_line_items = analysis.get('line_items', [])
        
        if not llm_line_items:
            logger.warning("‚ö†Ô∏è LLM line_items –ø—É—Å—Ç—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return self._create_fallback_line_item(analysis, accounts, preferred_account_id, org_id)
        
        logger.info(f"üå∏ –°–æ–∑–¥–∞–Ω–∏–µ {len(llm_line_items)} line_items –∏–∑ LLM –∞–Ω–∞–ª–∏–∑–∞")
        
        line_items = []
        tax_rate = analysis.get('tax_rate', 8)  # –î–ª—è —Ü–≤–µ—Ç–æ–≤ —á–∞—Å—Ç–æ 8%
        tax_id = find_tax_by_percent(org_id, tax_rate)
        
        for i, llm_item in enumerate(llm_line_items):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ LLM
            name = llm_item.get('description') or llm_item.get('description_en', f'Item {i+1}')
            quantity = float(llm_item.get('quantity', 1))
            
            # –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –õ–û–ì–ò–ö–ò –¶–ï–ù –ò–ó HANDLERS.PY (—Å—Ç—Ä–æ–∫–∏ 2477-2488)
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            price_net = (llm_item.get('unit_price_net') or llm_item.get('price_net') or 
                        llm_item.get('price_netto') or llm_item.get('unit_price_netto') or llm_item.get('net_amount'))
            price_gross = (llm_item.get('unit_price_gross') or llm_item.get('price_gross') or 
                          llm_item.get('unit_price_brutto') or llm_item.get('gross_amount'))
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º inclusive –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∏–∑ create_bill_payload
            if inclusive and price_gross:
                # –î–æ–∫—É–º–µ–Ω—Ç —Å brutto —Ü–µ–Ω–∞–º–∏ - –±–µ—Ä–µ–º gross —Ü–µ–Ω—É –∫–∞–∫ –µ—Å—Ç—å
                rate = float(price_gross) / quantity if quantity > 0 else float(price_gross)
                logger.info(f"üå∏ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ë–†–£–¢–¢–û —Ü–µ–Ω—É: {rate:.2f} (price_gross: {price_gross}, qty: {quantity})")
            elif price_net:
                rate = float(price_net) / quantity if quantity > 0 else float(price_net)
                logger.info(f"üå∏ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ù–ï–¢–¢–û —Ü–µ–Ω—É: {rate:.2f} (price_net: {price_net}, qty: {quantity})")
            else:
                # PDFPlumber —Ñ–æ—Ä–º–∞—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'rate' –Ω–∞–ø—Ä—è–º—É—é
                rate = float(llm_item.get('rate') or llm_item.get('unit_price') or 0)
                logger.info(f"üå∏ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–†–Ø–ú–£–Æ —Ü–µ–Ω—É: {rate:.2f} (fallback)")
                
            logger.info(f"üîç PRICE DEBUG: name={name[:30]}")
            logger.info(f"üîç PRICE DEBUG: price_net={price_net}, price_gross={price_gross}")
            logger.info(f"üîç PRICE DEBUG: inclusive={inclusive}, final_rate={rate:.2f}")
            
            item = {
                "name": name[:200],
                "description": name[:2000],
                "quantity": quantity,
                "rate": rate
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º account_id
            if preferred_account_id:  # Flowers account –¥–ª—è —Ü–≤–µ—Ç–æ–≤
                item["account_id"] = preferred_account_id
            
            # –î–æ–±–∞–≤–ª—è–µ–º tax_id
            if tax_id:
                item["tax_id"] = tax_id
            
            line_items.append(item)
            
            logger.info(f"üå∏ Line item {i+1}: {name[:30]} (qty: {quantity}, rate: {rate:.2f})")
        
        return line_items
    
    def _normalize_date(self, raw: Optional[str]) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç (–∫–æ–ø–∏—è –∏–∑ handlers.py)"""
        if not raw:
            return datetime.now().strftime('%Y-%m-%d')
        raw = raw.strip()
        fmts = ["%d/%m/%Y", "%Y-%m-%d", "%d.%m.%Y", "%Y.%m.%d", "%m/%d/%Y", "%d-%m-%Y", "%Y/%m/%d", "%B %d, %Y", "%b %d, %Y"]
        for fmt in fmts:
            try:
                return datetime.strptime(raw, fmt).strftime('%Y-%m-%d')
            except Exception:
                continue
        cleaned = raw.replace(' ', '/').replace('.', '/').replace('-', '/')
        for fmt in ("%d/%m/%Y", "%Y/%m/%d", "%m/%d/%Y"):
            try:
                return datetime.strptime(cleaned, fmt).strftime('%Y-%m-%d')
            except Exception:
                continue
        return datetime.now().strftime('%Y-%m-%d')
    
    def determine_document_action(self, analysis: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á—Ç–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å: BILL –∏–ª–∏ EXPENSE (–∏—Å–ø–æ–ª—å–∑—É—è –≥–æ—Ç–æ–≤—É—é –ª–æ–≥–∏–∫—É –∏–∑ handlers)"""
        
        document_type = analysis.get('document_type', '').lower()
        extracted_text = (analysis.get('extracted_text') or '').lower()
        supplier_name = (analysis.get('supplier_name') or '').lower()
        
        # PARAGON FISKALNY ‚Üí EXPENSE (—Ç–æ–ª—å–∫–æ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç–∞)
        is_paragon = (
            document_type == 'receipt' or
            'paragon' in document_type or 
            'fiskalny' in document_type or
            'paragon fiskalny' in extracted_text or
            ('paragon' in extracted_text and 'fiskalny' in extracted_text)
        )
        
        if is_paragon:
            logger.info("üßæ PARAGON FISKALNY –æ–ø—Ä–µ–¥–µ–ª–µ–Ω ‚Üí —Å–æ–∑–¥–∞–µ–º EXPENSE")
            return 'EXPENSE'
        
        logger.info("üìã –û–±—ã—á–Ω—ã–π –∏–Ω–≤–æ–π—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω ‚Üí —Å–æ–∑–¥–∞–µ–º BILL")
        return 'BILL'
    
    async def create_expense_from_analysis(self, analysis: Dict, supplier: Dict, org_id: str, file_path: str) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç Expense –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä–∞–≥–æ–Ω–∞ —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—è ExpenseService"""
        from telegram_bot.services.expense_service import ExpenseService
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º org_name
        org_name = "PARKENTERTAINMENT" if org_id == '20082562863' else "TaVie Europe O√ú"
        
        logger.info(f"üí≥ –°–æ–∑–¥–∞–Ω–∏–µ Expense —á–µ—Ä–µ–∑ ExpenseService: org={org_name}, supplier={supplier.get('contact_id')}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ExpenseService –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Expense
        return await ExpenseService.create_expense_from_analysis(
            analysis=analysis,
            supplier=supplier,
            org_id=org_id,
            org_name=org_name,
            file_path=file_path
        )
    
    async def _convert_image_to_pdf(self, image_path: str, original_filename: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PDF (–≥–æ—Ç–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ handlers)"""
        try:
            from PIL import Image
            import os
            
            logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF: {original_filename}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(image_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode != 'RGB':
                image = image.convert('RGB')
                logger.info(f"üé® –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ RGB")
            
            # –°–æ–∑–¥–∞–µ–º PDF –ø—É—Ç—å
            pdf_path = os.path.splitext(image_path)[0] + '_converted.pdf'
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PDF
            image.save(pdf_path, "PDF", resolution=100.0)
            
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ PDF: {pdf_path}")
            return pdf_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {original_filename}: {e}")
            raise
    
    
    async def attach_pdf_to_bill(self, org_id: str, bill_id: str, file_path: str, filename: str):
        """–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç PDF —Ñ–∞–π–ª –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É Bill"""
        try:
            import requests
            from functions.zoho_api import get_access_token
            
            access_token = get_access_token()
            url = f"https://www.zohoapis.eu/books/v3/bills/{bill_id}/attachment?organization_id={org_id}"
            
            headers = {"Authorization": f"Zoho-oauthtoken {access_token}"}
            files = {"attachment": (filename, open(file_path, 'rb'), 'application/pdf')}
            
            response = requests.post(url, headers=headers, files=files)
            files["attachment"][1].close()
            
            if response.status_code in (200, 201):
                logger.info(f"üìé PDF —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ Bill {bill_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è PDF –∫ Bill {bill_id}: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è PDF: {e}")
    
    def _auto_update_contact_if_needed(self, supplier: Dict, analysis: Dict, org_id: str):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            contact_id = supplier.get('contact_id')
            if not contact_id:
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            update_data = {}
            
            # Email –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_email = analysis.get('supplier_email') or analysis.get('email')
            if doc_email and '@' in doc_email:
                update_data['email'] = doc_email
                self.workdrive_logger.success("EMAIL –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê", email=doc_email)
            
            # –¢–µ–ª–µ—Ñ–æ–Ω –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞  
            doc_phone = analysis.get('supplier_phone') or analysis.get('phone')
            if doc_phone and len(doc_phone) > 5:
                update_data['phone'] = doc_phone
                self.workdrive_logger.success("–¢–ï–õ–ï–§–û–ù –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê", phone=doc_phone)
            
            # –ê–¥—Ä–µ—Å –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_address = analysis.get('supplier_address') or analysis.get('address')
            if doc_address and len(doc_address) > 10:
                update_data['billing_address'] = {'address': doc_address}
                self.workdrive_logger.success("–ê–î–†–ï–° –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê", address=doc_address[:50])
            
            # VAT –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –≤ –∫—ç—à–µ null)
            doc_vat = analysis.get('supplier_vat') or analysis.get('vat')
            if doc_vat and not supplier.get('vat_number'):
                vat_field = "cf_tax_id" if org_id == "20082562863" else "cf_vat_id"
                update_data['custom_fields'] = [{"api_name": vat_field, "value": doc_vat}]
                self.workdrive_logger.success("VAT –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê", vat=doc_vat, field=vat_field)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º
            if update_data:
                self.workdrive_logger.step(12, "–û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê", contact_id=contact_id, fields=list(update_data.keys()))
                
                from config.zoho_auth import get_access_token
                import requests
                
                access_token = get_access_token()
                headers = {"Authorization": f"Zoho-oauthtoken {access_token}"}
                url = f"https://www.zohoapis.eu/books/v3/contacts/{contact_id}?organization_id={org_id}"
                
                response = requests.put(url, json=update_data, headers=headers)
                
                if response.status_code == 200:
                    self.workdrive_logger.success("–ö–û–ù–¢–ê–ö–¢ –û–ë–ù–û–í–õ–ï–ù", contact_id=contact_id, updated_fields=list(update_data.keys()))
                else:
                    self.workdrive_logger.warning("–û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: {response.status_code}")
            else:
                self.workdrive_logger.success("–ö–û–ù–¢–ê–ö–¢ –ê–ö–¢–£–ê–õ–ï–ù", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Ç")
                
        except Exception as e:
            self.workdrive_logger.warning("–ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê", f"–û—à–∏–±–∫–∞: {e}")

    async def send_telegram_report(self, date_str: str, results: List[Dict]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤ Telegram"""
        try:
            successful = [r for r in results if r['success']]
            failed = [r for r in results if not r['success']]
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
            def escape_markdown(text: str) -> str:
                """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram Markdown"""
                special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
                for char in special_chars:
                    text = text.replace(char, f'\\{char}')
                return text
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ Markdown)
            message = f"üìä –û–¢–ß–Å–¢ –û–ë–†–ê–ë–û–¢–ö–ò WORKDRIVE –∑–∞ {date_str}\n\n"
            
            if successful:
                message += f"‚úÖ –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù–û: {len(successful)}\n"
                for result in successful:
                    bill_id = result['bill_id']
                    bill_number = result['bill_number']
                    supplier = result['supplier_name']
                    org_id = result['org_id']
                    
                    # –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ Bill –≤ Zoho (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
                    zoho_url = f"https://books.zoho.eu/app/{org_id}#/bills/{bill_id}"
                    
                    message += f"‚Ä¢ {bill_number} - {supplier}\n"
                    message += f"  –°—Å—ã–ª–∫–∞: {zoho_url}\n"
                
                message += "\n"
            
            if failed:
                message += f"‚ùå –û–®–ò–ë–ö–ò: {len(failed)}\n"
                for result in failed:
                    file_name = result['file_name']
                    error = result['error'][:100] + "..." if len(result['error']) > 100 else result['error']
                    message += f"‚Ä¢ {file_name}\n"
                    message += f"  –û—à–∏–±–∫–∞: {error}\n"
                
                message += "\n"
            
            if not successful and not failed:
                message += "‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
            
            message += f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –ë–ï–ó Markdown
            await send_message_to_admin(message)
            logger.info("üì± Telegram –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –æ—Ç—á—ë—Ç–∞: {e}")
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                fallback_message = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á—ë—Ç–∞ WorkDrive –∑–∞ {date_str}. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len([r for r in results if r['success']])}/{len(results)} —Ñ–∞–π–ª–æ–≤."
                await send_message_to_admin(fallback_message)
            except Exception:
                pass
    
    async def process_date(self, target_date: str) -> List[Dict]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ {target_date}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        files = self.get_files_for_date(target_date)
        
        if not files:
            logger.info(f"üì≠ –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞ {target_date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        results = []
        for i, file in enumerate(files, 1):
            logger.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {i}/{len(files)}: {file.get('name')}")
            
            result = await self.process_single_file(file)
            results.append(result)
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self.mark_file_processed(
                file_id=result['file_id'],
                file_name=result['file_name'],
                bill_id=result.get('bill_id'),
                error=result.get('error')
            )
        
        logger.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len([r for r in results if r['success']])}/{len(results)} —É—Å–ø–µ—à–Ω–æ")
        return results

async def run_daily_batch(target_date: str = None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É"""
    if not target_date:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        yesterday = date.today() - timedelta(days=1)
        target_date = yesterday.strftime('%Y-%m-%d')
    
    processor = WorkDriveBatchProcessor()
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        results = await processor.process_date(target_date)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –≤ Telegram
        await processor.send_telegram_report(target_date, results)
        
        return results
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
        try:
            await send_message_to_admin(f"‚ùå –û—à–∏–±–∫–∞ WorkDrive –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ {target_date}: {str(e)}")
        except Exception:
            pass
        raise

if __name__ == "__main__":
    import argparse
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parser = argparse.ArgumentParser(description='WorkDrive Batch Processor')
    parser.add_argument('--date', type=str, help='–î–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—á–µ—Ä–∞)')
    parser.add_argument('--test', action='store_true', help='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞ 19 –∞–≤–≥—É—Å—Ç–∞)')
    
    args = parser.parse_args()
    
    if args.test:
        target_date = "2025-08-19"
        print(f"üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞ {target_date}")
    else:
        target_date = args.date
    
    # –ó–∞–ø—É—Å–∫
    asyncio.run(run_daily_batch(target_date))
