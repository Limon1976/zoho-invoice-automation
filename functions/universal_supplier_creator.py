"""
Universal Supplier Creator
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
"""

import logging
from typing import Dict, Optional, Tuple
from functions.contact_creator import create_supplier_from_document

logger = logging.getLogger(__name__)


async def create_supplier_universal(analysis: Dict, org_id: str) -> Optional[Dict]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ contact_creator.py —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –∞–¥—Ä–µ—Å–∞ –Ω–∞ –ø–æ–ª—è
    –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –ª—é–±–æ–≥–æ –º–æ–¥—É–ª—è: WorkDrive, Telegram, Universal Processor
    
    Args:
        analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ LLM
        org_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ Zoho
        
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º contact_creator.py
        document_data = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            'supplier_name': analysis.get('supplier_name'),
            'supplier_vat': analysis.get('supplier_vat'),
            'supplier_email': analysis.get('supplier_email'),
            'supplier_phone': analysis.get('supplier_phone'),
            'supplier_address': analysis.get('supplier_address'),
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏–∑ LLM (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            'supplier_street': analysis.get('supplier_street'),
            'supplier_city': analysis.get('supplier_city'),
            'supplier_zip_code': analysis.get('supplier_zip_code'),
            'supplier_country': analysis.get('supplier_country') or 'Poland',
            
            # –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
            'bank_name': analysis.get('bank_name'),
            'iban': analysis.get('iban'),
            'bank_account': analysis.get('bank_account'),
            'swift_bic': analysis.get('swift_bic'),
            
            # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ
            'contact_person': analysis.get('contact_person'),
            'issuer_contact_person': analysis.get('issuer_contact_person'),
            
            # –¶–µ–ª–µ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
            'target_org_id': org_id,
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            'extracted_text': analysis.get('extracted_text', ''),
            'our_company': analysis.get('our_company', ''),
            'tax_rate': analysis.get('tax_rate'),
            
            # –í–∞–ª—é—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            'currency': analysis.get('currency'),
            'document_currency': analysis.get('document_currency')
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier_name = analysis.get('supplier_name', 'Unknown')
        supplier_vat = analysis.get('supplier_vat', 'Unknown')
        
        logger.info(f"üè¢ UNIVERSAL_SUPPLIER_CREATOR: —Å–æ–∑–¥–∞–µ–º {supplier_name}")
        logger.info(f"üÜî VAT: {supplier_vat}, org_id: {org_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ contact_creator.py
        success, message = await create_supplier_from_document(document_data)
        
        if success:
            logger.info(f"‚úÖ UNIVERSAL_SUPPLIER_CREATOR: {message}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            return {
                'contact_id': None,  # contact_creator.py –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID
                'contact_name': supplier_name,
                'vat_number': supplier_vat,
                'status': 'created_via_universal_creator'
            }
        else:
            logger.error(f"‚ùå UNIVERSAL_SUPPLIER_CREATOR: {message}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå UNIVERSAL_SUPPLIER_CREATOR exception: {e}")
        return None


def get_proper_address_from_analysis(analysis: Dict) -> Dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Returns:
        Dict —Å –ø–æ–ª—è–º–∏ address, city, zip, country
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    street_llm = analysis.get("supplier_street") or ""
    city_llm = analysis.get("supplier_city") or ""  
    zip_llm = analysis.get("supplier_zip_code") or analysis.get("zip_code") or ""
    country_llm = analysis.get("supplier_country") or "Poland"
    
    doc_address = analysis.get('supplier_address') or analysis.get('address') or ""
    
    if street_llm or city_llm or zip_llm:
        # LLM –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
        return {
            "address": street_llm or doc_address,
            "city": city_llm,
            "zip": zip_llm,
            "country": country_llm
        }
    elif doc_address:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∞–¥—Ä–µ—Å
        address_parts = [p.strip() for p in doc_address.split(',')]
        if len(address_parts) >= 3:
            return {
                "address": address_parts[0],
                "city": address_parts[1],
                "zip": zip_llm or "",
                "country": country_llm
            }
        else:
            return {
                "address": doc_address,
                "city": "",
                "zip": "",
                "country": country_llm
            }
    else:
        return {
            "address": "",
            "city": "",
            "zip": "",
            "country": country_llm
        }


# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å existing –∫–æ–¥–æ–º
create_supplier_from_analysis = create_supplier_universal

