#!/usr/bin/env python3
"""
Supplier Cache Updater
======================

–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ Zoho
"""

import json
import os
from typing import Dict, Any, List
from datetime import datetime
from pathlib import Path

from src.domain.services.contact_cache import OptimizedContactCache


class SupplierCacheUpdater:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
    
    def __init__(self):
        self.cache = OptimizedContactCache()
        self.data_dir = Path("data")
        self.cache_dir = self.data_dir / "optimized_cache"
    
    def update_supplier_cache(self, new_supplier_data: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        
        Args:
            new_supplier_data: –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ Zoho
            
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...")
            
            # 1. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫—ç—à
            self._update_main_cache(new_supplier_data)
            
            # 2. –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à
            self._update_optimized_cache(new_supplier_data)
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
            self._update_data_files(new_supplier_data)
            
            print("‚úÖ –ö—ç—à –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
            return False
    
    def _update_main_cache(self, supplier_data: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫—ç—à–∞"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –∫—ç—à
            contact_id = supplier_data.get('contact_id')
            contact_name = supplier_data.get('contact_name')
            
            if contact_id and contact_name:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∫—ç—à–∞
                cache_entry = {
                    'contact_id': contact_id,
                    'contact_name': contact_name,
                    'company_name': supplier_data.get('company_name', contact_name),
                    'email': supplier_data.get('email', ''),
                    'phone': supplier_data.get('phone', ''),
                    'vat_number': supplier_data.get('vat_number', ''),
                    'address': supplier_data.get('address', ''),
                    'country': supplier_data.get('country', ''),
                    'city': supplier_data.get('city', ''),
                    'state': supplier_data.get('state', ''),
                    'zip_code': supplier_data.get('zip_code', ''),
                    'created_time': supplier_data.get('created_time', datetime.now().isoformat()),
                    'last_modified_time': supplier_data.get('last_modified_time', datetime.now().isoformat())
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
                self.cache.add_contacts([cache_entry])
                print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫—ç—à: {contact_name}")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫—ç—à–∞: {e}")
    
    def _update_optimized_cache(self, supplier_data: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∞"""
        try:
            optimized_cache_file = self.cache_dir / "all_contacts_optimized.json"
            
            if optimized_cache_file.exists():
                with open(optimized_cache_file, 'r', encoding='utf-8') as f:
                    optimized_cache = json.load(f)
            else:
                optimized_cache = {
                    'contacts': [],
                    'vat_index': {},
                    'company_index': {},
                    'last_updated': datetime.now().isoformat()
                }
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
            contact_name = supplier_data.get('contact_name', '')
            vat_number = supplier_data.get('vat_number', '')
            
            optimized_entry = {
                'contact_id': supplier_data.get('contact_id'),
                'contact_name': contact_name,
                'company_name': supplier_data.get('company_name', contact_name),
                'vat_number': vat_number,
                'email': supplier_data.get('email', ''),
                'country': supplier_data.get('country', ''),
                'city': supplier_data.get('city', '')
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            optimized_cache['contacts'].append(optimized_entry)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
            if vat_number:
                optimized_cache['vat_index'][vat_number] = contact_name
            
            if contact_name:
                optimized_cache['company_index'][contact_name.lower()] = contact_name
            
            optimized_cache['last_updated'] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—ç—à
            with open(optimized_cache_file, 'w', encoding='utf-8') as f:
                json.dump(optimized_cache, f, indent=2, ensure_ascii=False)
            
            print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à: {contact_name}")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∞: {e}")
    
    def _update_data_files(self, supplier_data: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
            full_contacts_file = self.data_dir / "full_contacts" / f"{supplier_data.get('contact_name', 'unknown')}_full.json"
            
            if not full_contacts_file.parent.exists():
                full_contacts_file.parent.mkdir(parents=True, exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            with open(full_contacts_file, 'w', encoding='utf-8') as f:
                json.dump(supplier_data, f, indent=2, ensure_ascii=False)
            
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {full_contacts_file.name}")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def update_specific_supplier(self, contact_id: str, updated_data: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –∫—ç—à–µ
        
        Args:
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Zoho
            updated_data: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {contact_id}...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à
            self._update_optimized_cache(updated_data)
            
            print(f"‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ {contact_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}")
            return False
    
    def refresh_all_caches(self) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –∫—ç—à–∏ –∏–∑ Zoho API
        
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            print("üîÑ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—ç—à–µ–π...")
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à
            self._recreate_optimized_cache()
            
            print("‚úÖ –í—Å–µ –∫—ç—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–π: {e}")
            return False
    
    def _recreate_optimized_cache(self):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫—ç—à–∞
            all_contacts = list(self.cache.contacts.values())
            
            optimized_cache = {
                'contacts': [],
                'vat_index': {},
                'company_index': {},
                'last_updated': datetime.now().isoformat()
            }
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            for contact in all_contacts:
                optimized_entry = {
                    'contact_id': contact.contact_id,
                    'contact_name': contact.contact_name,
                    'company_name': contact.company_name,
                    'vat_number': contact.vat_number or '',
                    'email': contact.email,
                    'country': contact.billing_address.get('country', '') if contact.billing_address else '',
                    'city': contact.billing_address.get('city', '') if contact.billing_address else ''
                }
                
                optimized_cache['contacts'].append(optimized_entry)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
                vat_number = contact.vat_number or ''
                contact_name = contact.contact_name
                
                if vat_number:
                    optimized_cache['vat_index'][vat_number] = contact_name
                
                if contact_name:
                    optimized_cache['company_index'][contact_name.lower()] = contact_name
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à
            optimized_cache_file = self.cache_dir / "all_contacts_optimized.json"
            with open(optimized_cache_file, 'w', encoding='utf-8') as f:
                json.dump(optimized_cache, f, indent=2, ensure_ascii=False)
            
            print(f"  ‚úÖ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à: {len(all_contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∞: {e}")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
def update_supplier_cache_after_creation(supplier_data: Dict[str, Any]) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    
    Args:
        supplier_data: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ Zoho
        
    Returns:
        True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    updater = SupplierCacheUpdater()
    return updater.update_supplier_cache(supplier_data)


def update_specific_supplier_cache(contact_id: str, updated_data: Dict[str, Any]) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –∫—ç—à–µ
    
    Args:
        contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Zoho
        updated_data: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
    Returns:
        True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    updater = SupplierCacheUpdater()
    return updater.update_specific_supplier(contact_id, updated_data)


def refresh_all_supplier_caches() -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –∫—ç—à–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    
    Returns:
        True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    updater = SupplierCacheUpdater()
    return updater.refresh_all_caches()


# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def test_cache_updater():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞"""
    print("üß™ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    test_supplier_data = {
        'contact_id': '460000000026049',
        'contact_name': 'Horrer Automobile GmbH',
        'company_name': 'Horrer Automobile GmbH',
        'email': 'info@horrer-automobile.de',
        'phone': '+49 (0)7031-234178',
        'vat_number': 'DE123456789',
        'address': 'Stuttgarter Strasse 116',
        'country': 'DE',
        'city': 'B√∂blingen',
        'state': 'Baden-W√ºrttemberg',
        'zip_code': '71032',
        'created_time': datetime.now().isoformat(),
        'last_modified_time': datetime.now().isoformat()
    }
    
    print("üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:")
    for key, value in test_supplier_data.items():
        print(f"  {key}: {value}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
    success = update_supplier_cache_after_creation(test_supplier_data)
    
    if success:
        print("‚úÖ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —É—Å–ø–µ—à–µ–Ω")
    else:
        print("‚ùå –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–µ —É–¥–∞–ª—Å—è")


if __name__ == "__main__":
    test_cache_updater() 