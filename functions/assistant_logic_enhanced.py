"""
Enhanced Assistant Logic —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Pydantic AI
================================================

–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è assistant_logic.py —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Pydantic AI
–¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π.
"""

# –ò–º–ø–æ—Ä—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
from assistant_logic import *

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
try:
    from ai_invoice_analyzer import (
        enhance_invoice_analysis,
        enhance_company_detection,
        is_ai_available,
        AIInvoiceAnalyzer
    )
    AI_ENHANCED = True
    print("‚úÖ Pydantic AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
except ImportError as e:
    AI_ENHANCED = False
    print(f"‚ö†Ô∏è Pydantic AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")


def enhanced_process_invoice_json(data: dict, existing_bills: list[tuple[str, str]], ocr_text: str = "") -> dict:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Å—á–µ—Ç–∞ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
    
    Args:
        data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞
        existing_bills: –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—á–µ—Ç–æ–≤
        ocr_text: OCR —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
    Returns:
        –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å AI —É–ª—É—á—à–µ–Ω–∏—è–º–∏
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—á–µ—Ç–∞ —Å AI...")
    
    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    result = process_invoice_json(data, existing_bills, ocr_text)
    
    # –ï—Å–ª–∏ AI –¥–æ—Å—Ç—É–ø–µ–Ω, —É–ª—É—á—à–∞–µ–º –∞–Ω–∞–ª–∏–∑
    if AI_ENHANCED and ocr_text:
        print("üß† –ü—Ä–∏–º–µ–Ω—è–µ–º AI –∞–Ω–∞–ª–∏–∑...")
        
        # AI –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        ai_analysis = enhance_invoice_analysis(ocr_text)
        
        if ai_analysis.get("ai_enhanced"):
            print("‚úÖ AI –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω, —É–ª—É—á—à–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
            
            # –£–ª—É—á—à–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            if ai_analysis.get("supplier_name") and not result.get("supplier", {}).get("name"):
                if "supplier" not in result:
                    result["supplier"] = {}
                result["supplier"]["name"] = ai_analysis["supplier_name"]
                print(f"  üìù AI –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {ai_analysis['supplier_name']}")
            
            # –£–ª—É—á—à–∞–µ–º VAT –Ω–æ–º–µ—Ä
            if ai_analysis.get("supplier_vat") and not result.get("supplier", {}).get("vat"):
                if "supplier" not in result:
                    result["supplier"] = {}
                result["supplier"]["vat"] = ai_analysis["supplier_vat"]
                print(f"  üè∑Ô∏è AI –æ–±–Ω–∞—Ä—É–∂–∏–ª VAT: {ai_analysis['supplier_vat']}")
            
            # –£–ª—É—á—à–∞–µ–º –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if ai_analysis.get("bill_number") and not result.get("bill_number"):
                result["bill_number"] = ai_analysis["bill_number"]
                print(f"  üìÑ AI –æ–±–Ω–∞—Ä—É–∂–∏–ª –Ω–æ–º–µ—Ä: {ai_analysis['bill_number']}")
            
            # –£–ª—É—á—à–∞–µ–º —Å—É–º–º—É
            if ai_analysis.get("total_amount") and not result.get("total_amount"):
                result["total_amount"] = ai_analysis["total_amount"]
                print(f"  üí∞ AI –æ–±–Ω–∞—Ä—É–∂–∏–ª —Å—É–º–º—É: {ai_analysis['total_amount']} {ai_analysis.get('currency', 'EUR')}")
            
            # –£–ª—É—á—à–∞–µ–º –≤–∞–ª—é—Ç—É
            if ai_analysis.get("currency") and not result.get("currency"):
                result["currency"] = ai_analysis["currency"]
                print(f"  üí± AI –æ–±–Ω–∞—Ä—É–∂–∏–ª –≤–∞–ª—é—Ç—É: {ai_analysis['currency']}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if ai_analysis.get("is_car_related"):
                result["is_car_related"] = True
                
                if ai_analysis.get("vin_numbers"):
                    result["vin_numbers"] = ai_analysis["vin_numbers"]
                    print(f"  üöó AI –æ–±–Ω–∞—Ä—É–∂–∏–ª VIN: {ai_analysis['vin_numbers']}")
                
                if ai_analysis.get("vehicle_models"):
                    result["vehicle_models"] = ai_analysis["vehicle_models"]
                    print(f"  üèéÔ∏è AI –æ–±–Ω–∞—Ä—É–∂–∏–ª –º–æ–¥–µ–ª–∏: {ai_analysis['vehicle_models']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é
            if ai_analysis.get("is_our_company_supplier"):
                print("  ‚ö†Ô∏è AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª, —á—Ç–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫ - –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è (–∏—Å—Ö–æ–¥—è—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç)")
                result["is_outgoing"] = True
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ AI
            result["ai_metadata"] = {
                "confidence": ai_analysis.get("confidence", 0.5),
                "notes": ai_analysis.get("notes", []),
                "enhanced_fields": [k for k, v in ai_analysis.items() if k != "ai_enhanced" and v],
                "analysis_version": "pydantic_ai_0.4.2"
            }
            
            print(f"  üìä AI —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ai_analysis.get('confidence', 0.5):.1%}")
        
        else:
            print(f"‚ùå AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {ai_analysis.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    return result


def enhanced_company_detection(supplier_data: dict, ocr_text: str = "") -> dict:
    """
    –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å AI
    
    Args:
        supplier_data: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        ocr_text: OCR —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        –£–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    """
    if not AI_ENHANCED or not supplier_data.get("name"):
        return supplier_data
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é —Å –ø–æ–º–æ—â—å—é AI...")
    
    # AI –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏
    company_result = enhance_company_detection(supplier_data["name"])
    
    if company_result.get("ai_enhanced"):
        print(f"üß† AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è '{supplier_data['name']}':")
        print(f"  –ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company_result.get('is_our_company')}")
        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {company_result.get('confidence', 0.5):.1%}")
        print(f"  –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {company_result.get('reasoning', '–ù–µ—Ç')}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º AI –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        supplier_data["ai_company_analysis"] = {
            "is_our_company": company_result.get("is_our_company", False),
            "confidence": company_result.get("confidence", 0.5),
            "reasoning": company_result.get("reasoning", ""),
            "analysis_version": "pydantic_ai_0.4.2"
        }
    
    return supplier_data


def enhanced_process_proforma_json(data: dict, ocr_text: str = "") -> dict:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Proforma —Å AI
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–æ—Ä–º—ã
        ocr_text: OCR —Ç–µ–∫—Å—Ç
        
    Returns:
        –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    # –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    result = process_proforma_json(data, ocr_text)
    
    # –ó–∞—Ç–µ–º AI —É–ª—É—á—à–µ–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ invoice)
    if AI_ENHANCED and ocr_text:
        ai_analysis = enhance_invoice_analysis(ocr_text)
        
        if ai_analysis.get("ai_enhanced"):
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ —É–ª—É—á—à–µ–Ω–∏—è, —á—Ç–æ –∏ –¥–ª—è invoice
            # ... (–∫–æ–¥ –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω enhanced_process_invoice_json)
            
            result["ai_metadata"] = {
                "confidence": ai_analysis.get("confidence", 0.5),
                "document_type": "proforma",
                "analysis_version": "pydantic_ai_0.4.2"
            }
    
    return result


def enhanced_guess_document_type(data: dict, ocr_text: str) -> str:
    """
    –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å AI
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        ocr_text: OCR —Ç–µ–∫—Å—Ç
        
    Returns:
        –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
    standard_type = guess_document_type(data, ocr_text)
    
    if standard_type != "unknown" or not AI_ENHANCED:
        return standard_type
    
    print("ü§î –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Ç–∏–ø, –ø—Ä–æ–±—É–µ–º AI...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
    ai_analysis = enhance_invoice_analysis(ocr_text)
    
    if ai_analysis.get("ai_enhanced"):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —á–µ—Ä–µ–∑ AI
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        pass
    
    return standard_type


def get_ai_status() -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ AI
    """
    return {
        "ai_available": AI_ENHANCED,
        "openai_configured": is_ai_available() if AI_ENHANCED else False,
        "version": "pydantic_ai_0.4.2" if AI_ENHANCED else None,
        "features": [
            "invoice_analysis",
            "company_matching", 
            "vin_detection",
            "auto_type_detection"
        ] if AI_ENHANCED else []
    }


def create_ai_analysis_report(data: dict) -> dict:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ AI –∞–Ω–∞–ª–∏–∑–∞
    
    Args:
        data: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
    Returns:
        –û—Ç—á–µ—Ç —Å AI –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    ai_metadata = data.get("ai_metadata", {})
    
    report = {
        "ai_enhanced": bool(ai_metadata),
        "confidence": ai_metadata.get("confidence", 0.0),
        "enhanced_fields": ai_metadata.get("enhanced_fields", []),
        "notes": ai_metadata.get("notes", []),
        "analysis_version": ai_metadata.get("analysis_version", "none")
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
    supplier = data.get("supplier", {})
    company_analysis = supplier.get("ai_company_analysis", {})
    
    if company_analysis:
        report["company_analysis"] = {
            "is_our_company": company_analysis.get("is_our_company", False),
            "confidence": company_analysis.get("confidence", 0.0),
            "reasoning": company_analysis.get("reasoning", "")
        }
    
    return report


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—ã–µ
def process_invoice_json_ai_enhanced(data: dict, existing_bills: list[tuple[str, str]], ocr_text: str = "") -> dict:
    """–ê–ª–∏–∞—Å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    return enhanced_process_invoice_json(data, existing_bills, ocr_text)


def process_proforma_json_ai_enhanced(data: dict, ocr_text: str = "") -> dict:
    """–ê–ª–∏–∞—Å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    return enhanced_process_proforma_json(data, ocr_text)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_ai_integration():
    """–¢–µ—Å—Ç AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    status = get_ai_status()
    print(f"AI –¥–æ—Å—Ç—É–ø–µ–Ω: {status['ai_available']}")
    print(f"OpenAI –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {status['openai_configured']}")
    print(f"–í–µ—Ä—Å–∏—è: {status['version']}")
    
    if not status['ai_available']:
        print("‚ùå AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return False
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    test_ocr = """
    INVOICE
    BMW Deutschland GmbH
    VAT: DE123456789
    
    Invoice No: BMW-2025-001
    Date: 15.07.2025
    
    Vehicle: BMW X5 xDrive40i
    VIN: WBAJB4C51PBY12345
    Price: 65,000.00 EUR
    """
    
    test_data = {"supplier": {"name": ""}, "bill_number": ""}
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞...")
    result = enhanced_process_invoice_json(test_data, [], test_ocr)
    
    ai_report = create_ai_analysis_report(result)
    print(f"‚úÖ AI –æ—Ç—á–µ—Ç: {ai_report}")
    
    return True


if __name__ == "__main__":
    test_ai_integration() 