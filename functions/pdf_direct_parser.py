#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π –ø–∞—Ä—Å–µ—Ä PDF —Ç–∞–±–ª–∏—Ü –±–µ–∑ OCR
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è telegram bot
"""

import fitz  # PyMuPDF
import re
from typing import List, Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)

def parse_vat_table_from_pdf(text: str) -> Dict[float, int]:
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—É VAT –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:
    Zestawienie sprzeda≈ºy w/g stawek podatku:
    Netto Stawka Kwota VAT
    44,88 23%
    """
    vat_mapping = {}
    try:
        lines = text.split('\n')
        
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É VAT
        vat_table_start = -1
        for i, line in enumerate(lines):
            if 'zestawienie' in line.lower() and 'stawek' in line.lower():
                vat_table_start = i
                break
        
        if vat_table_start != -1:
            # –ü–∞—Ä—Å–∏–º —Å–ª–µ–¥—É—é—â–∏–µ 10 —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            for i in range(vat_table_start + 1, min(vat_table_start + 10, len(lines))):
                line = lines[i].strip()
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "44,88 23%" –∏–ª–∏ "2894,54 8%"
                import re
                match = re.search(r'(\d+[,\.]\d+)\s+(\d+)%', line)
                if match:
                    amount = float(match.group(1).replace(',', '.'))
                    vat_rate = int(match.group(2))
                    vat_mapping[amount] = vat_rate
                    logger.info(f"üìä VAT mapping: {amount} PLN ‚Üí {vat_rate}%")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ VAT —Ç–∞–±–ª–∏—Ü—ã: {e}")
    
    return vat_mapping

def extract_flower_positions_from_pdf(pdf_path: str) -> List[Dict[str, Any]]:
    """
    –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ô –†–ê–ë–û–ß–ò–ô –ê–õ–ì–û–†–ò–¢–ú –ò–ó perfect_pdf_parser.py
    """
    
    try:
        doc = fitz.open(pdf_path)
        positions = []
        
        table_found = False
        
        for page_num in range(len(doc)):
            page = doc.load_page(page_num)
            text = page.get_text()
            lines = [line.strip() for line in text.split('\n') if line.strip()]
            
            logger.info(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num + 1}, —Å—Ç—Ä–æ–∫: {len(lines)}")
            
            # –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É VAT –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            vat_mapping = parse_vat_table_from_pdf(text)
            
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            table_start = -1
            if page_num == 0:
                for i, line in enumerate(lines):
                    if 'Lp.' in line and 'Nazwa towaru' in line:
                        table_start = i
                        table_found = True
                        logger.info(f"üìã –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1}")
                        break
                
                if table_start == -1:
                    logger.info("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    continue
            else:
                # –ù–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –Ω–∞–π–¥–µ–Ω–∞
                if not table_found:
                    logger.info("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                logger.info("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                table_start = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            i = table_start + 1
            while i < len(lines):
                line = lines[i]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫–æ–Ω–µ—Ü –ª–∏ —Ç–∞–±–ª–∏—Ü—ã
                if any(keyword in line for keyword in ['RAZEM:', 'Razem do zap≈Çaty', 'S≈Çownie']):
                    break
                
                # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –µ–¥–∏–Ω–∏—Ü–µ–π –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º)
                excluded_headers = ['szt', 'PKWiU / CN', 'Kwota', 'VAT', 'Warto≈õƒá', 'brutto', 'netto', 'Stawka', 'Cena', 'Rabat%', 'przed', 'J.m.', 'Ilo≈õƒá', 'Cena przed']
                if (re.search(r'[A-Za-z]', line) and 
                    line not in excluded_headers and 
                    not re.match(r'^\d+[,%]\d*$', line) and
                    not re.match(r'^\d+%$', line)):
                    
                    # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                    name = line
                    
                    # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
                    j = i + 1
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö
                    collected_data = []
                    while j < min(i + 10, len(lines)):
                        collected_data.append(lines[j])
                        j += 1
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                    position_num = None
                    quantity = None
                    price = None
                    
                    # –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, "szt", —Ü–µ–Ω–∞
                    for idx, data_line in enumerate(collected_data):
                        # –ò—â–µ–º –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ)
                        if position_num is None and re.match(r'^\d+$', data_line):
                            pos_num = int(data_line)
                            if 1 <= pos_num <= 27:
                                position_num = pos_num
                                
                                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
                                if idx + 1 < len(collected_data):
                                    next_line = collected_data[idx + 1]
                                    if re.match(r'^\d+$', next_line):
                                        qty = int(next_line)
                                        if 1 <= qty <= 100:
                                            quantity = qty
                                
                                # –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ "szt" (–æ–±—ã—á–Ω–æ —á–µ—Ä–µ–∑ 1-2 —Å—Ç—Ä–æ–∫–∏)
                                for price_idx in range(idx + 2, min(idx + 5, len(collected_data))):
                                    price_line = collected_data[price_idx]
                                    if re.match(r'^\d+,\d+$', price_line):
                                        price_val = float(price_line.replace(',', '.'))
                                        if 0.5 <= price_val <= 100:
                                            price = price_val
                                            break
                                
                                # –ò—â–µ–º VAT –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö –ø–æ—Å–ª–µ —Ü–µ–Ω—ã
                                vat_rate = 8  # –¥–µ—Ñ–æ–ª—Ç
                                for vat_idx in range(idx + 3, min(idx + 8, len(collected_data))):
                                    vat_line = collected_data[vat_idx]
                                    if re.match(r'^\d+%$', vat_line):
                                        vat_rate = int(vat_line.replace('%', ''))
                                        break
                                
                                break
                    
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if position_num and quantity and price:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º VAT –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≤ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        tax_rate = vat_rate  # –£–∂–µ –Ω–∞–π–¥–µ–Ω –≤—ã—à–µ
                        
                        logger.info(f"üìä VAT –¥–ª—è '{name}': {tax_rate}% (–Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞)")
                        
                        positions.append({
                            'position': position_num,
                            'name': name,
                            'quantity': quantity,
                            'unit_price_netto': price,
                            'vat_percent': tax_rate
                        })
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    i = j
                else:
                    i += 1
        
        doc.close()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏
        positions.sort(key=lambda x: x.get('position', 999))
        
        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π –∏–∑ PDF")
        return positions
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF: {e}")
        return []

def format_for_telegram_bot(pdf_positions: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç PDF –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å telegram bot
    
    Args:
        pdf_positions: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç extract_flower_positions_from_pdf
        
    Returns:
        –°–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä—Å–µ—Ä–∞–º–∏
    """
    
    formatted_lines = []
    for item in pdf_positions:
        formatted_lines.append({
            'name': item['name'],
            'quantity': item['quantity'],
            'price_net': item['unit_price_netto'],
            'tax_percent': item['vat_percent']
        })
    
    return formatted_lines

def is_suitable_for_pdf_parsing(file_path: str) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è PDF –ø–∞—Ä—Å–∏–Ω–≥–∞
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        
    Returns:
        True –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è PDF –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    
    try:
        if not file_path.lower().endswith('.pdf'):
            return False
            
        doc = fitz.open(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π
        has_text = False
        has_table_structure = False
        
        for page_num in range(min(2, len(doc))):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page = doc.load_page(page_num)
            text = page.get_text()
            
            if len(text.strip()) > 100:  # –ï—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞
                has_text = True
                
                # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–∞–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                if any(keyword in text for keyword in [
                    'Lp.', 'Nazwa', 'Ilo≈õƒá', 'szt', 'Cena', 'Warto≈õƒá', 'VAT'
                ]):
                    has_table_structure = True
                    break
        
        doc.close()
        
        result = has_text and has_table_structure
        logger.info(f"üìã PDF –ø–∞—Ä—Å–∏–Ω–≥ {'–ü–û–î–•–û–î–ò–¢' if result else '–ù–ï –ü–û–î–•–û–î–ò–¢'} –¥–ª—è {file_path}")
        logger.info(f"   –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π: {'‚úÖ' if has_text else '‚ùå'}")
        logger.info(f"   –¢–∞–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {'‚úÖ' if has_table_structure else '‚ùå'}")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PDF: {e}")
        return False
