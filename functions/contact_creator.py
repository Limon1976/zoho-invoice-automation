"""
Contact Creator for Telegram Bot
===============================

–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
–ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Ñ–æ—Ä–º –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ Telegram –±–æ—Ç–µ.
"""

import sys
import os
from pathlib import Path
from typing import Dict, Optional, Any, Tuple
import logging
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.append(str(Path(__file__).parent.parent / "src"))

from src.domain.services.contact_cache import OptimizedContactCache
from src.infrastructure.zoho_api import ZohoAPIClient
from src.infrastructure.config import get_config
from functions.agent_invoice_parser import is_our_company
from functions.phone_parser import parse_phone_number, format_phone_for_zoho

logger = logging.getLogger(__name__)

class SupplierContactCreator:
    """–°–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ –∫—ç—à–µ–º"""
        self.config = get_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Zoho API –∫–ª–∏–µ–Ω—Ç
        if not self.config.zoho.refresh_token:
            raise ValueError("ZOHO_REFRESH_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        self.zoho_api = ZohoAPIClient(
            client_id=self.config.zoho.client_id,
            client_secret=self.config.zoho.client_secret,
            refresh_token=self.config.zoho.refresh_token
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        cache_file = Path("data/optimized_cache/all_contacts_optimized.json")
        self.contact_cache = OptimizedContactCache(str(cache_file)) if cache_file.exists() else None
        
        # ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π Zoho
        self.organizations = {
            "20092948714": "TaVie Europe O√ú",    # Estonia
            "20082562863": "PARKENTERTAINMENT"   # Poland
        }
    
    async def check_and_create_supplier_contact(self, document_data: Dict[str, Any]) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        
        Args:
            document_data: –î–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–æ—Ä–º—ã/–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            
        Returns:
            Tuple[success, message]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            supplier_data = self._extract_supplier_data(document_data)
            if not supplier_data:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—à–∞ –ª–∏ —ç—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è
            if self._is_our_company(supplier_data):
                return True, f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {supplier_data['name']} - —ç—Ç–æ –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –∫—ç—à–µ
            existing_contact = await self._find_existing_contact(supplier_data)
            if existing_contact:
                return True, f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_contact.company_name} (VAT: {existing_contact.vat_number})"
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
            success, contact_id, created_contact_data = await self._create_new_contact(supplier_data)
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if self.contact_cache and created_contact_data:
                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {supplier_data['name']}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
                    org_id = self._determine_organization(supplier_data["country"])
                    org_name = "PARKENTERTAINMENT" if supplier_data["country"] == "Poland" else "TaVie Europe O√ú"
                    
                    await self._refresh_cache(org_id, org_name, new_contact_data=created_contact_data)
                    logger.info(f"‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {org_name}, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å: {supplier_data['name']}")
                else:
                    logger.warning("‚ö†Ô∏è –ö—ç—à –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                
                return True, f"üéâ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫: {supplier_data['name']} (ID: {contact_id})"
            else:
                return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è {supplier_data['name']}"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_and_create_supplier_contact: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(e)}"
    
    def _normalize_company_name(self, company_name: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, —Å–æ–∫—Ä–∞—â–∞—è —Ñ–æ—Ä–º—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"""
        if not company_name:
            return ""
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        if isinstance(company_name, dict):
            name = company_name.get('name', '') or company_name.get('company_name', '') or str(company_name)
        elif isinstance(company_name, str):
            name = company_name.strip()
        else:
            name = str(company_name).strip() if company_name else ""
        
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ñ–æ—Ä–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        legal_forms = {
            # –ü–æ–ª—å—Å–∫–∏–µ
            "SP√ì≈ÅKA Z OGRANICZONƒÑ ODPOWIEDZIALNO≈öCIƒÑ": "Sp. z o.o.",
            "Sp√≥≈Çka z ograniczonƒÖ odpowiedzialno≈õciƒÖ": "Sp. z o.o.",
            "sp√≥≈Çka z ograniczonƒÖ odpowiedzialno≈õciƒÖ": "Sp. z o.o.",
            "SPOLKA Z OGRANICZONA ODPOWIEDZIALNOSCIA": "Sp. z o.o.",
            "Spolka z ograniczona odpowiedzialnoscia": "Sp. z o.o.",
            "SP√ì≈ÅKA AKCYJNA": "S.A.",
            "Sp√≥≈Çka Akcyjna": "S.A.",
            "sp√≥≈Çka akcyjna": "S.A.",
            
            # –ù–µ–º–µ—Ü–∫–∏–µ
            "GESELLSCHAFT MIT BESCHR√ÑNKTER HAFTUNG": "GmbH",
            "Gesellschaft mit beschr√§nkter Haftung": "GmbH",
            "gesellschaft mit beschr√§nkter haftung": "GmbH",
            "AKTIENGESELLSCHAFT": "AG",
            "Aktiengesellschaft": "AG",
            "aktiengesellschaft": "AG",
            
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
            "LIMITED LIABILITY COMPANY": "LLC",
            "Limited Liability Company": "LLC", 
            "limited liability company": "LLC",
            "LIMITED COMPANY": "Ltd",
            "Limited Company": "Ltd",
            "limited company": "Ltd",
            "CORPORATION": "Corp",
            "Corporation": "Corp",
            "corporation": "Corp",
            "INCORPORATED": "Inc",
            "Incorporated": "Inc",
            "incorporated": "Inc",
            
            # –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ
            "SOCI√âT√â √Ä RESPONSABILIT√â LIMIT√âE": "SARL",
            "Soci√©t√© √† responsabilit√© limit√©e": "SARL",
            "soci√©t√© √† responsabilit√© limit√©e": "SARL",
            "SOCI√âT√â ANONYME": "SA",
            "Soci√©t√© Anonyme": "SA",
            "soci√©t√© anonyme": "SA",
            
            # –ò—Å–ø–∞–Ω—Å–∫–∏–µ
            "SOCIEDAD DE RESPONSABILIDAD LIMITADA": "SRL",
            "Sociedad de Responsabilidad Limitada": "SRL",
            "sociedad de responsabilidad limitada": "SRL",
            "SOCIEDAD AN√ìNIMA": "SA",
            "Sociedad An√≥nima": "SA",
            "sociedad an√≥nima": "SA",
            
            # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ
            "SOCIET√Ä A RESPONSABILIT√Ä LIMITATA": "SRL",
            "Societ√† a Responsabilit√† Limitata": "SRL",
            "societ√† a responsabilit√† limitata": "SRL",
            "SOCIET√Ä PER AZIONI": "SpA",
            "Societ√† per Azioni": "SpA",
            "societ√† per azioni": "SpA",
            
            # –†—É—Å—Å–∫–∏–µ
            "–û–ë–©–ï–°–¢–í–û –° –û–ì–†–ê–ù–ò–ß–ï–ù–ù–û–ô –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–¨–Æ": "–û–û–û",
            "–û–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é": "–û–û–û",
            "–æ–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é": "–û–û–û",
            "–ê–ö–¶–ò–û–ù–ï–†–ù–û–ï –û–ë–©–ï–°–¢–í–û": "–ê–û",
            "–ê–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ": "–ê–û",
            "–∞–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ": "–ê–û",
            "–ó–ê–ö–†–´–¢–û–ï –ê–ö–¶–ò–û–ù–ï–†–ù–û–ï –û–ë–©–ï–°–¢–í–û": "–ó–ê–û",
            "–ó–∞–∫—Ä—ã—Ç–æ–µ –∞–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ": "–ó–ê–û",
            "–∑–∞–∫—Ä—ã—Ç–æ–µ –∞–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ": "–ó–ê–û",
            "–û–¢–ö–†–´–¢–û–ï –ê–ö–¶–ò–û–ù–ï–†–ù–û–ï –û–ë–©–ï–°–¢–í–û": "–û–ê–û",
            "–û—Ç–∫—Ä—ã—Ç–æ–µ –∞–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ": "–û–ê–û",
            "–æ—Ç–∫—Ä—ã—Ç–æ–µ –∞–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ": "–û–ê–û",
            
            # –≠—Å—Ç–æ–Ω—Å–∫–∏–µ
            "OSA√úHING": "O√ú",
            "Osa√ºhing": "O√ú",
            "osa√ºhing": "O√ú",
            "AKTSIASELTS": "AS",
            "Aktsiaselts": "AS",
            "aktsiaselts": "AS",
        }
        
        # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        for full_form, short_form in legal_forms.items():
            if full_form in name:
                name = name.replace(full_form, short_form)
                break
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –∫—Ä–∞—Å–∏–≤–æ–º—É –≤–∏–¥—É
        name = " ".join(name.split())
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
        name = self._remove_duplicate_legal_forms(name)
        
        return name
    
    def _remove_duplicate_legal_forms(self, name: str) -> str:
        """–£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–æ—Ä–º—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏"""
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
        short_forms = [
            "Sp. z o.o.", "S.A.", "GmbH", "AG", "LLC", "Ltd", "Corp", "Inc",
            "SARL", "SA", "SRL", "SpA", "–û–û–û", "–ê–û", "–ó–ê–û", "–û–ê–û", "O√ú", "AS"
        ]
        
        for form in short_forms:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –≤ –∫–æ–Ω—Ü–µ
            parts = name.split(form)
            if len(parts) > 2:  # –ó–Ω–∞—á–∏—Ç —Ñ–æ—Ä–º–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –≤ –∫–æ–Ω–µ—Ü
                clean_name = form.join(parts[:-1]).strip()
                name = f"{clean_name} {form}" if clean_name else form
        
        return name.strip()

    def _extract_supplier_data(self, document_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –ø—Ä–æ—Ñ–æ—Ä–º—ã/–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É supplier.*
            supplier_info = document_data.get("supplier", {})
            
            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö (–ø–ª–æ—Å–∫–∏–µ –∏ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ)
            supplier_name = (
                supplier_info.get("name") or  # supplier.name
                document_data.get("supplier_name") or 
                document_data.get("vendor_name") or
                document_data.get("from_name") or
                document_data.get("company_name")
            )
            
            supplier_vat = (
                supplier_info.get("vat") or  # supplier.vat
                document_data.get("supplier_vat") or
                document_data.get("vendor_vat") or 
                document_data.get("from_vat") or
                document_data.get("vat_number")
            )
            
            # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏–∑ LLM, –∑–∞—Ç–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π
            supplier_address = (
                supplier_info.get("address") or  # supplier.address
                document_data.get("supplier_address") or
                document_data.get("vendor_address") or
                document_data.get("from_address") or
                document_data.get("address")
            )
            street_llm = document_data.get("supplier_street")
            city_llm = document_data.get("supplier_city")
            zip_llm = document_data.get("supplier_zip_code")
            
            supplier_email = (
                supplier_info.get("email") or  # supplier.email
                document_data.get("supplier_email") or
                document_data.get("vendor_email") or
                document_data.get("from_email") or
                document_data.get("email")
            )
            
            supplier_phone = (
                supplier_info.get("phone") or  # supplier.phone
                document_data.get("supplier_phone") or
                document_data.get("phone")
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–≥–æ LLM-—Ñ–æ—Ä–º–∞—Ç–∞ bank.{...})
            bank_info = document_data.get("bank") or {}
            bank_name = (
                document_data.get("bank_name")
                or bank_info.get("bank_name")
                or bank_info.get("name")
            )
            iban = (
                document_data.get("iban")
                or bank_info.get("iban")
            )
            bank_account = (
                document_data.get("bank_account")
                or bank_info.get("bank_account")
            )
            swift_bic = (
                document_data.get("swift_bic")
                or document_data.get("swift")
                or bank_info.get("swift")
                or bank_info.get("swift_bic")
            )
            payment_method = (
                document_data.get("payment_method")
                or bank_info.get("payment_method")
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ª–æ–≥–æ–≤—É—é —Å—Ç–∞–≤–∫—É –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            tax_rate = (
                document_data.get("tax_rate") or
                document_data.get("vat_rate") or
                document_data.get("tax_percentage") or
                self._extract_tax_from_text(document_data.get("extracted_text", ""))
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ZIP –∫–æ–¥ (LLM –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            supplier_zip = (
                zip_llm or
                supplier_info.get("zip_code") or
                document_data.get("zip_code") or
                document_data.get("postal_code")
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç supplier.country, –∑–∞—Ç–µ–º –ø–æ VAT/–∞–¥—Ä–µ—Å—É
            country = (
                supplier_info.get("country") or  # supplier.country
                document_data.get("supplier_country") or
                self._determine_country(supplier_vat or "", self._extract_address_string(supplier_address))
            )
            
            if not supplier_name:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
                return None
            
            # üéØ –ù–û–†–ú–ê–õ–ò–ó–£–ï–ú –ù–ê–ó–í–ê–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–ò
            normalized_name = self._normalize_company_name(supplier_name)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º VAT –Ω–æ–º–µ—Ä
            normalized_vat = self._normalize_vat(supplier_vat or "", country)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º issuer_contact_person, –∑–∞—Ç–µ–º contact_person
            contact_person = (
                supplier_info.get("contact_person")
                or document_data.get("issuer_contact_person")
                or document_data.get("contact_person")
                or ""
            )
            # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if isinstance(contact_person, str) and contact_person.strip().lower() == "pavel kaliadka":
                contact_person = ""

            return {
                "name": normalized_name,  # –¢–µ–ø–µ—Ä—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ
                "vat": normalized_vat,
                "address": self._extract_address_string(supplier_address),
                "zip_code": supplier_zip.strip() if supplier_zip and isinstance(supplier_zip, str) else "",
                "supplier_street": (street_llm or ""),
                "supplier_city": (city_llm or ""),
                "email": supplier_email.strip() if supplier_email and isinstance(supplier_email, str) else "",
                "country": country,
                "phone": supplier_phone.strip() if supplier_phone and isinstance(supplier_phone, str) else "",
                # –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
                "bank_name": bank_name,
                "iban": iban,
                "bank_account": bank_account,
                "swift_bic": swift_bic,
                "payment_method": payment_method,
                # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ
                "contact_person": contact_person,
                # –ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
                "tax_rate": tax_rate
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}")
            return None
    
    def _is_our_company(self, supplier_data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –Ω–∞—à–µ–π"""
        return is_our_company(supplier_data["name"], supplier_data["vat"])
    
    async def _find_existing_contact(self, supplier_data: Dict[str, Any]) -> Optional[Any]:
        """–ò—â–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ –∫—ç—à–µ"""
        if not self.contact_cache:
            return None
        
        # –ü–æ–∏—Å–∫ –ø–æ VAT (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if supplier_data["vat"]:
            found = self.contact_cache.search_by_vat(supplier_data["vat"])
            if found:
                return found
        
        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
        if supplier_data["name"]:
            found = self.contact_cache.search_by_company(supplier_data["name"])
            if found:
                return found[0] if found else None
        
        # –ü–æ–∏—Å–∫ –ø–æ email
        if supplier_data["email"]:
            found = self.contact_cache.search_by_email(supplier_data["email"])
            if found:
                return found
        
        return None
    
    async def _create_new_contact(self, supplier_data: Dict[str, Any]) -> Tuple[bool, Optional[str], Optional[Dict[str, Any]]]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ Zoho Books"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            org_id = self._determine_organization(supplier_data["country"])
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Zoho API
            # Company Name –∏ Display Name –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏ —á–∏—Ç–∞–µ–º—ã–º–∏
            normalized_name = supplier_data["name"]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –ø–æ–ª—è
            billing_address = {}
            if supplier_data["address"]:
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å: '{supplier_data['address']}'")
                
                address_text = supplier_data["address"] if isinstance(supplier_data["address"], str) else ""
                street_llm = supplier_data.get("supplier_street") or ""
                city_llm = supplier_data.get("supplier_city") or ""
                zip_llm = supplier_data.get("zip_code") or supplier_data.get("supplier_zip_code") or ""
                
                if street_llm or city_llm or zip_llm:
                    billing_address = {
                        "address": street_llm or address_text,
                        "city": city_llm,
                        "zip": zip_llm,
                        "country": supplier_data["country"]
                    }
                    logger.info(f"‚úÖ LLM-–∞–¥—Ä–µ—Å: —É–ª–∏—Ü–∞='{billing_address['address']}', –≥–æ—Ä–æ–¥='{billing_address['city']}', –∏–Ω–¥–µ–∫—Å='{billing_address['zip']}', —Å—Ç—Ä–∞–Ω–∞='{supplier_data['country']}'")
                elif address_text:
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ–º–µ—Ü–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ —Å –∑–µ–º–ª–µ–π –≤ —Å—Ç—Ä–æ–∫–µ
                    if "Baden-W√ºrttemberg" in address_text:
                        parts = [p.strip() for p in address_text.split(',')]
                        if len(parts) >= 4:
                            street = parts[0]
                            zip_code = parts[2]
                            city_part = parts[3]
                            city = city_part.split(" - ")[1].strip() if " - " in city_part else city_part
                            billing_address = {
                                "address": street,
                                "city": city,
                                "zip": zip_code,
                                "country": supplier_data["country"]
                            }
                            logger.info(f"‚úÖ –†–∞–∑–æ–±—Ä–∞–Ω –Ω–µ–º–µ—Ü–∫–∏–π –∞–¥—Ä–µ—Å: —É–ª–∏—Ü–∞='{street}', –≥–æ—Ä–æ–¥='{city}', –∏–Ω–¥–µ–∫—Å='{zip_code}'")
                        else:
                            billing_address = {"address": address_text, "country": supplier_data["country"]}
                    else:
                        parts = [p.strip() for p in address_text.split(',')]
                        if len(parts) >= 3:
                            billing_address = {
                                "address": parts[0],
                                "city": parts[1],
                                "zip": zip_llm,
                                "country": supplier_data["country"]
                            }
                            logger.info(f"‚úÖ –†–∞–∑–æ–±—Ä–∞–Ω –∞–¥—Ä–µ—Å: —É–ª–∏—Ü–∞='{billing_address['address']}', –≥–æ—Ä–æ–¥='{billing_address['city']}', –∏–Ω–¥–µ–∫—Å='{billing_address['zip']}', —Å—Ç—Ä–∞–Ω–∞='{supplier_data['country']}'")
                        else:
                            billing_address = {"address": address_text, "country": supplier_data["country"]}
                else:
                    billing_address = {
                        "address": supplier_data["address"],
                        "country": supplier_data["country"]
                    }
            
            contact_payload = {
                "contact_name": normalized_name,    # Display Name - –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è  
                "company_name": normalized_name,    # Company Name - –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                "contact_type": "vendor",
                "billing_address": billing_address,
                "shipping_address": billing_address.copy(),  # –ö–æ–ø–∏—Ä—É–µ–º billing address –≤ shipping
                "custom_fields": []
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ remarks –µ—Å–ª–∏ –µ—Å—Ç—å (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ª–∏–º–∏—Ç–∞ 100 —Å–∏–º–≤–æ–ª–æ–≤)
            remarks_parts = []
            if supplier_data.get("bank_name"):
                remarks_parts.append(supplier_data['bank_name'])
                logger.info(f"üè¶ –î–æ–±–∞–≤–ª—è–µ–º –±–∞–Ω–∫: {supplier_data['bank_name']}")
            if supplier_data.get("iban"):
                remarks_parts.append(supplier_data['iban'])
            elif supplier_data.get("bank_account"):
                remarks_parts.append(supplier_data['bank_account'])
                logger.info(f"üè¶ –î–æ–±–∞–≤–ª—è–µ–º IBAN: {supplier_data['iban']}")
            if supplier_data.get("swift_bic"):
                remarks_parts.append(supplier_data['swift_bic'])
                logger.info(f"üè¶ –î–æ–±–∞–≤–ª—è–µ–º SWIFT: {supplier_data['swift_bic']}")
            
            if remarks_parts:
                remarks_text = "\n".join(remarks_parts)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç 100 —Å–∏–º–≤–æ–ª–æ–≤
                if len(remarks_text) > 100:
                    # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–Ω–∫
                    compact_remarks = []
                    if supplier_data.get("bank_name"):
                        compact_remarks.append(supplier_data['bank_name'])
                    remarks_text = " ".join(compact_remarks)
                    
                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç, –æ–±—Ä–µ–∑–∞–µ–º
                    if len(remarks_text) > 100:
                        remarks_text = remarks_text[:97] + "..."
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±–∞ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                contact_payload["remarks"] = remarks_text
                contact_payload["notes"] = remarks_text
                logger.info(f"üìù Remarks/Notes —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã ({len(remarks_text)} —Å–∏–º–≤–æ–ª–æ–≤): {remarks_text}")
            else:
                logger.warning("‚ö†Ô∏è –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –î–æ–±–∞–≤–ª—è–µ–º VAT –µ—Å–ª–∏ –µ—Å—Ç—å
            if supplier_data["vat"]:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ VAT –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                vat_field = "cf_tax_id" if org_id == "20082562863" else "cf_vat_id"
                contact_payload["custom_fields"].append({
                    "api_name": vat_field,
                    "value": supplier_data["vat"]
                })
                logger.info(f"üÜî –î–æ–±–∞–≤–ª—è–µ–º VAT: {supplier_data['vat']} –≤ –ø–æ–ª–µ {vat_field}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º email –µ—Å–ª–∏ –µ—Å—Ç—å
            if supplier_data["email"]:
                contact_payload["email"] = supplier_data["email"]
                logger.info(f"üìß –î–æ–±–∞–≤–ª—è–µ–º email: {supplier_data['email']}")
            else:
                logger.warning("‚ö†Ô∏è Email –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å (–≤ –ø–æ–ª—è phone + phone_code + phone_country_code)
            if supplier_data["phone"]:
                # –ü–∞—Ä—Å–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Zoho
                phone_data = parse_phone_number(supplier_data["phone"])
                formatted_phone = phone_data.get('national_format', supplier_data["phone"])  # –±–µ–∑ +
                contact_payload["phone"] = formatted_phone
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                if phone_data.get('country_calling_code'):
                    code = str(phone_data['country_calling_code'])
                    contact_payload["phone_code"] = code
                    contact_payload["phone_country_code"] = code
                if phone_data.get('is_valid'):
                    logger.info(f"üìû –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω: {supplier_data['phone']} -> {formatted_phone} (—Å—Ç—Ä–∞–Ω–∞: {phone_data.get('country_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})")
                else:
                    logger.warning(f"üìû –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–µ –≤–∞–ª–∏–¥–µ–Ω): {supplier_data['phone']} -> {formatted_phone}")
            else:
                logger.warning("‚ö†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º Primary Contact Person —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            contact_persons = []
            if supplier_data.get("contact_person") or supplier_data.get("email") or supplier_data.get("phone"):
                contact_person = {
                    "salutation": "",
                    "first_name": supplier_data.get("contact_person", "").split()[0] if supplier_data.get("contact_person") else "",
                    "last_name": supplier_data.get("contact_person", "").split()[-1] if supplier_data.get("contact_person") and len(supplier_data.get("contact_person").split()) > 1 else "",
                    "is_primary_contact": True
                }
                
                if supplier_data.get("email"):
                    contact_person["email"] = supplier_data["email"]
                    logger.info(f"üë§ –î–æ–±–∞–≤–ª—è–µ–º email –≤ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: {supplier_data['email']}")
                
                if supplier_data.get("phone"):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
                    phone_data = parse_phone_number(supplier_data["phone"])
                    formatted_phone = phone_data.get('national_format', supplier_data["phone"])  # –±–µ–∑ +
                    
                    contact_person["phone"] = formatted_phone
                    logger.info(f"üë§ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: {supplier_data['phone']} -> {formatted_phone}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ –ø–æ–ª–µ–π
                if contact_person.get('first_name') or contact_person.get('last_name') or contact_person.get('email') or contact_person.get('phone'):
                    contact_persons.append(contact_person)
                    contact_payload["contact_persons"] = contact_persons
                    logger.info(f"üë§ –°–æ–∑–¥–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: {contact_person.get('first_name','')} {contact_person.get('last_name','')}")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Tax Rate –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            tax_rate_id = await self._determine_tax_rate(org_id, supplier_data)
            if tax_rate_id:
                contact_payload["tax_rate_id"] = tax_rate_id
                logger.info(f"üí∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Tax Rate ID: {tax_rate_id}")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Tax Rate")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ Zoho
            logger.info(f"–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ Zoho: {supplier_data['name']} (org: {org_id})")
            logger.info(f"üìã Contact Payload: {contact_payload}")
            response = await self.zoho_api.create_contact(contact_payload, org_id)
            
            if response and "contact" in response:
                contact_id = response["contact"]["contact_id"]
                created_contact_data = response["contact"]  # –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                logger.info(f"–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {supplier_data['name']} (ID: {contact_id})")
                return True, contact_id, created_contact_data
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: {response}")
                return False, None, None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Zoho: {e}")
            return False, None, None
    
    def _determine_country(self, vat: str, address: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω—É –ø–æ VAT –ø—Ä–µ—Ñ–∏–∫—Å—É –∏–ª–∏ –∞–¥—Ä–µ—Å—É"""
        if vat and len(vat) >= 2:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑ VAT
            vat_prefix = vat[:2].upper()
            country_map = {
                "PL": "Poland",
                "EE": "Estonia", 
                "DE": "Germany",
                "FR": "France",
                "IT": "Italy",
                "ES": "Spain",
                "NL": "Netherlands",
                "BE": "Belgium",
                "AT": "Austria",
                "SE": "Sweden",
                "DK": "Denmark", 
                "FI": "Finland",
                "GB": "United Kingdom",
                "IE": "Ireland"
            }
            if vat_prefix in country_map:
                return country_map[vat_prefix]
        
        # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É (–±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
        if address:
            address_lower = address.lower()
            if any(word in address_lower for word in ["poland", "polska", "warszawa", "krakow"]):
                return "Poland"
            elif any(word in address_lower for word in ["estonia", "tallinn", "tartu"]):
                return "Estonia"
            elif any(word in address_lower for word in ["germany", "deutschland", "berlin", "m√ºnchen"]):
                return "Germany"
        
        return "Poland"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    
    def _extract_address_string(self, address) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∞–¥—Ä–µ—Å–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—è"""
        if not address:
            return ""
        
        if isinstance(address, str):
            return address
        
        if isinstance(address, dict):
            # –°–æ–±–∏—Ä–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            parts = []
            if address.get('address'):
                parts.append(address['address'])
            if address.get('city'):
                parts.append(address['city'])
            if address.get('country'):
                parts.append(address['country'])
            return ", ".join(parts)
        
        return str(address)
    
    def _normalize_vat(self, vat: str, country: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç VAT –Ω–æ–º–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º"""
        if not vat:
            return ""
        
        # –û—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤
        clean_vat = vat.replace(" ", "").replace("-", "").upper()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ø–æ —Å—Ç—Ä–∞–Ω–µ
        country_prefixes = {
            "Poland": "PL",
            "Estonia": "EE",
            "Germany": "DE", 
            "France": "FR",
            "Italy": "IT",
            "Spain": "ES",
            "Netherlands": "NL",
            "Belgium": "BE",
            "Austria": "AT",
            "Sweden": "SE",
            "Denmark": "DK",
            "Finland": "FI",
            "United Kingdom": "GB",
            "Ireland": "IE"
        }
        
        expected_prefix = country_prefixes.get(country, "")
        
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if expected_prefix and clean_vat.startswith(expected_prefix):
            return clean_vat
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–µ—Ñ–∏–∫—Å - –∑–∞–º–µ–Ω—è–µ–º
        if len(clean_vat) >= 2 and clean_vat[:2].isalpha():
            if expected_prefix:
                return expected_prefix + clean_vat[2:]
        
        # –ï—Å–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
        if expected_prefix and clean_vat.isdigit():
            return expected_prefix + clean_vat
        
        return clean_vat
    
    def _determine_organization(self, country: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ Zoho –ø–æ —Å—Ç—Ä–∞–Ω–µ"""
        # –î–ª—è –ø–æ–ª—å—Å–∫–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ - PARKENTERTAINMENT
        # –î–ª—è —ç—Å—Ç–æ–Ω—Å–∫–∏—Ö –∏ –¥—Ä—É–≥–∏—Ö EU - TaVie Europe
        if country == "Poland":
            return "20082562863"  # PARKENTERTAINMENT
        else:
            return "20092948714"  # TaVie Europe O√ú
    
    async def _refresh_cache(self, org_id: Optional[str] = None, org_name: Optional[str] = None, new_contact_data: Optional[Dict[str, Any]] = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"""
        try:
            if self.contact_cache and new_contact_data and org_id:
                logger.info("üîÑ –î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ –∫—ç—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
                
                # 1. –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫—ç—à (–≥–ª–∞–≤–Ω—ã–π –∫—ç—à)
                self.contact_cache.add_contacts([new_contact_data])
                self.contact_cache.save_cache()
                
                logger.info(f"‚úÖ –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–ª–∞–≤–Ω—ã–π –∫—ç—à: {new_contact_data.get('contact_name', 'Unknown')}")
                
                # 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ –∫—ç—à –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                if org_name == "TaVie Europe O√ú":
                    org_cache_file = "data/optimized_cache/TaVie_Europe_optimized.json"
                elif org_name == "PARKENTERTAINMENT":
                    org_cache_file = "data/optimized_cache/PARKENTERTAINMENT_optimized.json"
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org_name}")
                    return
                
                from src.domain.services.contact_cache import OptimizedContactCache
                org_cache = OptimizedContactCache(org_cache_file)
                org_cache.add_contacts([new_contact_data])
                org_cache.save_cache()
                
                logger.info(f"‚úÖ –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—ç—à {org_name}: {new_contact_data.get('contact_name', 'Unknown')}")
                
            else:
                logger.warning("‚ö†Ô∏è –ö—ç—à –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –∫—ç—à: {e}")
    
    def _extract_tax_from_text(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–ª–æ–≥–æ–≤—É—é —Å—Ç–∞–≤–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        if not text:
            return None
        
        import re
        
        # –ò—â–µ–º –Ω–∞–ª–æ–≥–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ (–¥–ª—è PARKENTERTAINMENT: —Ç–æ–ª—å–∫–æ 0%, 8%, 23%)
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã: "23% VAT", "8 % USt.:", "0% –Ω–∞–ª–æ–≥"
        tax_patterns = [
            r'(\d{1,2})\s*%\s*(?:MwSt|USt|VAT|–Ω–∞–ª–æ–≥)',
            r'(?:MwSt|USt|VAT|–Ω–∞–ª–æ–≥)\s*[:,.]?\s*(\d{1,2})\s*%',
            r'(\d{1,2})\s*%\s*(?:tax|–Ω–∞–ª–æ–≥)',
            r'tax\s*rate\s*:\s*(\d{1,2})\s*%',
            r'(\d{1,2})\s+%\s+(?:USt|MwSt|VAT)',  # "8 % USt"
            r'(\d{1,2})\s*%\s*(?:Umsatzsteuer|Mehrwertsteuer)',  # –Ω–µ–º–µ—Ü–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            r'VAT\s*[:.]?\s*(\d{1,2})\s*%',  # "VAT: 8%"
            r'(\d{1,2})\s*%\s*(?:vat|VAT)'  # "8% VAT"
        ]
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –Ω–∞–ª–æ–≥–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è PARKENTERTAINMENT
        allowed_rates = ["0", "8", "23"]
        
        for pattern in tax_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            for match in matches:
                tax_rate = match.strip()
                if tax_rate in allowed_rates:
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –†–ê–ó–†–ï–®–ï–ù–ù–ê–Ø –Ω–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {tax_rate}%")
                    return tax_rate
                else:
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –ù–ï–î–û–ü–£–°–¢–ò–ú–ê–Ø –Ω–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {tax_rate}% (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã: 0, 8, 23)")
        
        logger.info("üîç –†–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è –Ω–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
    
    async def _determine_tax_rate(self, org_id: str, supplier_data: Dict[str, Any]) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç tax_rate_id –¥–ª—è Zoho –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
        try:
            if org_id == "20092948714":  # TaVie Europe O√ú
                # –î–ª—è TaVie Europe –≤—Å–µ–≥–¥–∞ "tax export" (0%) —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø–æ–∫—É–ø–∞—é—Ç –≤ –≠—Å—Ç–æ–Ω–∏–∏
                logger.info("üí∞ TaVie Europe O√ú -> tax export [0%]")
                return "20092948714000000073"  # tax export [0%]
                
            elif org_id == "20082562863":  # PARKENTERTAINMENT
                # –î–ª—è PARKENTERTAINMENT –Ω–∞–ª–æ–≥ –¢–û–õ–¨–ö–û 0%, 8% –∏–ª–∏ 23% –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                doc_tax_rate = supplier_data.get("tax_rate")
                
                # –ú–∞–ø–ø–∏–Ω–≥ –¢–û–õ–¨–ö–û —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫ PARKENTERTAINMENT
                tax_mapping = {
                    "0": "20082562863000000080",   # Tax Export [0%]
                    "8": "20082562863000000081",   # Tax [8%] (–ª—å–≥–æ—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞)
                    "23": "20082562863000000079",  # Tax PL [23%] (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)
                }
                
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
                if doc_tax_rate and str(doc_tax_rate) in tax_mapping:
                    tax_id = tax_mapping[str(doc_tax_rate)]
                    logger.info(f"üí∞ PARKENTERTAINMENT: –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ {doc_tax_rate}% –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ -> ID: {tax_id}")
                    return tax_id
                
                # –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞ - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 23%
                logger.warning(f"‚ö†Ô∏è PARKENTERTAINMENT: –Ω–∞–ª–æ–≥ {doc_tax_rate}% –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é 23%")
                return tax_mapping["23"]
            
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org_id}")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ª–æ–≥–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏: {e}")
            return None
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.zoho_api:
            await self.zoho_api.close()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
_supplier_creator = None

async def get_supplier_creator() -> SupplierContactCreator:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (singleton)"""
    global _supplier_creator
    if _supplier_creator is None:
        _supplier_creator = SupplierContactCreator()
    return _supplier_creator

async def create_supplier_from_document(document_data: Dict[str, Any]) -> Tuple[bool, str]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    Args:
        document_data: –î–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–æ—Ä–º—ã/–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        
    Returns:
        Tuple[success, message]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    creator = await get_supplier_creator()
    return await creator.check_and_create_supplier_contact(document_data) 