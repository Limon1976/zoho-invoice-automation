#!/usr/bin/env python3
"""
Refresh Zoho Cache
==================

–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ Zoho API
"""

import os
import json
import asyncio
from typing import Dict, List, Any
from datetime import datetime
from pathlib import Path

from src.infrastructure.zoho_api import ZohoAPIClient
from src.domain.services.contact_cache import OptimizedContactCache


class ZohoCacheRefresher:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∏–∑ Zoho API"""
    
    def __init__(self):
        # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç ZohoAPIClient –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        # self.zoho_api = ZohoAPIClient()
        self.cache = OptimizedContactCache()
        self.data_dir = Path("data")
        self.cache_dir = self.data_dir / "optimized_cache"
    
    async def refresh_cache_from_zoho(self) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ Zoho API
        
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∏–∑ Zoho API...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ Zoho
            contacts = await self.zoho_api.get_all_contacts()
            
            if not contacts:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ Zoho")
                return False
            
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ Zoho")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.cache.add_contacts(contacts)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à
            self.cache.save_cache()
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à
            self._recreate_optimized_cache(contacts)
            
            print("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ Zoho")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∏–∑ Zoho: {e}")
            return False
    
    def _recreate_optimized_cache(self, contacts: List[Dict[str, Any]]):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à"""
        try:
            optimized_cache = {
                'contacts': [],
                'vat_index': {},
                'company_index': {},
                'last_updated': datetime.now().isoformat()
            }
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            for contact in contacts:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                cache_entry = self.cache.extract_minimal_data(contact)
                
                optimized_entry = {
                    'contact_id': cache_entry.contact_id,
                    'contact_name': cache_entry.contact_name,
                    'company_name': cache_entry.company_name,
                    'vat_number': cache_entry.vat_number or '',
                    'email': cache_entry.email,
                    'country': cache_entry.billing_address.get('country', '') if cache_entry.billing_address else '',
                    'city': cache_entry.billing_address.get('city', '') if cache_entry.billing_address else ''
                }
                
                optimized_cache['contacts'].append(optimized_entry)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
                vat_number = cache_entry.vat_number or ''
                contact_name = cache_entry.contact_name
                
                if vat_number:
                    optimized_cache['vat_index'][vat_number] = contact_name
                
                if contact_name:
                    optimized_cache['company_index'][contact_name.lower()] = contact_name
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à
            optimized_cache_file = self.cache_dir / "all_contacts_optimized.json"
            with open(optimized_cache_file, 'w', encoding='utf-8') as f:
                json.dump(optimized_cache, f, indent=2, ensure_ascii=False)
            
            print(f"  ‚úÖ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à: {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∞: {e}")
    
    async def check_supplier_exists(self, supplier_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –∫—ç—à–µ
        
        Args:
            supplier_data: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            
        Returns:
            –î–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–ª–∏ None
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ VAT –Ω–æ–º–µ—Ä—É
            vat_number = supplier_data.get('vat', '')
            if vat_number:
                existing = self.cache.search_by_vat(vat_number)
                if existing:
                    return {
                        'contact_id': existing.contact_id,
                        'name': existing.contact_name,
                        'vat': existing.vat_number,
                        'email': existing.email,
                        'country': existing.billing_address.get('country', '') if existing.billing_address else '',
                        'city': existing.billing_address.get('city', '') if existing.billing_address else '',
                        'address': existing.billing_address.get('address', '') if existing.billing_address else ''
                    }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
            company_name = supplier_data.get('name', '')
            if company_name:
                existing_list = self.cache.search_by_company(company_name)
                if existing_list:
                    existing = existing_list[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π
                    return {
                        'contact_id': existing.contact_id,
                        'name': existing.contact_name,
                        'vat': existing.vat_number,
                        'email': existing.email,
                        'country': existing.billing_address.get('country', '') if existing.billing_address else '',
                        'city': existing.billing_address.get('city', '') if existing.billing_address else '',
                        'address': existing.billing_address.get('address', '') if existing.billing_address else ''
                    }
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}")
            return None


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
async def refresh_zoho_cache():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ Zoho API
    
    Returns:
        True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    refresher = ZohoCacheRefresher()
    return await refresher.refresh_cache_from_zoho()


async def check_supplier_in_cache(supplier_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –∫—ç—à–µ
    
    Args:
        supplier_data: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        
    Returns:
        –î–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–ª–∏ None
    """
    refresher = ZohoCacheRefresher()
    return await refresher.check_supplier_exists(supplier_data)


# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def test_cache_refresh():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞"""
    print("üß™ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∏–∑ Zoho")
    
    success = await refresh_zoho_cache()
    
    if success:
        print("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ Zoho")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        test_supplier = {
            'name': 'Horrer Automobile GmbH',
            'vat': 'DE123456789'
        }
        
        existing = await check_supplier_in_cache(test_supplier)
        if existing:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫: {existing['name']}")
        else:
            print("‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞")


def update_contact_in_full_cache(contact_data: dict, organization_name: str) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –≤ –ø–æ–ª–Ω–æ–º –∫—ç—à–µ data/full_contacts/
    
    Args:
        contact_data: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ Zoho API
        organization_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª–Ω–æ–≥–æ –∫—ç—à–∞
        if organization_name == 'TaVie Europe O√ú':
            full_cache_file = "data/full_contacts/TaVie_Europe_20092948714_full.json"
        elif organization_name == 'PARKENTERTAINMENT':
            full_cache_file = "data/full_contacts/PARKENTERTAINMENT_20082562863_full.json" 
        else:
            print(f"   ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {organization_name}")
            return False
            
        if not os.path.exists(full_cache_file):
            print(f"   ‚ùå –§–∞–π–ª –ø–æ–ª–Ω–æ–≥–æ –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_cache_file}")
            return False
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –∫—ç—à
        with open(full_cache_file, 'r', encoding='utf-8') as f:
            full_contacts = json.load(f)
            
        contact_id = contact_data.get('contact_id')
        contact_name = contact_data.get('contact_name', 'Unknown')
        
        # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –ø–æ–ª–Ω–æ–º –∫—ç—à–µ
        contact_found = False
        for i, contact in enumerate(full_contacts):
            if contact.get('contact_id') == contact_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
                full_contacts[i] = contact_data
                contact_found = True
                print(f"   ‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç {contact_name} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ–ª–Ω–æ–º –∫—ç—à–µ")
                break
                
        if not contact_found:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            full_contacts.append(contact_data)
            print(f"   ‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç {contact_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–ª–Ω—ã–π –∫—ç—à")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π –∫—ç—à
        with open(full_cache_file, 'w', encoding='utf-8') as f:
            json.dump(full_contacts, f, ensure_ascii=False, indent=2)
            
        print(f"   üíæ –ü–æ–ª–Ω—ã–π –∫—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {full_cache_file}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫—ç—à–∞: {e}")
        return False


def rebuild_optimized_cache_from_full(organization_name: str) -> bool:
    """
    –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∫—ç—à–∞
    
    Args:
        organization_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        from src.domain.services.contact_cache import OptimizedContactCache
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –∫—ç—à–µ–π
        if organization_name == 'TaVie Europe O√ú':
            full_cache_file = "data/full_contacts/TaVie_Europe_20092948714_full.json"
            optimized_cache_file = "data/optimized_cache/TaVie_Europe_optimized.json"
        elif organization_name == 'PARKENTERTAINMENT':
            full_cache_file = "data/full_contacts/PARKENTERTAINMENT_20082562863_full.json"
            optimized_cache_file = "data/optimized_cache/PARKENTERTAINMENT_optimized.json"
        else:
            print(f"   ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {organization_name}")
            return False
            
        if not os.path.exists(full_cache_file):
            print(f"   ‚ùå –§–∞–π–ª –ø–æ–ª–Ω–æ–≥–æ –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_cache_file}")
            return False
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –∫—ç—à
        with open(full_cache_file, 'r', encoding='utf-8') as f:
            full_contacts = json.load(f)
            
        print(f"   üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à –∏–∑ {len(full_contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à
        cache = OptimizedContactCache(optimized_cache_file)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∫—ç—à–∞
        cache.add_contacts(full_contacts)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à
        cache.save_cache()
        
        print(f"   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω: {optimized_cache_file}")
        
        # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –∫—ç—à all_contacts_optimized.json
        rebuild_combined_optimized_cache()
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∞: {e}")
        return False


def rebuild_combined_optimized_cache() -> bool:
    """
    –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à all_contacts_optimized.json
    """
    try:
        from src.domain.services.contact_cache import OptimizedContactCache
        
        all_contacts = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        full_cache_files = [
            "data/full_contacts/TaVie_Europe_20092948714_full.json",
            "data/full_contacts/PARKENTERTAINMENT_20082562863_full.json"
        ]
        
        for full_cache_file in full_cache_files:
            if os.path.exists(full_cache_file):
                with open(full_cache_file, 'r', encoding='utf-8') as f:
                    contacts = json.load(f)
                    all_contacts.extend(contacts)
                    
        print(f"   üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫—ç—à –∏–∑ {len(all_contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à
        combined_cache_file = "data/optimized_cache/all_contacts_optimized.json"
        cache = OptimizedContactCache(combined_cache_file)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        cache.add_contacts(all_contacts)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à
        cache.save_cache()
        
        print(f"   ‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫—ç—à –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω: {combined_cache_file}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞: {e}")
        return False


async def refresh_single_contact_cache(contact_id: str, organization_id: str, organization_name: str) -> bool:
    """
    –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    1. –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Zoho API
    2. –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π –∫—ç—à (data/full_contacts/)
    3. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à –∏–∑ –ø–æ–ª–Ω–æ–≥–æ
    
    Args:
        contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Zoho
        organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ Zoho
        organization_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (PARKENTERTAINMENT –∏–ª–∏ TaVie Europe O√ú)
    
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        from functions.zoho_api import get_contact_details
        
        print(f"   üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ ID: {contact_id}")
        
        # –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –∏–∑ Zoho API
        contact_details = get_contact_details(organization_id, contact_id)
        if not contact_details:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id}")
            return False
        
        contact_name = contact_details.get('contact_name', 'Unknown')
        print(f"   üìã –ö–æ–Ω—Ç–∞–∫—Ç: {contact_name}")
        
        # –®–ê–ì 2: –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –∫—ç—à
        print(f"   üìÇ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –∫—ç—à...")
        if not update_contact_in_full_cache(contact_details, organization_name):
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫—ç—à–∞")
            return False
        
        # –®–ê–ì 3: –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à –∏–∑ –ø–æ–ª–Ω–æ–≥–æ
        print(f"   üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—ç—à...")
        if not rebuild_optimized_cache_from_full(organization_name):
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∞")
            return False
        
        print(f"   ‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_name}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
        return False


if __name__ == "__main__":
    asyncio.run(test_cache_refresh()) 