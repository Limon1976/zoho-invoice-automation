import os
import json
from functions.zoho_api import get_chart_of_accounts, get_all_customers
from typing import List, Dict

DATA_DIR = "data"
os.makedirs(DATA_DIR, exist_ok=True)

# –ü–æ–ª—É—á–∞–µ–º organization_id –∏–∑ env
ORG_IDS = [
    os.environ.get("ZOHO_ORGANIZATION_ID_1"),
    os.environ.get("ZOHO_ORGANIZATION_ID_2")
]

def export_accounts_for_org(org_id, org_name):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç Chart of Accounts –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    print(f"\nüìä –≠–∫—Å–ø–æ—Ä—Ç Chart of Accounts –¥–ª—è {org_name} (ID: {org_id})")
    accounts = get_chart_of_accounts(org_id)
    
    filename = f"data/zoho_accounts_{org_id}.json"
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(accounts, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(accounts)} —Å—á–µ—Ç–æ–≤ –≤ {filename}")

def load_accounts_from_cache(org_id: str) -> List[Dict]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç Chart of Accounts –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ data/zoho_accounts_{org_id}.json,
    –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    """
    filename = f"data/zoho_accounts_{org_id}.json"
    if not os.path.exists(filename):
        return []
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []

def get_accounts_cached_or_fetch(org_id: str, org_name: str) -> List[Dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ –∏–ª–∏ –≤—ã–≥—Ä—É–∂–∞–µ—Ç –∏–∑ Zoho –∏ –∫—ç—à–∏—Ä—É–µ—Ç,
    –µ—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç. –£–¥–æ–±–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤.
    """
    accounts = load_accounts_from_cache(org_id)
    if accounts:
        return accounts
    # –ö—ç—à–∞ –Ω–µ—Ç ‚Äî –≤—ã–≥—Ä—É–∂–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    export_accounts_for_org(org_id, org_name)
    return load_accounts_from_cache(org_id)

def export_suppliers_for_org(org_id, org_name):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (vendors) –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ —É–∂–µ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö contacts"""
    print(f"\nüì¶ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è {org_name} (ID: {org_id})")
    
    # –ß–∏—Ç–∞–µ–º —É–∂–µ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    contacts_filename = f"data/zoho_customers_{org_id}.json"
    
    if not os.path.exists(contacts_filename):
        print(f"‚ùå –§–∞–π–ª {contacts_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã.")
        return
    
    with open(contacts_filename, "r", encoding="utf-8") as f:
        all_contacts = json.load(f)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ vendors
    vendors = [contact for contact in all_contacts if contact.get('contact_type') == 'vendor']
    
    filename = f"data/zoho_vendors_{org_id}.json"
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(vendors, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(vendors)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ {filename}")

def export_customers_for_org(org_id, org_name):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (customers) –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    print(f"\nüë• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –¥–ª—è {org_name} (ID: {org_id})")
    
    # –ß–∏—Ç–∞–µ–º —É–∂–µ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    contacts_filename = f"data/zoho_customers_{org_id}.json"
    
    if not os.path.exists(contacts_filename):
        print(f"üìû –í—ã–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è {org_name}...")
        all_contacts = get_all_customers(org_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        with open(contacts_filename, "w", encoding="utf-8") as f:
            json.dump(all_contacts, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(all_contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ {contacts_filename}")
    else:
        with open(contacts_filename, "r", encoding="utf-8") as f:
            all_contacts = json.load(f)
        print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ {contacts_filename}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ customers
    customers = [contact for contact in all_contacts if contact.get('contact_type') == 'customer']
    
    customers_filename = f"data/zoho_customers_only_{org_id}.json"
    with open(customers_filename, "w", encoding="utf-8") as f:
        json.dump(customers, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(customers)} –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –≤ {customers_filename}")

if __name__ == "__main__":
    # Mapping –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    org_mapping = {
        "20092948714": "TaVie Europe O√ú",
        "20082562863": "PARKENTERTAINMENT Sp. z o. o."
    }
    
    for org_id in ORG_IDS:
        if org_id:
            org_name = org_mapping.get(org_id, f"Organization {org_id}")
            print(f"\nüè¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {org_name} (ID: {org_id})")
            
            export_accounts_for_org(org_id, org_name)
            export_suppliers_for_org(org_id, org_name)
            export_customers_for_org(org_id, org_name)
        else:
            print("Organization ID not set in environment.") 