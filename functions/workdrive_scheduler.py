"""
WorkDrive Scheduler
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ batch processor –≤ 23:59:59 Warsaw time
"""

import asyncio
import logging
import schedule
import time
from datetime import datetime
from zoneinfo import ZoneInfo
from functions.workdrive_batch_processor import run_daily_batch

logger = logging.getLogger(__name__)

def schedule_daily_job():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:59:59 Warsaw time
    schedule.every().day.at("23:59:59").do(run_job_async)
    logger.info("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ 23:59:59 (Warsaw time)")

def run_job_async():
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ async —Ñ—É–Ω–∫—Ü–∏–∏"""
    try:
        warsaw_time = datetime.now(ZoneInfo("Europe/Warsaw"))
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ WorkDrive –≤ {warsaw_time}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º async —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–æ–≤–æ–º event loop
        asyncio.run(run_daily_batch())
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")

def run_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    schedule_daily_job()
    
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ WorkDrive –∑–∞–ø—É—â–µ–Ω")
    logger.info("üïê –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:59:59 (Warsaw time)")
    
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    run_scheduler()


