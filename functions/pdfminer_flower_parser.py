"""
PDFMiner –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ HIBISPOL.
–ò–∑–≤–ª–µ–∫–∞–µ—Ç –í–°–ï –ø–æ–∑–∏—Ü–∏–∏ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏.
"""

import re
import logging
from typing import List, Dict, Any
from pdfminer.high_level import extract_text

logger = logging.getLogger(__name__)


def extract_flowers_with_pdfminer(pdf_path: str) -> List[Dict[str, Any]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Ü–≤–µ—Ç–æ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ PDF –∏—Å–ø–æ–ª—å–∑—É—è PDFMiner.
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å —Ç–æ—á–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏.
    
    Returns:
        List[Dict] —Å –ø–æ–ª—è–º–∏: position, name, quantity, unit_price_netto, vat_percent
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ PDFMiner
        logger.info(f"üìñ PDFMiner: –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ {pdf_path}")
        full_text = extract_text(pdf_path)
        logger.info(f"üìñ PDFMiner: –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(full_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        lines = [line.strip() for line in full_text.split('\n') if line.strip()]
        positions = []
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–Ω–æ–º–µ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö)
        i = 0
        while i < len(lines):
            line = lines[i].strip()
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ —Å –Ω–æ–º–µ—Ä–æ–º –ø–æ–∑–∏—Ü–∏–∏
            if line.isdigit() and 1 <= int(line) <= 50:
                pos_num = int(line)
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏—Ö 3 —Å—Ç—Ä–æ–∫–∞—Ö
                name = None
                for j in range(i + 1, min(i + 4, len(lines))):
                    candidate = lines[j].strip()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ)
                    if (candidate and 
                        len(candidate) > 3 and 
                        re.search(r'[a-zA-Z]', candidate) and
                        not candidate.isdigit() and
                        not re.match(r'^\d+[.,]\d+$', candidate) and
                        'szt' not in candidate.lower() and
                        '%' not in candidate):
                        name = candidate
                        break
                
                if name:
                    # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω—É –≤ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ (¬±15 —Å—Ç—Ä–æ–∫)
                    quantity = None
                    unit_price = None
                    vat_percent = 8  # –¥–µ—Ñ–æ–ª—Ç
                    
                    search_start = max(0, i - 5)
                    search_end = min(len(lines), i + 20)
                    
                    for j in range(search_start, search_end):
                        search_line = lines[j].strip()
                        
                        # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ + szt)
                        if quantity is None and 'szt' in search_line:
                            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —ç—Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö
                            qty_match = re.search(r'(\d+)\s*szt', search_line)
                            if qty_match:
                                quantity = int(qty_match.group(1))
                            else:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                                for k in [j-2, j-1, j+1, j+2]:
                                    if 0 <= k < len(lines) and lines[k].strip().isdigit():
                                        candidate_qty = int(lines[k].strip())
                                        if 1 <= candidate_qty <= 200:  # —Ä–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                                            quantity = candidate_qty
                                            break
                        
                        # –ò—â–µ–º —Ü–µ–Ω—É (—Ñ–æ—Ä–º–∞—Ç X,XX)
                        if unit_price is None:
                            price_match = re.search(r'(\d{1,3}[,\.]\d{2})', search_line)
                            if price_match:
                                price_str = price_match.group(1).replace(',', '.')
                                price_val = float(price_str)
                                # –ë–µ—Ä–µ–º —Ä–∞–∑—É–º–Ω—É—é —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
                                if 0.5 <= price_val <= 100:
                                    unit_price = price_val
                        
                        # –ò—â–µ–º VAT –ø—Ä–æ—Ü–µ–Ω—Ç
                        vat_match = re.search(r'(\d+)%', search_line)
                        if vat_match:
                            vat_percent = int(vat_match.group(1))
                    
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                    if quantity and unit_price:
                        positions.append({
                            'position': pos_num,
                            'name': name,
                            'quantity': quantity,
                            'unit_price_netto': unit_price,
                            'vat_percent': vat_percent
                        })
                        logger.info(f"‚úÖ –ü–æ–∑.{pos_num}: {name} | qty={quantity} | price={unit_price} | VAT={vat_percent}%")
                    else:
                        logger.warning(f"‚ùå –ü–æ–∑.{pos_num}: {name} - –Ω–µ –Ω–∞–π–¥–µ–Ω—ã qty={quantity} –∏–ª–∏ price={unit_price}")
            
            i += 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏
        positions.sort(key=lambda x: x['position'])
        
        logger.info(f"üìã PDFMiner: –Ω–∞–π–¥–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π")
        return positions
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ PDFMiner –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return []


def is_suitable_for_pdfminer(pdf_path: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è PDFMiner –ø–∞—Ä—Å–∏–Ω–≥–∞.
    """
    try:
        text = extract_text(pdf_path)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π –∏ —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        has_positions = bool(re.search(r'\d+\s+[A-Za-z]', text))
        has_quantities = 'szt' in text.lower()
        
        logger.info(f"üìã PDFMiner –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–∑–∏—Ü–∏–∏={has_positions}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞={has_quantities}")
        return has_positions and has_quantities
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PDFMiner: {e}")
        return False
