"""
–¢–æ—á–µ—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ Zoho Books API
"""
import requests
import json
import time
from typing import Optional, Dict, Any, List

# –ò–º–ø–æ—Ä—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
try:
    from .zoho_api import get_access_token, log_message
except ImportError:
    # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∑–∞–ø—É—Å–∫
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    from zoho_api import get_access_token, log_message


class ZohoContactSearcher:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–æ—á–µ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ Zoho Books"""
    
    def __init__(self):
        self.base_url = "https://www.zohoapis.eu/books/v3"
        
    def search_contact_by_name(self, company_name: str, organization_id: str) -> Optional[Dict[str, Any]]:
        """
        –¢–æ—á–µ—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
        
        Args:
            company_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (20092948714 –∏–ª–∏ 20082562863)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            access_token = get_access_token()
            if not access_token:
                log_message("ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token")
                return None
                
            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            search_url = f"{self.base_url}/contacts"
            params = {
                'organization_id': organization_id,
                'contact_name_contains': company_name
            }
            
            headers = {
                'Authorization': f'Zoho-oauthtoken {access_token}',
                'Content-Type': 'application/json'
            }
            
            log_message(f"üîç –ò—â—É –∫–æ–Ω—Ç–∞–∫—Ç: {company_name} –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization_id}")
            
            response = requests.get(search_url, headers=headers, params=params)
            
            if response.status_code == 200:
                data = response.json()
                contacts = data.get('contacts', [])
                
                if contacts:
                    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–µ–µ
                    exact_match = None
                    best_match = None
                    best_score = 0
                    
                    for contact in contacts:
                        contact_name = contact.get('contact_name', '')
                        company_name_field = contact.get('company_name', '')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                        if (contact_name.lower() == company_name.lower() or 
                            company_name_field.lower() == company_name.lower()):
                            exact_match = contact
                            break
                            
                        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                        score = self._calculate_similarity(company_name, contact_name)
                        if score > best_score:
                            best_score = score
                            best_match = contact
                    
                    found_contact = exact_match or best_match
                    if found_contact:
                        log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {found_contact.get('contact_name')} (ID: {found_contact.get('contact_id')})")
                        
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
                        return self._get_full_contact_details(found_contact.get('contact_id'), organization_id)
                    
                log_message(f"‚ùå –ö–æ–Ω—Ç–∞–∫—Ç '{company_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization_id}")
                return None
                
            else:
                log_message(f"ERROR: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            log_message(f"ERROR: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}")
            return None
            
    def _get_full_contact_details(self, contact_id: str, organization_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –ø–æ ID"""
        try:
            access_token = get_access_token()
            if not access_token:
                return None
                
            details_url = f"{self.base_url}/contacts/{contact_id}"
            params = {'organization_id': organization_id}
            
            headers = {
                'Authorization': f'Zoho-oauthtoken {access_token}',
                'Content-Type': 'application/json'
            }
            
            response = requests.get(details_url, headers=headers, params=params)
            
            if response.status_code == 200:
                data = response.json()
                contact = data.get('contact', {})
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º VAT –Ω–æ–º–µ—Ä –∏–∑ custom_fields
                vat_number = None
                custom_fields = contact.get('custom_fields', [])
                for field in custom_fields:
                    if field.get('api_name') == 'cf_tax_id':
                        vat_number = field.get('value')
                        break
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                standardized_contact = {
                    'contact_id': contact.get('contact_id'),
                    'contact_name': contact.get('contact_name'),
                    'company_name': contact.get('company_name'),
                    'contact_type': contact.get('contact_type'),
                    'email': contact.get('email'),
                    'phone': contact.get('phone'),
                    'website': contact.get('website'),
                    'vat_number': vat_number,
                    'billing_address': contact.get('billing_address', {}),
                    'shipping_address': contact.get('shipping_address', {}),
                    'contact_persons': contact.get('contact_persons', []),
                    'custom_fields': custom_fields,
                    'organization_id': organization_id,
                    'last_modified_time': contact.get('last_modified_time'),
                    'created_time': contact.get('created_time')
                }
                
                if vat_number:
                    log_message(f"‚úÖ VAT –Ω–∞–π–¥–µ–Ω: {vat_number}")
                
                return standardized_contact
                
            else:
                log_message(f"ERROR: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞: {response.status_code}")
                return None
                
        except Exception as e:
            log_message(f"ERROR: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}")
            return None
            
    def _calculate_similarity(self, str1: str, str2: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏"""
        from difflib import SequenceMatcher
        return SequenceMatcher(None, str1.lower(), str2.lower()).ratio()
        
    def search_in_both_organizations(self, company_name: str) -> Optional[Dict[str, Any]]:
        """
        –ò—â–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –≤ –æ–±–µ–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö
        
        Args:
            company_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        organizations = {
            "20092948714": "TaVie Europe O√ú",
            "20082562863": "PARKENTERTAINMENT"
        }
        
        for org_id, org_name in organizations.items():
            log_message(f"üîç –ü–æ–∏—Å–∫ –≤ {org_name} ({org_id})")
            
            contact = self.search_contact_by_name(company_name, org_id)
            if contact:
                contact['organization_name'] = org_name
                return contact
                
        log_message(f"‚ùå –ö–æ–Ω—Ç–∞–∫—Ç '{company_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
        return None


def search_contact_by_name(company_name: str, organization_id: Optional[str] = None) -> Optional[Dict[str, Any]]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    
    Args:
        company_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        organization_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ None, –∏—â–µ—Ç –≤ –æ–±–µ–∏—Ö)
        
    Returns:
        –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ None
    """
    searcher = ZohoContactSearcher()
    
    if organization_id:
        return searcher.search_contact_by_name(company_name, organization_id)
    else:
        return searcher.search_in_both_organizations(company_name)


if __name__ == "__main__":
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    result = search_contact_by_name("Horrer Automobile GmbH")
    if result:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {result['contact_name']}")
        print(f"üìß Email: {result.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {result.get('organization_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        if result.get('vat_number'):
            print(f"üî¢ VAT: {result['vat_number']}")
    else:
        print("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω") 