import os
import requests
import time
import calendar
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("/Users/macos/my_project/.env")

# API-–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ZOHO_CLIENT_ID = os.getenv("ZOHO_CLIENT_ID")
ZOHO_CLIENT_SECRET = os.getenv("ZOHO_CLIENT_SECRET")
ZOHO_REFRESH_TOKEN = os.getenv("ZOHO_REFRESH_TOKEN")
TOKEN_URL = "https://accounts.zoho.eu/oauth/v2/token"
BILLS_URL = "https://www.zohoapis.eu/books/v3/bills"

# –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–æ—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤)
ORG_ID_1 = os.getenv("ZOHO_ORGANIZATION_ID_1", "").strip()
ORG_ID_2 = os.getenv("ZOHO_ORGANIZATION_ID_2", "").strip()

# –§–∞–π–ª –ª–æ–≥–æ–≤
LOG_FILE = "/Users/macos/my_project/zoho_api.log"

# –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤ –ø–∞–º—è—Ç–∏
ACCESS_TOKEN = None

def log_message(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤."""
    with open(LOG_FILE, "a") as log:
        log.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {message}\n")
    print(message)

def get_access_token():
    """–ü–æ–ª—É—á–∞–µ–º access_token –∏ –∫—ç—à–∏—Ä—É–µ–º –µ–≥–æ."""
    global ACCESS_TOKEN
    if ACCESS_TOKEN:
        return ACCESS_TOKEN

    params = {
        "refresh_token": ZOHO_REFRESH_TOKEN,
        "client_id": ZOHO_CLIENT_ID,
        "client_secret": ZOHO_CLIENT_SECRET,
        "grant_type": "refresh_token"
    }

    response = requests.post(TOKEN_URL, data=params)
    data = response.json()

    if "access_token" in data:
        ACCESS_TOKEN = data["access_token"]
        os.environ["ZOHO_ACCESS_TOKEN"] = ACCESS_TOKEN  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        log_message("‚úÖ ZOHO_ACCESS_TOKEN –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        return ACCESS_TOKEN
    else:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {data}")
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {data}")

def get_bills(org_id, year, month):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ Bill –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥."""
    access_token = get_access_token()
    headers = {"Authorization": f"Zoho-oauthtoken {access_token}"}

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    last_day = calendar.monthrange(year, month)[1]
    
    params = {
        "organization_id": org_id,
        "date_start": f"{year}-{month:02d}-01",
        "date_end": f"{year}-{month:02d}-{last_day}"
    }

    log_message(f"üì§ –ó–∞–ø—Ä–æ—Å —Å—á–µ—Ç–æ–≤ —Å organization_id={org_id}: {params}")

    response = requests.get(BILLS_URL, headers=headers, params=params)
    if response.status_code == 401:
        log_message("üîÑ –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª. –û–±–Ω–æ–≤–ª—è–µ–º...")
        global ACCESS_TOKEN
        ACCESS_TOKEN = None
        return get_bills(org_id, year, month)

    data = response.json()
    if "bills" not in data:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ API: {data}")
        return []

    bills_list = []
    for bill in data["bills"]:
        bill_id = bill["bill_id"]
        has_attachment = bill.get("has_attachment", False)
        attachment_id = bill_id if has_attachment else None
        bills_list.append((bill["bill_number"], bill_id, has_attachment, attachment_id))
    
    return bills_list

def download_attachment(org_id, bill_id, save_path):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–µ —Å—á–µ—Ç–∞."""
    access_token = get_access_token()
    headers = {"Authorization": f"Zoho-oauthtoken {access_token}"}
    url = f"{BILLS_URL}/{bill_id}/attachment?organization_id={org_id}"

    response = requests.get(url, headers=headers, stream=True)
    if response.status_code == 200:
        file_path = os.path.join(save_path, f"invoice_{bill_id}.pdf")
        with open(file_path, "wb") as file:
            for chunk in response.iter_content(chunk_size=1024):
                file.write(chunk)
        print(f"‚úÖ –í–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏—è: {response.json()}")

if __name__ == "__main__":
    print("\nüìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
    print("1 - TaVie Europe O√ú")
    print("2 - PARKENTERTAINMENT Sp. z o. o.")

    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (1 –∏–ª–∏ 2): ").strip()
    org_id = ORG_ID_1 if choice == "1" else ORG_ID_2

    year = int(input("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025): ").strip())
    month = int(input("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, 02): ").strip())

    bills = get_bills(org_id, year, month)

    if bills:
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞:")
        for bill_number, bill_id, has_attachment, attachment_id in bills:
            print(f"üìÑ –ù–æ–º–µ—Ä: {bill_number}, ID: {bill_id}, –í–ª–æ–∂–µ–Ω–∏—è: {has_attachment}, Attachment ID: {attachment_id}")

        bill_id = input("\n–í–≤–µ–¥–∏—Ç–µ ID —Å—á–µ—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏—è: ").strip()
        save_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è ~/Downloads): ").strip()
        save_path = save_path if save_path else os.path.expanduser("~/Downloads")

        download_attachment(org_id, bill_id, save_path)
    else:
        print(f"\n‚ùå `Bill` –∑–∞ {year}-{month} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


def get_existing_bill_numbers(org_id: str) -> list:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å—á–µ—Ç–æ–≤ (bill_number) –∏–∑ Zoho Books –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
    """
    access_token = get_access_token()
    headers = {"Authorization": f"Zoho-oauthtoken {access_token}"}

    params = {
        "organization_id": org_id,
        "sort_column": "bill_number",
        "sort_order": "A",
        "per_page": 200,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        "page": 1,
    }

    bill_numbers = []

    while True:
        response = requests.get(BILLS_URL, headers=headers, params=params)
        data = response.json()

        if "bills" not in data:
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤: {data}")
            break

        for bill in data["bills"]:
            bill_numbers.append((bill["bill_number"], bill["vendor_name"]))

        if not data.get("page_context", {}).get("has_more_page"):
            break

        params["page"] += 1

    return bill_numbers
